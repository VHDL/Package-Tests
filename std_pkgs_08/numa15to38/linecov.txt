
Line coverage for $root.$pkgs.not_ieee.numeric_std:

Coverage for source: /project/dsim/kcampbell/superp/source/dsim/../../test/dsim/vh_tests/std_pkgs/not_ieee/2008/numeric_std-body.vhdl

           0 if                  338                              return NAS;
                                 339       end if;
                                 340       
           0 implicit_else       338       if ARG'length < 1 then 
           0 reconvergence       340       RESULT := TO_01(XARG, 'X');
                                 341       
           0 if                  341                                           return RESULT;
                                 342       end if;
                                 343       
           0 implicit_else       341       if (RESULT(RESULT'left) = 'X') then 
           0 if                  344         RESULT := -RESULT;
                                 345       end if;
                                 346       
           0 implicit_else       343       if RESULT(RESULT'left) = '1' then
                                 344         
           0 reconvergence       346       return RESULT;
                                 347     end function "abs"
           0 if                  355                              return NAS;
                                 356       end if;
                                 357       
      197541 implicit_else       355       if ARG'length < 1 then 
      197541 reconvergence       357       XARG01 := TO_01(ARG, 'X');
                                 358       
           0 if                  358                                           return XARG01;
                                 359       end if;
                                 360       
      197541 implicit_else       358       if (XARG01(XARG01'left) = 'X') then 
      197541 reconvergence       360       for I in 0 to RESULT'left loop
                                 361         
     1827488 loop_body           361         RESULT(I) := not(XARG01(I)) xor CBIT;
                                 362         CBIT      := CBIT and not(XARG01(I));
                                 363       end loop;
                                 364       
      197541 reconvergence       364       return RESULT;
                                 365     end function "-"
           0 if                  375                                                  return NAU;
                                 376       end if;
                                 377       
        6144 implicit_else       375       if ((L'length < 1) or (R'length < 1)) then 
        6144 reconvergence       377       L01 := TO_01(RESIZE(L, SIZE), 'X');
                                 378       
           0 if                  378                                     return L01;
                                 379       end if;
                                 380       
        6144 implicit_else       378       if (L01(L01'left) = 'X') then 
        6144 reconvergence       380       R01 := TO_01(RESIZE(R, SIZE), 'X');
                                 381       
           0 if                  381                                     return R01;
                                 382       end if;
                                 383       
        6144 implicit_else       381       if (R01(R01'left) = 'X') then 
        6144 reconvergence       383       return ADD_UNSIGNED(L01, R01, '0');
                                 384     end function "+"
           0 sequence            392       XR(0) := R;
                                 393       return (L + XR);
                                 394     end function "+"
           0 sequence            402       XL(0) := L;
                                 403       return (XL + R);
                                 404     end function "+"
           0 if                  412                                                  return NAS;
                                 413       end if;
                                 414       
       59556 implicit_else       412       if ((L'length < 1) or (R'length < 1)) then 
       59556 reconvergence       414       L01 := TO_01(RESIZE(L, SIZE), 'X');
                                 415       
           0 if                  415                                     return L01;
                                 416       end if;
                                 417       
       59556 implicit_else       415       if (L01(L01'left) = 'X') then 
       59556 reconvergence       417       R01 := TO_01(RESIZE(R, SIZE), 'X');
                                 418       
           0 if                  418                                     return R01;
                                 419       end if;
                                 420       
       59556 implicit_else       418       if (R01(R01'left) = 'X') then 
       59556 reconvergence       420       return ADD_SIGNED(L01, R01, '0');
                                 421     end function "+"
           0 sequence            429       XR(0) := R;
                                 430       return (L + XR);
                                 431     end function "+"
           0 sequence            439       XL(0) := L;
                                 440       return (XL + R);
                                 441     end function "+"
           0 sequence            447       return L + TO_UNSIGNED(R, L'length);
                                 448     end function "+"
           0 sequence            454       return TO_UNSIGNED(L, R'length) + R;
                                 455     end function "+"
           0 sequence            468       return TO_SIGNED(L, R'length) + R;
                                 469     end function "+"
       54692 sequence            461       return L + TO_SIGNED(R, L'length);
                                 462     end function "+"
           0 if                  479                                                  return NAU;
                                 480       end if;
                                 481       
     1043339 implicit_else       479       if ((L'length < 1) or (R'length < 1)) then 
     1043339 reconvergence       481       L01 := TO_01(RESIZE(L, SIZE), 'X');
                                 482       
           0 if                  482                                     return L01;
                                 483       end if;
                                 484       
     1043339 implicit_else       482       if (L01(L01'left) = 'X') then 
     1043339 reconvergence       484       R01 := TO_01(RESIZE(R, SIZE), 'X');
                                 485       
           0 if                  485                                     return R01;
                                 486       end if;
                                 487       
     1043339 implicit_else       485       if (R01(R01'left) = 'X') then 
     1043339 reconvergence       487       return ADD_UNSIGNED(L01, not(R01), '1');
                                 488     end function "-"
           0 sequence            496       XR(0) := R;
                                 497       return (L - XR);
                                 498     end function "-"
           0 sequence            506       XL(0) := L;
                                 507       return (XL - R);
                                 508     end function "-"
           0 if                  516                                                  return NAS;
                                 517       end if;
                                 518       
        1280 implicit_else       516       if ((L'length < 1) or (R'length < 1)) then 
        1280 reconvergence       518       L01 := TO_01(RESIZE(L, SIZE), 'X');
                                 519       
           0 if                  519                                     return L01;
                                 520       end if;
                                 521       
        1280 implicit_else       519       if (L01(L01'left) = 'X') then 
        1280 reconvergence       521       R01 := TO_01(RESIZE(R, SIZE), 'X');
                                 522       
           0 if                  522                                     return R01;
                                 523       end if;
                                 524       
        1280 implicit_else       522       if (R01(R01'left) = 'X') then 
        1280 reconvergence       524       return ADD_SIGNED(L01, not(R01), '1');
                                 525     end function "-"
           0 sequence            533       XR(0) := R;
                                 534       return (L - XR);
                                 535     end function "-"
           0 sequence            543       XL(0) := L;
                                 544       return (XL - R);
                                 545     end function "-"
           0 sequence            551       return L - TO_UNSIGNED(R, L'length);
                                 552     end function "-"
           0 sequence            558       return TO_UNSIGNED(L, R'length) - R;
                                 559     end function "-"
           0 sequence            564       return L - TO_SIGNED(R, L'length);
                                 565     end function "-"
           0 sequence            570       return TO_SIGNED(L, R'length) - R;
                                 571     end function "-"
           0 if                  587                                                  return NAU;
                                 588       end if;
                                 589       
        2560 implicit_else       587       if ((L'length < 1) or (R'length < 1)) then 
        2560 reconvergence       589       XL := TO_01(XXL, 'X');
                                 590       XR := TO_01(XXR, 'X');
                                 591       
           0 if                  592         RESULT := (others => 'X');
                                 593         return RESULT;
                                 594       end if;
                                 595       
        2560 implicit_else       591       if ((XL(XL'left) = 'X') or (XR(XR'left) = 'X')) then
                                 592         
        2560 reconvergence       595       ADVAL := RESIZE(XR, RESULT'length);
                                 596       for I in 0 to L_LEFT loop
                                 597         
       12288 reconvergence       599         ADVAL                      := SHIFT_LEFT(ADVAL, 1);
                                 600       end loop;
                                 601       
        2560 reconvergence       601       return RESULT;
                                 602     end function "*"
        6144 if                  597                             RESULT := RESULT + ADVAL;
                                 598         end if;
                                 599         
        6144 else                597         if XL(I) = '1' then 
        2560 sequence            614       if ((L_LEFT < 0) or (R_LEFT < 0)) then 
           0 if                  614                                              return NAS;
                                 615       end if;
                                 616       
        2560 reconvergence       616       XL := TO_01(L, 'X');
                                 617       XR := TO_01(R, 'X');
                                 618       
           0 if                  619         RESULT := (others => 'X');
                                 620         return RESULT;
                                 621       end if;
                                 622       
        2560 implicit_else       618       if ((XL(L_LEFT) = 'X') or (XR(R_LEFT) = 'X')) then
                                 619         
        2560 reconvergence       622       ADVAL := RESIZE(XR, RESULT'length);
                                 623       for I in 0 to L_LEFT-1 loop
                                 624         
        9728 reconvergence       626         ADVAL                      := SHIFT_LEFT(ADVAL, 1);
                                 627       end loop;
                                 628       
        4864 if                  624                             RESULT := RESULT + ADVAL;
                                 625         end if;
                                 626         
        4864 else                624         if XL(I) = '1' then 
        1280 if                  629         RESULT := RESULT - ADVAL;
                                 630       end if;
                                 631       
        1280 implicit_else       628       if XL(L_LEFT) = '1' then
                                 629         
        2560 reconvergence       631       return RESULT;
                                 632     end function "*"
         256 sequence            638       return L * TO_UNSIGNED(R, L'length);
                                 639     end function "*"
         256 sequence            645       return TO_UNSIGNED(L, R'length) * R;
                                 646     end function "*"
         256 sequence            652       return L * TO_SIGNED(R, L'length);
                                 653     end function "*"
         256 sequence            658       return TO_SIGNED(L, R'length) * R;
                                 659     end function "*"
           0 if                  674                                                  return NAU;
                                 675       end if;
                                 676       
       46085 implicit_else       674       if ((L'length < 1) or (R'length < 1)) then 
       46085 reconvergence       676       XL := TO_01(XXL, 'X');
                                 677       XR := TO_01(XXR, 'X');
                                 678       
           0 if                  679         FQUOT := (others => 'X');
                                 680         return FQUOT;
                                 681       end if;
                                 682       
       46085 implicit_else       678       if ((XL(XL'left) = 'X') or (XR(XR'left) = 'X')) then
                                 679         
       46085 reconvergence       682       DIVMOD(XL, XR, FQUOT, FREMAIN);
                                 683       return FQUOT;
                                 684     end function "/"
           0 if                  700                                                  return NAS;
                                 701       end if;
                                 702       
       46082 implicit_else       700       if ((L'length < 1) or (R'length < 1)) then 
       46082 reconvergence       702       XL := TO_01(XXL, 'X');
                                 703       XR := TO_01(XXR, 'X');
                                 704       
           0 if                  705         FQUOT := (others => 'X');
                                 706         return UNRESOLVED_SIGNED(FQUOT);
                                 707       end if;
                                 708       
       46082 implicit_else       704       if ((XL(XL'left) = 'X') or (XR(XR'left) = 'X')) then
                                 705         
       46082 reconvergence       708       if XL(XL'left) = '1' then
                                 709         
       23041 if                  709         XNUM := UNRESOLVED_UNSIGNED(-XL);
                                 710         QNEG := true;
                                 711       else
                                 712         
       23041 else                712         XNUM := UNRESOLVED_UNSIGNED(XL);
                                 713       end if;
                                 714       
       46082 reconvergence       714       if XR(XR'left) = '1' then
                                 715         
       24576 if                  715         XDENOM := UNRESOLVED_UNSIGNED(-XR);
                                 716         QNEG   := not QNEG;
                                 717       else
                                 718         
       21506 else                718         XDENOM := UNRESOLVED_UNSIGNED(XR);
                                 719       end if;
                                 720       
       46082 reconvergence       720       DIVMOD(XNUM, XDENOM, FQUOT, FREMAIN);
                                 721       
       23041 if                  721                    FQUOT := "0"-FQUOT;
                                 722       end if;
                                 723       
       23041 implicit_else       721       if QNEG then 
       46082 reconvergence       723       return UNRESOLVED_SIGNED(FQUOT);
                                 724     end function "/"
           0 if                  733                              return NAU;
                                 734       end if;
                                 735       
       15360 implicit_else       733       if (L'length < 1) then 
           0 if                  736         QUOT := (others => '0');
                                 737         return RESIZE(QUOT, L'length);
                                 738       end if;
                                 739       
       15360 implicit_else       735       if (R_LENGTH > L'length) then
                                 736         
       15360 reconvergence       739       XR   := TO_UNSIGNED(R, R_LENGTH);
                                 740       QUOT := RESIZE((L / XR), QUOT'length);
                                 741       return RESIZE(QUOT, L'length);
                                 742     end function "/"
           0 if                  751                              return NAU;
                                 752       end if;
                                 753       
       15360 implicit_else       751       if (R'length < 1) then 
       15360 reconvergence       753       XL   := TO_UNSIGNED(L, L_LENGTH);
                                 754       QUOT := RESIZE((XL / R), QUOT'length);
                                 755       
           0 if                  759         assert NO_WARNING report "NUMERIC_STD.""/"": Quotient Truncated"
                                 760           severity warning;
                                 761       end if;
                                 762       
       15360 implicit_else       755       if L_LENGTH > R'length and QUOT(0) /= 'X'
                                 756         and QUOT(L_LENGTH-1 downto R'length)
                                 757         /= (L_LENGTH-1 downto R'length => '0')
                                 758       then
                                 759         
       15360 reconvergence       762       return RESIZE(QUOT, R'length);
                                 763     end function "/"
           0 if                  770                              return NAS;
                                 771       end if;
                                 772       
       15360 implicit_else       770       if (L'length < 1) then 
           0 if                  773         QUOT := (others => '0');
                                 774         return RESIZE(QUOT, L'length);
                                 775       end if;
                                 776       
       15360 implicit_else       772       if (R_LENGTH > L'length) then
                                 773         
       15360 reconvergence       776       XR   := TO_SIGNED(R, R_LENGTH);
                                 777       QUOT := RESIZE((L / XR), QUOT'length);
                                 778       return RESIZE(QUOT, L'length);
                                 779     end function "/"
           0 if                  786                              return NAS;
                                 787       end if;
                                 788       
       15360 implicit_else       786       if (R'length < 1) then 
       15360 reconvergence       788       XL   := TO_SIGNED(L, L_LENGTH);
                                 789       QUOT := RESIZE((XL / R), QUOT'length);
                                 790       
           0 if                  794         assert NO_WARNING report "NUMERIC_STD.""/"": Quotient Truncated"
                                 795           severity warning;
                                 796       end if;
                                 797       
       15360 implicit_else       790       if L_LENGTH > R'length and QUOT(0) /= 'X'
                                 791         and QUOT(L_LENGTH-1 downto R'length)
                                 792         /= (L_LENGTH-1 downto R'length => QUOT(R'length-1))
                                 793       then
                                 794         
       15360 reconvergence       797       return RESIZE(QUOT, R'length);
                                 798     end function "/"
           0 if                  813                                                  return NAU;
                                 814       end if;
                                 815       
       46080 implicit_else       813       if ((L'length < 1) or (R'length < 1)) then 
       46080 reconvergence       815       XL := TO_01(XXL, 'X');
                                 816       XR := TO_01(XXR, 'X');
                                 817       
           0 if                  818         FREMAIN := (others => 'X');
                                 819         return FREMAIN;
                                 820       end if;
                                 821       
       46080 implicit_else       817       if ((XL(XL'left) = 'X') or (XR(XR'left) = 'X')) then
                                 818         
       46080 reconvergence       821       DIVMOD(XL, XR, FQUOT, FREMAIN);
                                 822       return FREMAIN;
                                 823     end function "rem"
           0 if                  837                                                  return NAS;
                                 838       end if;
                                 839       
       46080 implicit_else       837       if ((L'length < 1) or (R'length < 1)) then 
       46080 reconvergence       839       XNUM   := UNRESOLVED_UNSIGNED(TO_01(XXL, 'X'));
                                 840       XDENOM := UNRESOLVED_UNSIGNED(TO_01(XXR, 'X'));
                                 841       
           0 if                  842         FREMAIN := (others => 'X');
                                 843         return UNRESOLVED_SIGNED(FREMAIN);
                                 844       end if;
                                 845       
       46080 implicit_else       841       if ((XNUM(XNUM'left) = 'X') or (XDENOM(XDENOM'left) = 'X')) then
                                 842         
       46080 reconvergence       845       if XNUM(XNUM'left) = '1' then
                                 846         
       23040 if                  846         XNUM := UNRESOLVED_UNSIGNED(-UNRESOLVED_SIGNED(XNUM));
                                 847         RNEG := true;
                                 848       else
                                 849         
       23040 else                849         XNUM := UNRESOLVED_UNSIGNED(XNUM);
                                 850       end if;
                                 851       
       46080 reconvergence       851       if XDENOM(XDENOM'left) = '1' then
                                 852         
       24576 if                  852         XDENOM := UNRESOLVED_UNSIGNED(-UNRESOLVED_SIGNED(XDENOM));
                                 853       else
                                 854         
       21504 else                854         XDENOM := UNRESOLVED_UNSIGNED(XDENOM);
                                 855       end if;
                                 856       
       46080 reconvergence       856       DIVMOD(XNUM, XDENOM, FQUOT, FREMAIN);
                                 857       
       23040 if                  858         FREMAIN := "0"-FREMAIN;
                                 859       end if;
                                 860       
       23040 implicit_else       857       if RNEG then
                                 858         
       46080 reconvergence       860       return UNRESOLVED_SIGNED(FREMAIN);
                                 861     end function "rem"
           0 if                  870                              return NAU;
                                 871       end if;
                                 872       
       15360 implicit_else       870       if (L'length < 1) then 
       15360 reconvergence       872       XR   := TO_UNSIGNED(R, R_LENGTH);
                                 873       XREM := L rem XR;
                                 874       
           0 if                  878         assert NO_WARNING report "NUMERIC_STD.""rem"": Remainder Truncated"
                                 879           severity warning;
                                 880       end if;
                                 881       
       15360 implicit_else       874       if R_LENGTH > L'length and XREM(0) /= 'X'
                                 875         and XREM(R_LENGTH-1 downto L'length)
                                 876         /= (R_LENGTH-1 downto L'length => '0')
                                 877       then
                                 878         
       15360 reconvergence       881       return RESIZE(XREM, L'length);
                                 882     end function "rem"
       15360 sequence            891       XL   := TO_UNSIGNED(L, L_LENGTH);
                                 892       XREM := XL rem R;
                                 893       
           0 if                  897         assert NO_WARNING report "NUMERIC_STD.""rem"": Remainder Truncated"
                                 898           severity warning;
                                 899       end if;
                                 900       
       15360 implicit_else       893       if L_LENGTH > R'length and XREM(0) /= 'X'
                                 894         and XREM(L_LENGTH-1 downto R'length)
                                 895         /= (L_LENGTH-1 downto R'length => '0')
                                 896       then
                                 897         
       15360 reconvergence       900       return RESIZE(XREM, R'length);
                                 901     end function "rem"
           0 if                  910                              return NAS;
                                 911       end if;
                                 912       
       15360 implicit_else       910       if (L'length < 1) then 
       15360 reconvergence       912       XR   := TO_SIGNED(R, R_LENGTH);
                                 913       XREM := RESIZE((L rem XR), XREM'length);
                                 914       
           0 if                  918         assert NO_WARNING report "NUMERIC_STD.""rem"": Remainder Truncated"
                                 919           severity warning;
                                 920       end if;
                                 921       
       15360 implicit_else       914       if R_LENGTH > L'length and XREM(0) /= 'X'
                                 915         and XREM(R_LENGTH-1 downto L'length)
                                 916         /= (R_LENGTH-1 downto L'length => XREM(L'length-1))
                                 917       then
                                 918         
       15360 reconvergence       921       return RESIZE(XREM, L'length);
                                 922     end function "rem"
           0 if                  931                              return NAS;
                                 932       end if;
                                 933       
       15360 implicit_else       931       if (R'length < 1) then 
       15360 reconvergence       933       XL   := TO_SIGNED(L, L_LENGTH);
                                 934       XREM := RESIZE((XL rem R), XREM'length);
                                 935       
           0 if                  939         assert NO_WARNING report "NUMERIC_STD.""rem"": Remainder Truncated"
                                 940           severity warning;
                                 941       end if;
                                 942       
       15360 implicit_else       935       if L_LENGTH > R'length and XREM(0) /= 'X'
                                 936         and XREM(L_LENGTH-1 downto R'length)
                                 937         /= (L_LENGTH-1 downto R'length => XREM(R'length-1))
                                 938       then
                                 939         
       15360 reconvergence       942       return RESIZE(XREM, R'length);
                                 943     end function "rem"
           0 if                  958                                                  return NAU;
                                 959       end if;
                                 960       
       46080 implicit_else       958       if ((L'length < 1) or (R'length < 1)) then 
       46080 reconvergence       960       XL := TO_01(XXL, 'X');
                                 961       XR := TO_01(XXR, 'X');
                                 962       
           0 if                  963         FREMAIN := (others => 'X');
                                 964         return FREMAIN;
                                 965       end if;
                                 966       
       46080 implicit_else       962       if ((XL(XL'left) = 'X') or (XR(XR'left) = 'X')) then
                                 963         
       46080 reconvergence       966       DIVMOD(XL, XR, FQUOT, FREMAIN);
                                 967       return FREMAIN;
                                 968     end function "mod"
       46080 sequence            984       if ((L'length < 1) or (R'length < 1)) then 
           0 if                  984                                                  return NAS;
                                 985       end if;
                                 986       
       46080 reconvergence       986       XL := TO_01(XXL, 'X');
                                 987       XR := TO_01(XXR, 'X');
                                 988       
           0 if                  989         FREMAIN := (others => 'X');
                                 990         return UNRESOLVED_SIGNED(FREMAIN);
                                 991       end if;
                                 992       
       46080 implicit_else       988       if ((XL(XL'left) = 'X') or (XR(XR'left) = 'X')) then
                                 989         
       46080 reconvergence       992       if XL(XL'left) = '1' then
                                 993         
       23040 if                  993         XNUM := UNRESOLVED_UNSIGNED(-XL);
                                 994       else
                                 995         
       23040 else                995         XNUM := UNRESOLVED_UNSIGNED(XL);
                                 996       end if;
                                 997       
       46080 reconvergence       997       if XR(XR'left) = '1' then
                                 998         
       24576 if                  998         XDENOM := UNRESOLVED_UNSIGNED(-XR);
                                 999         RNEG   := true;
                                1000       else
                                1001         
       21504 else               1001         XDENOM := UNRESOLVED_UNSIGNED(XR);
                                1002       end if;
                                1003       
       46080 reconvergence      1003       DIVMOD(XNUM, XDENOM, FQUOT, FREMAIN);
                                1004       
       12288 if                 1005         FREMAIN := "0"-FREMAIN;
                                1006       elsif 
       33792 sequence           1006             RNEG and FREMAIN /= "0" then
                                1007         
        8106 elsif              1007         FREMAIN := FREMAIN-XDENOM;
                                1008       elsif 
       25686 sequence           1008             L(L'left) = '1' and FREMAIN /= "0" then
                                1009         
        6774 elsif              1009         FREMAIN := XDENOM-FREMAIN;
                                1010       end if;
                                1011       
       18912 implicit_else      1004       if RNEG and L(L'left) = '1' then
                                1005         
       46080 reconvergence      1011       return UNRESOLVED_SIGNED(FREMAIN);
                                1012     end function "mod"
           0 if                 1021                              return NAU;
                                1022       end if;
                                1023       
       15360 implicit_else      1021       if (L'length < 1) then 
       15360 reconvergence      1023       XR   := TO_UNSIGNED(R, R_LENGTH);
                                1024       XREM := RESIZE((L mod XR), XREM'length);
                                1025       
           0 if                 1029         assert NO_WARNING report "NUMERIC_STD.""mod"": Modulus Truncated"
                                1030           severity warning;
                                1031       end if;
                                1032       
       15360 implicit_else      1025       if R_LENGTH > L'length and XREM(0) /= 'X'
                                1026         and XREM(R_LENGTH-1 downto L'length)
                                1027         /= (R_LENGTH-1 downto L'length => '0')
                                1028       then
                                1029         
       15360 reconvergence      1032       return RESIZE(XREM, L'length);
                                1033     end function "mod"
           0 if                 1042                              return NAU;
                                1043       end if;
                                1044       
       15360 implicit_else      1042       if (R'length < 1) then 
       15360 reconvergence      1044       XL   := TO_UNSIGNED(L, L_LENGTH);
                                1045       XREM := RESIZE((XL mod R), XREM'length);
                                1046       
           0 if                 1050         assert NO_WARNING report "NUMERIC_STD.""mod"": Modulus Truncated"
                                1051           severity warning;
                                1052       end if;
                                1053       
       15360 implicit_else      1046       if L_LENGTH > R'length and XREM(0) /= 'X'
                                1047         and XREM(L_LENGTH-1 downto R'length)
                                1048         /= (L_LENGTH-1 downto R'length => '0')
                                1049       then
                                1050         
       15360 reconvergence      1053       return RESIZE(XREM, R'length);
                                1054     end function "mod"
           0 if                 1063                              return NAS;
                                1064       end if;
                                1065       
       15360 implicit_else      1063       if (L'length < 1) then 
       15360 reconvergence      1065       XR   := TO_SIGNED(R, R_LENGTH);
                                1066       XREM := RESIZE((L mod XR), XREM'length);
                                1067       
           0 if                 1071         assert NO_WARNING report "NUMERIC_STD.""mod"": Modulus Truncated"
                                1072           severity warning;
                                1073       end if;
                                1074       
       15360 implicit_else      1067       if R_LENGTH > L'length and XREM(0) /= 'X'
                                1068         and XREM(R_LENGTH-1 downto L'length)
                                1069         /= (R_LENGTH-1 downto L'length => XREM(L'length-1))
                                1070       then
                                1071         
       15360 reconvergence      1074       return RESIZE(XREM, L'length);
                                1075     end function "mod"
           0 if                 1084                              return NAS;
                                1085       end if;
                                1086       
       15360 implicit_else      1084       if (R'length < 1) then 
       15360 reconvergence      1086       XL   := TO_SIGNED(L, L_LENGTH);
                                1087       XREM := RESIZE((XL mod R), XREM'length);
                                1088       
           0 if                 1092         assert NO_WARNING report "NUMERIC_STD.""mod"": Modulus Truncated"
                                1093           severity warning;
                                1094       end if;
                                1095       
       15360 implicit_else      1088       if L_LENGTH > R'length and XREM(0) /= 'X'
                                1089         and XREM(L_LENGTH-1 downto R'length)
                                1090         /= (L_LENGTH-1 downto R'length => XREM(R'length-1))
                                1091       then
                                1092         
       15360 reconvergence      1095       return RESIZE(XREM, R'length);
                                1096     end function "mod"
           0 sequence           1103       for INDEX in ARG'range loop
                                1104         
           0 reconvergence      1108       return -1;
                                1109     end function find_leftmost
           0 if                 1105           return INDEX;
                                1106         end if;
                                1107       end loop;
                                1108       
           0 else               1104         if ARG(INDEX) ?= Y then
                                1105           
           0 sequence           1115       for INDEX in ARG'range loop
                                1116         
           0 reconvergence      1120       return -1;
                                1121     end function find_leftmost
           0 if                 1117           return INDEX;
                                1118         end if;
                                1119       end loop;
                                1120       
           0 else               1116         if ARG(INDEX) ?= Y then
                                1117           
           0 sequence           1127       for INDEX in ARG'reverse_range loop
                                1128         
           0 reconvergence      1132       return -1;
                                1133     end function find_rightmost
           0 if                 1129           return INDEX;
                                1130         end if;
                                1131       end loop;
                                1132       
           0 else               1128         if ARG(INDEX) ?= Y then
                                1129           
           0 sequence           1139       for INDEX in ARG'reverse_range loop
                                1140         
           0 reconvergence      1144       return -1;
                                1145     end function find_rightmost
           0 if                 1141           return INDEX;
                                1142         end if;
                                1143       end loop;
                                1144       
           0 else               1140         if ARG(INDEX) ?= Y then
                                1141           
           0 if                 1160         assert NO_WARNING
                                1161           report "NUMERIC_STD."">"": null argument detected, returning FALSE"
                                1162           severity warning;
                                1163         return false;
                                1164       end if;
                                1165       
           0 implicit_else      1159       if ((L'length < 1) or (R'length < 1)) then
                                1160         
           0 reconvergence      1165       L01 := TO_01(XL, 'X');
                                1166       R01 := TO_01(XR, 'X');
                                1167       
           0 if                 1168         assert NO_WARNING
                                1169           report "NUMERIC_STD."">"": metavalue detected, returning FALSE"
                                1170           severity warning;
                                1171         return false;
                                1172       end if;
                                1173       
           0 implicit_else      1167       if ((L01(L01'left) = 'X') or (R01(R01'left) = 'X')) then
                                1168         
           0 reconvergence      1173       return not UNSIGNED_LESS_OR_EQUAL(RESIZE(L01, SIZE), RESIZE(R01, SIZE));
                                1174     end function ">"
           0 if                 1187         assert NO_WARNING
                                1188           report "NUMERIC_STD."">"": null argument detected, returning FALSE"
                                1189           severity warning;
                                1190         return false;
                                1191       end if;
                                1192       
           0 implicit_else      1186       if ((L'length < 1) or (R'length < 1)) then
                                1187         
           0 reconvergence      1192       L01 := TO_01(XL, 'X');
                                1193       R01 := TO_01(XR, 'X');
                                1194       
           0 if                 1195         assert NO_WARNING
                                1196           report "NUMERIC_STD."">"": metavalue detected, returning FALSE"
                                1197           severity warning;
                                1198         return false;
                                1199       end if;
                                1200       
           0 implicit_else      1194       if ((L01(L01'left) = 'X') or (R01(R01'left) = 'X')) then
                                1195         
           0 reconvergence      1200       return not SIGNED_LESS_OR_EQUAL(RESIZE(L01, SIZE), RESIZE(R01, SIZE));
                                1201     end function ">"
           0 if                 1210         assert NO_WARNING
                                1211           report "NUMERIC_STD."">"": null argument detected, returning FALSE"
                                1212           severity warning;
                                1213         return false;
                                1214       end if;
                                1215       
           0 implicit_else      1209       if (R'length < 1) then
                                1210         
           0 reconvergence      1215       R01 := TO_01(XR, 'X');
                                1216       
           0 if                 1217         assert NO_WARNING
                                1218           report "NUMERIC_STD."">"": metavalue detected, returning FALSE"
                                1219           severity warning;
                                1220         return false;
                                1221       end if;
                                1222       
           0 implicit_else      1216       if (R01(R01'left) = 'X') then
                                1217         
           0 if                 1222                                               return true;
                                1223       end if;
                                1224       
           0 implicit_else      1222       if UNSIGNED_NUM_BITS(L) > R'length then 
           0 reconvergence      1224       return not UNSIGNED_LESS_OR_EQUAL(TO_UNSIGNED(L, R01'length), R01);
                                1225     end function ">"
           0 if                 1234         assert NO_WARNING
                                1235           report "NUMERIC_STD."">"": null argument detected, returning FALSE"
                                1236           severity warning;
                                1237         return false;
                                1238       end if;
                                1239       
           0 implicit_else      1233       if (R'length < 1) then
                                1234         
           0 reconvergence      1239       R01 := TO_01(XR, 'X');
                                1240       
           0 if                 1241         assert NO_WARNING
                                1242           report "NUMERIC_STD."">"": metavalue detected, returning FALSE"
                                1243           severity warning;
                                1244         return false;
                                1245       end if;
                                1246       
           0 implicit_else      1240       if (R01(R01'left) = 'X') then
                                1241         
           0 if                 1246                                             return L > 0;
                                1247       end if;
                                1248       
           0 implicit_else      1246       if SIGNED_NUM_BITS(L) > R'length then 
           0 reconvergence      1248       return not SIGNED_LESS_OR_EQUAL(TO_SIGNED(L, R01'length), R01);
                                1249     end function ">"
           0 if                 1258         assert NO_WARNING
                                1259           report "NUMERIC_STD."">"": null argument detected, returning FALSE"
                                1260           severity warning;
                                1261         return false;
                                1262       end if;
                                1263       
           0 implicit_else      1257       if (L'length < 1) then
                                1258         
           0 reconvergence      1263       L01 := TO_01(XL, 'X');
                                1264       
           0 if                 1265         assert NO_WARNING
                                1266           report "NUMERIC_STD."">"": metavalue detected, returning FALSE"
                                1267           severity warning;
                                1268         return false;
                                1269       end if;
                                1270       
           0 implicit_else      1264       if (L01(L01'left) = 'X') then
                                1265         
           0 if                 1270                                               return false;
                                1271       end if;
                                1272       
           0 implicit_else      1270       if UNSIGNED_NUM_BITS(R) > L'length then 
           0 reconvergence      1272       return not UNSIGNED_LESS_OR_EQUAL(L01, TO_UNSIGNED(R, L01'length));
                                1273     end function ">"
           0 if                 1282         assert NO_WARNING
                                1283           report "NUMERIC_STD."">"": null argument detected, returning FALSE"
                                1284           severity warning;
                                1285         return false;
                                1286       end if;
                                1287       
           0 implicit_else      1281       if (L'length < 1) then
                                1282         
           0 reconvergence      1287       L01 := TO_01(XL, 'X');
                                1288       
           0 if                 1289         assert NO_WARNING
                                1290           report "NUMERIC_STD."">"": metavalue detected, returning FALSE"
                                1291           severity warning;
                                1292         return false;
                                1293       end if;
                                1294       
           0 implicit_else      1288       if (L01(L01'left) = 'X') then
                                1289         
           0 if                 1294                                             return 0 > R;
                                1295       end if;
                                1296       
           0 implicit_else      1294       if SIGNED_NUM_BITS(R) > L'length then 
           0 reconvergence      1296       return not SIGNED_LESS_OR_EQUAL(L01, TO_SIGNED(R, L01'length));
                                1297     end function ">"
           0 if                 1312         assert NO_WARNING
                                1313           report "NUMERIC_STD.""<"": null argument detected, returning FALSE"
                                1314           severity warning;
                                1315         return false;
                                1316       end if;
                                1317       
           0 implicit_else      1311       if ((L'length < 1) or (R'length < 1)) then
                                1312         
           0 reconvergence      1317       L01 := TO_01(XL, 'X');
                                1318       R01 := TO_01(XR, 'X');
                                1319       
           0 if                 1320         assert NO_WARNING
                                1321           report "NUMERIC_STD.""<"": metavalue detected, returning FALSE"
                                1322           severity warning;
                                1323         return false;
                                1324       end if;
                                1325       
           0 implicit_else      1319       if ((L01(L01'left) = 'X') or (R01(R01'left) = 'X')) then
                                1320         
           0 reconvergence      1325       return UNSIGNED_LESS(RESIZE(L01, SIZE), RESIZE(R01, SIZE));
                                1326     end function "<"
           0 if                 1339         assert NO_WARNING
                                1340           report "NUMERIC_STD.""<"": null argument detected, returning FALSE"
                                1341           severity warning;
                                1342         return false;
                                1343       end if;
                                1344       
           0 implicit_else      1338       if ((L'length < 1) or (R'length < 1)) then
                                1339         
           0 reconvergence      1344       L01 := TO_01(XL, 'X');
                                1345       R01 := TO_01(XR, 'X');
                                1346       
           0 if                 1347         assert NO_WARNING
                                1348           report "NUMERIC_STD.""<"": metavalue detected, returning FALSE"
                                1349           severity warning;
                                1350         return false;
                                1351       end if;
                                1352       
           0 implicit_else      1346       if ((L01(L01'left) = 'X') or (R01(R01'left) = 'X')) then
                                1347         
           0 reconvergence      1352       return SIGNED_LESS(RESIZE(L01, SIZE), RESIZE(R01, SIZE));
                                1353     end function "<"
           0 if                 1362         assert NO_WARNING
                                1363           report "NUMERIC_STD.""<"": null argument detected, returning FALSE"
                                1364           severity warning;
                                1365         return false;
                                1366       end if;
                                1367       
           0 implicit_else      1361       if (R'length < 1) then
                                1362         
           0 reconvergence      1367       R01 := TO_01(XR, 'X');
                                1368       
           0 if                 1369         assert NO_WARNING
                                1370           report "NUMERIC_STD.""<"": metavalue detected, returning FALSE"
                                1371           severity warning;
                                1372         return false;
                                1373       end if;
                                1374       
           0 implicit_else      1368       if (R01(R01'left) = 'X') then
                                1369         
           0 if                 1374                                               return L < 0;
                                1375       end if;
                                1376       
           0 implicit_else      1374       if UNSIGNED_NUM_BITS(L) > R'length then 
           0 reconvergence      1376       return UNSIGNED_LESS(TO_UNSIGNED(L, R01'length), R01);
                                1377     end function "<"
           0 if                 1386         assert NO_WARNING
                                1387           report "NUMERIC_STD.""<"": null argument detected, returning FALSE"
                                1388           severity warning;
                                1389         return false;
                                1390       end if;
                                1391       
           0 implicit_else      1385       if (R'length < 1) then
                                1386         
           0 reconvergence      1391       R01 := TO_01(XR, 'X');
                                1392       
           0 if                 1393         assert NO_WARNING
                                1394           report "NUMERIC_STD.""<"": metavalue detected, returning FALSE"
                                1395           severity warning;
                                1396         return false;
                                1397       end if;
                                1398       
           0 implicit_else      1392       if (R01(R01'left) = 'X') then
                                1393         
           0 if                 1398                                             return L < 0;
                                1399       end if;
                                1400       
           0 implicit_else      1398       if SIGNED_NUM_BITS(L) > R'length then 
           0 reconvergence      1400       return SIGNED_LESS(TO_SIGNED(L, R01'length), R01);
                                1401     end function "<"
           0 if                 1410         assert NO_WARNING
                                1411           report "NUMERIC_STD.""<"": null argument detected, returning FALSE"
                                1412           severity warning;
                                1413         return false;
                                1414       end if;
                                1415       
           0 implicit_else      1409       if (L'length < 1) then
                                1410         
           0 reconvergence      1415       L01 := TO_01(XL, 'X');
                                1416       
           0 if                 1417         assert NO_WARNING
                                1418           report "NUMERIC_STD.""<"": metavalue detected, returning FALSE"
                                1419           severity warning;
                                1420         return false;
                                1421       end if;
                                1422       
           0 implicit_else      1416       if (L01(L01'left) = 'X') then
                                1417         
           0 if                 1422                                               return 0 < R;
                                1423       end if;
                                1424       
           0 implicit_else      1422       if UNSIGNED_NUM_BITS(R) > L'length then 
           0 reconvergence      1424       return UNSIGNED_LESS(L01, TO_UNSIGNED(R, L01'length));
                                1425     end function "<"
           0 if                 1434         assert NO_WARNING
                                1435           report "NUMERIC_STD.""<"": null argument detected, returning FALSE"
                                1436           severity warning;
                                1437         return false;
                                1438       end if;
                                1439       
           0 implicit_else      1433       if (L'length < 1) then
                                1434         
           0 reconvergence      1439       L01 := TO_01(XL, 'X');
                                1440       
           0 if                 1441         assert NO_WARNING
                                1442           report "NUMERIC_STD.""<"": metavalue detected, returning FALSE"
                                1443           severity warning;
                                1444         return false;
                                1445       end if;
                                1446       
           0 implicit_else      1440       if (L01(L01'left) = 'X') then
                                1441         
           0 if                 1446                                             return 0 < R;
                                1447       end if;
                                1448       
           0 implicit_else      1446       if SIGNED_NUM_BITS(R) > L'length then 
           0 reconvergence      1448       return SIGNED_LESS(L01, TO_SIGNED(R, L01'length));
                                1449     end function "<"
           2 if                 1464         assert NO_WARNING
                                1465           report "NUMERIC_STD.""<="": null argument detected, returning FALSE"
                                1466           severity warning;
                                1467         return false;
                                1468       end if;
                                1469       
          14 implicit_else      1463       if ((L'length < 1) or (R'length < 1)) then
                                1464         
          14 reconvergence      1469       L01 := TO_01(XL, 'X');
                                1470       R01 := TO_01(XR, 'X');
                                1471       
           2 if                 1472         assert NO_WARNING
                                1473           report "NUMERIC_STD.""<="": metavalue detected, returning FALSE"
                                1474           severity warning;
                                1475         return false;
                                1476       end if;
                                1477       
          12 implicit_else      1471       if ((L01(L01'left) = 'X') or (R01(R01'left) = 'X')) then
                                1472         
          12 reconvergence      1477       return UNSIGNED_LESS_OR_EQUAL(RESIZE(L01, SIZE), RESIZE(R01, SIZE));
                                1478     end function "<="
           2 if                 1491         assert NO_WARNING
                                1492           report "NUMERIC_STD.""<="": null argument detected, returning FALSE"
                                1493           severity warning;
                                1494         return false;
                                1495       end if;
                                1496       
          20 implicit_else      1490       if ((L'length < 1) or (R'length < 1)) then
                                1491         
          20 reconvergence      1496       L01 := TO_01(XL, 'X');
                                1497       R01 := TO_01(XR, 'X');
                                1498       
           2 if                 1499         assert NO_WARNING
                                1500           report "NUMERIC_STD.""<="": metavalue detected, returning FALSE"
                                1501           severity warning;
                                1502         return false;
                                1503       end if;
                                1504       
          18 implicit_else      1498       if ((L01(L01'left) = 'X') or (R01(R01'left) = 'X')) then
                                1499         
          18 reconvergence      1504       return SIGNED_LESS_OR_EQUAL(RESIZE(L01, SIZE), RESIZE(R01, SIZE));
                                1505     end function "<="
           1 if                 1514         assert NO_WARNING
                                1515           report "NUMERIC_STD.""<="": null argument detected, returning FALSE"
                                1516           severity warning;
                                1517         return false;
                                1518       end if;
                                1519       
          14 implicit_else      1513       if (R'length < 1) then
                                1514         
          14 reconvergence      1519       R01 := TO_01(XR, 'X');
                                1520       
           1 if                 1521         assert NO_WARNING
                                1522           report "NUMERIC_STD.""<="": metavalue detected, returning FALSE"
                                1523           severity warning;
                                1524         return false;
                                1525       end if;
                                1526       
          13 implicit_else      1520       if (R01(R01'left) = 'X') then
                                1521         
           3 if                 1526                                               return L < 0;
                                1527       end if;
                                1528       
          10 implicit_else      1526       if UNSIGNED_NUM_BITS(L) > R'length then 
          10 reconvergence      1528       return UNSIGNED_LESS_OR_EQUAL(TO_UNSIGNED(L, R01'length), R01);
                                1529     end function "<="
           1 if                 1538         assert NO_WARNING
                                1539           report "NUMERIC_STD.""<="": null argument detected, returning FALSE"
                                1540           severity warning;
                                1541         return false;
                                1542       end if;
                                1543       
          20 implicit_else      1537       if (R'length < 1) then
                                1538         
          20 reconvergence      1543       R01 := TO_01(XR, 'X');
                                1544       
           1 if                 1545         assert NO_WARNING
                                1546           report "NUMERIC_STD.""<="": metavalue detected, returning FALSE"
                                1547           severity warning;
                                1548         return false;
                                1549       end if;
                                1550       
          19 implicit_else      1544       if (R01(R01'left) = 'X') then
                                1545         
           1 if                 1550                                             return L < 0;
                                1551       end if;
                                1552       
          18 implicit_else      1550       if SIGNED_NUM_BITS(L) > R'length then 
          18 reconvergence      1552       return SIGNED_LESS_OR_EQUAL(TO_SIGNED(L, R01'length), R01);
                                1553     end function "<="
           1 if                 1562         assert NO_WARNING
                                1563           report "NUMERIC_STD.""<="": null argument detected, returning FALSE"
                                1564           severity warning;
                                1565         return false;
                                1566       end if;
                                1567       
          14 implicit_else      1561       if (L_LEFT < 0) then
                                1562         
          14 reconvergence      1567       L01 := TO_01(XL, 'X');
                                1568       
           1 if                 1569         assert NO_WARNING
                                1570           report "NUMERIC_STD.""<="": metavalue detected, returning FALSE"
                                1571           severity warning;
                                1572         return false;
                                1573       end if;
                                1574       
          13 implicit_else      1568       if (L01(L01'left) = 'X') then
                                1569         
           2 if                 1574                                               return 0 < R;
                                1575       end if;
                                1576       
          11 implicit_else      1574       if UNSIGNED_NUM_BITS(R) > L'length then 
          11 reconvergence      1576       return UNSIGNED_LESS_OR_EQUAL(L01, TO_UNSIGNED(R, L01'length));
                                1577     end function "<="
           0 if                 1586         assert NO_WARNING
                                1587           report "NUMERIC_STD.""<="": null argument detected, returning FALSE"
                                1588           severity warning;
                                1589         return false;
                                1590       end if;
                                1591       
          21 implicit_else      1585       if (L_LEFT < 0) then
                                1586         
          21 reconvergence      1591       L01 := TO_01(XL, 'X');
                                1592       
           1 if                 1593         assert NO_WARNING
                                1594           report "NUMERIC_STD.""<="": metavalue detected, returning FALSE"
                                1595           severity warning;
                                1596         return false;
                                1597       end if;
                                1598       
          20 implicit_else      1592       if (L01(L01'left) = 'X') then
                                1593         
           5 if                 1598                                             return 0 < R;
                                1599       end if;
                                1600       
          15 implicit_else      1598       if SIGNED_NUM_BITS(R) > L'length then 
          15 reconvergence      1600       return SIGNED_LESS_OR_EQUAL(L01, TO_SIGNED(R, L01'length));
                                1601     end function "<="
           2 if                 1616         assert NO_WARNING
                                1617           report "NUMERIC_STD."">="": null argument detected, returning FALSE"
                                1618           severity warning;
                                1619         return false;
                                1620       end if;
                                1621       
     2239622 implicit_else      1615       if ((L'length < 1) or (R'length < 1)) then
                                1616         
     2239622 reconvergence      1621       L01 := TO_01(XL, 'X');
                                1622       R01 := TO_01(XR, 'X');
                                1623       
           2 if                 1624         assert NO_WARNING
                                1625           report "NUMERIC_STD."">="": metavalue detected, returning FALSE"
                                1626           severity warning;
                                1627         return false;
                                1628       end if;
                                1629       
     2239620 implicit_else      1623       if ((L01(L01'left) = 'X') or (R01(R01'left) = 'X')) then
                                1624         
     2239620 reconvergence      1629       return not UNSIGNED_LESS(RESIZE(L01, SIZE), RESIZE(R01, SIZE));
                                1630     end function ">="
           2 if                 1643         assert NO_WARNING
                                1644           report "NUMERIC_STD."">="": null argument detected, returning FALSE"
                                1645           severity warning;
                                1646         return false;
                                1647       end if;
                                1648       
          20 implicit_else      1642       if ((L'length < 1) or (R'length < 1)) then
                                1643         
          20 reconvergence      1648       L01 := TO_01(XL, 'X');
                                1649       R01 := TO_01(XR, 'X');
                                1650       
           2 if                 1651         assert NO_WARNING
                                1652           report "NUMERIC_STD."">="": metavalue detected, returning FALSE"
                                1653           severity warning;
                                1654         return false;
                                1655       end if;
                                1656       
          18 implicit_else      1650       if ((L01(L01'left) = 'X') or (R01(R01'left) = 'X')) then
                                1651         
          18 reconvergence      1656       return not SIGNED_LESS(RESIZE(L01, SIZE), RESIZE(R01, SIZE));
                                1657     end function ">="
           1 if                 1666         assert NO_WARNING
                                1667           report "NUMERIC_STD."">="": null argument detected, returning FALSE"
                                1668           severity warning;
                                1669         return false;
                                1670       end if;
                                1671       
          14 implicit_else      1665       if (R'length < 1) then
                                1666         
          14 reconvergence      1671       R01 := TO_01(XR, 'X');
                                1672       
           1 if                 1673         assert NO_WARNING
                                1674           report "NUMERIC_STD."">="": metavalue detected, returning FALSE"
                                1675           severity warning;
                                1676         return false;
                                1677       end if;
                                1678       
          13 implicit_else      1672       if (R01(R01'left) = 'X') then
                                1673         
           2 if                 1678                                               return L > 0;
                                1679       end if;
                                1680       
          11 implicit_else      1678       if UNSIGNED_NUM_BITS(L) > R'length then 
          11 reconvergence      1680       return not UNSIGNED_LESS(TO_UNSIGNED(L, R01'length), R01);
                                1681     end function ">="
           0 if                 1690         assert NO_WARNING
                                1691           report "NUMERIC_STD."">="": null argument detected, returning FALSE"
                                1692           severity warning;
                                1693         return false;
                                1694       end if;
                                1695       
          21 implicit_else      1689       if (R'length < 1) then
                                1690         
          21 reconvergence      1695       R01 := TO_01(XR, 'X');
                                1696       
           1 if                 1697         assert NO_WARNING
                                1698           report "NUMERIC_STD."">="": metavalue detected, returning FALSE"
                                1699           severity warning;
                                1700         return false;
                                1701       end if;
                                1702       
          20 implicit_else      1696       if (R01(R01'left) = 'X') then
                                1697         
           5 if                 1702                                             return L > 0;
                                1703       end if;
                                1704       
          15 implicit_else      1702       if SIGNED_NUM_BITS(L) > R'length then 
          15 reconvergence      1704       return not SIGNED_LESS(TO_SIGNED(L, R01'length), R01);
                                1705     end function ">="
           1 if                 1714         assert NO_WARNING
                                1715           report "NUMERIC_STD."">="": null argument detected, returning FALSE"
                                1716           severity warning;
                                1717         return false;
                                1718       end if;
                                1719       
          14 implicit_else      1713       if (L'length < 1) then
                                1714         
          14 reconvergence      1719       L01 := TO_01(XL, 'X');
                                1720       
           1 if                 1721         assert NO_WARNING
                                1722           report "NUMERIC_STD."">="": metavalue detected, returning FALSE"
                                1723           severity warning;
                                1724         return false;
                                1725       end if;
                                1726       
          13 implicit_else      1720       if (L01(L01'left) = 'X') then
                                1721         
           3 if                 1726                                               return 0 > R;
                                1727       end if;
                                1728       
          10 implicit_else      1726       if UNSIGNED_NUM_BITS(R) > L'length then 
          10 reconvergence      1728       return not UNSIGNED_LESS(L01, TO_UNSIGNED(R, L01'length));
                                1729     end function ">="
           1 if                 1738         assert NO_WARNING
                                1739           report "NUMERIC_STD."">="": null argument detected, returning FALSE"
                                1740           severity warning;
                                1741         return false;
                                1742       end if;
                                1743       
          20 implicit_else      1737       if (L'length < 1) then
                                1738         
          20 reconvergence      1743       L01 := TO_01(XL, 'X');
                                1744       
           1 if                 1745         assert NO_WARNING
                                1746           report "NUMERIC_STD."">="": metavalue detected, returning FALSE"
                                1747           severity warning;
                                1748         return false;
                                1749       end if;
                                1750       
          19 implicit_else      1744       if (L01(L01'left) = 'X') then
                                1745         
           1 if                 1750                                             return 0 > R;
                                1751       end if;
                                1752       
          18 implicit_else      1750       if SIGNED_NUM_BITS(R) > L'length then 
          18 reconvergence      1752       return not SIGNED_LESS(L01, TO_SIGNED(R, L01'length));
                                1753     end function ">="
           0 if                 1768         assert NO_WARNING
                                1769           report "NUMERIC_STD.""="": null argument detected, returning FALSE"
                                1770           severity warning;
                                1771         return false;
                                1772       end if;
                                1773       
        1059 implicit_else      1767       if ((L'length < 1) or (R'length < 1)) then
                                1768         
        1059 reconvergence      1773       L01 := TO_01(XL, 'X');
                                1774       R01 := TO_01(XR, 'X');
                                1775       
           0 if                 1776         assert NO_WARNING
                                1777           report "NUMERIC_STD.""="": metavalue detected, returning FALSE"
                                1778           severity warning;
                                1779         return false;
                                1780       end if;
                                1781       
        1059 implicit_else      1775       if ((L01(L01'left) = 'X') or (R01(R01'left) = 'X')) then
                                1776         
        1059 reconvergence      1781       return UNSIGNED_EQUAL(RESIZE(L01, SIZE), RESIZE(R01, SIZE));
                                1782     end function "="
           0 if                 1795         assert NO_WARNING
                                1796           report "NUMERIC_STD.""="": null argument detected, returning FALSE"
                                1797           severity warning;
                                1798         return false;
                                1799       end if;
                                1800       
        1056 implicit_else      1794       if ((L'length < 1) or (R'length < 1)) then
                                1795         
        1056 reconvergence      1800       L01 := TO_01(XL, 'X');
                                1801       R01 := TO_01(XR, 'X');
                                1802       
           0 if                 1803         assert NO_WARNING
                                1804           report "NUMERIC_STD.""="": metavalue detected, returning FALSE"
                                1805           severity warning;
                                1806         return false;
                                1807       end if;
                                1808       
        1056 implicit_else      1802       if ((L01(L01'left) = 'X') or (R01(R01'left) = 'X')) then
                                1803         
        1056 reconvergence      1808       return SIGNED_EQUAL(RESIZE(L01, SIZE), RESIZE(R01, SIZE));
                                1809     end function "="
           0 if                 1818         assert NO_WARNING
                                1819           report "NUMERIC_STD.""="": null argument detected, returning FALSE"
                                1820           severity warning;
                                1821         return false;
                                1822       end if;
                                1823       
           0 implicit_else      1817       if (R'length < 1) then
                                1818         
           0 reconvergence      1823       R01 := TO_01(XR, 'X');
                                1824       
           0 if                 1825         assert NO_WARNING
                                1826           report "NUMERIC_STD.""="": metavalue detected, returning FALSE"
                                1827           severity warning;
                                1828         return false;
                                1829       end if;
                                1830       
           0 implicit_else      1824       if (R01(R01'left) = 'X') then
                                1825         
           0 if                 1830                                               return false;
                                1831       end if;
                                1832       
           0 implicit_else      1830       if UNSIGNED_NUM_BITS(L) > R'length then 
           0 reconvergence      1832       return UNSIGNED_EQUAL(TO_UNSIGNED(L, R01'length), R01);
                                1833     end function "="
           0 if                 1842         assert NO_WARNING
                                1843           report "NUMERIC_STD.""="": null argument detected, returning FALSE"
                                1844           severity warning;
                                1845         return false;
                                1846       end if;
                                1847       
           0 implicit_else      1841       if (R'length < 1) then
                                1842         
           0 reconvergence      1847       R01 := TO_01(XR, 'X');
                                1848       
           0 if                 1849         assert NO_WARNING
                                1850           report "NUMERIC_STD.""="": metavalue detected, returning FALSE"
                                1851           severity warning;
                                1852         return false;
                                1853       end if;
                                1854       
           0 implicit_else      1848       if (R01(R01'left) = 'X') then
                                1849         
           0 if                 1854                                             return false;
                                1855       end if;
                                1856       
           0 implicit_else      1854       if SIGNED_NUM_BITS(L) > R'length then 
           0 reconvergence      1856       return SIGNED_EQUAL(TO_SIGNED(L, R01'length), R01);
                                1857     end function "="
           0 if                 1866         assert NO_WARNING
                                1867           report "NUMERIC_STD.""="": null argument detected, returning FALSE"
                                1868           severity warning;
                                1869         return false;
                                1870       end if;
                                1871       
           0 implicit_else      1865       if (L'length < 1) then
                                1866         
           0 reconvergence      1871       L01 := TO_01(XL, 'X');
                                1872       
           0 if                 1873         assert NO_WARNING
                                1874           report "NUMERIC_STD.""="": metavalue detected, returning FALSE"
                                1875           severity warning;
                                1876         return false;
                                1877       end if;
                                1878       
           0 implicit_else      1872       if (L01(L01'left) = 'X') then
                                1873         
           0 if                 1878                                               return false;
                                1879       end if;
                                1880       
           0 implicit_else      1878       if UNSIGNED_NUM_BITS(R) > L'length then 
           0 reconvergence      1880       return UNSIGNED_EQUAL(L01, TO_UNSIGNED(R, L01'length));
                                1881     end function "="
           0 if                 1890         assert NO_WARNING
                                1891           report "NUMERIC_STD.""="": null argument detected, returning FALSE"
                                1892           severity warning;
                                1893         return false;
                                1894       end if;
                                1895       
           3 implicit_else      1889       if (L'length < 1) then
                                1890         
           3 reconvergence      1895       L01 := TO_01(XL, 'X');
                                1896       
           0 if                 1897         assert NO_WARNING
                                1898           report "NUMERIC_STD.""="": metavalue detected, returning FALSE"
                                1899           severity warning;
                                1900         return false;
                                1901       end if;
                                1902       
           3 implicit_else      1896       if (L01(L01'left) = 'X') then
                                1897         
           0 if                 1902                                             return false;
                                1903       end if;
                                1904       
           3 implicit_else      1902       if SIGNED_NUM_BITS(R) > L'length then 
           3 reconvergence      1904       return SIGNED_EQUAL(L01, TO_SIGNED(R, L01'length));
                                1905     end function "="
           0 if                 1920         assert NO_WARNING
                                1921           report "NUMERIC_STD.""/="": null argument detected, returning TRUE"
                                1922           severity warning;
                                1923         return true;
                                1924       end if;
                                1925       
       23040 implicit_else      1919       if ((L'length < 1) or (R'length < 1)) then
                                1920         
       23040 reconvergence      1925       L01 := TO_01(XL, 'X');
                                1926       R01 := TO_01(XR, 'X');
                                1927       
           0 if                 1928         assert NO_WARNING
                                1929           report "NUMERIC_STD.""/="": metavalue detected, returning TRUE"
                                1930           severity warning;
                                1931         return true;
                                1932       end if;
                                1933       
       23040 implicit_else      1927       if ((L01(L01'left) = 'X') or (R01(R01'left) = 'X')) then
                                1928         
       23040 reconvergence      1933       return not(UNSIGNED_EQUAL(RESIZE(L01, SIZE), RESIZE(R01, SIZE)));
                                1934     end function "/="
           0 if                 1947         assert NO_WARNING
                                1948           report "NUMERIC_STD.""/="": null argument detected, returning TRUE"
                                1949           severity warning;
                                1950         return true;
                                1951       end if;
                                1952       
           0 implicit_else      1946       if ((L'length < 1) or (R'length < 1)) then
                                1947         
           0 reconvergence      1952       L01 := TO_01(XL, 'X');
                                1953       R01 := TO_01(XR, 'X');
                                1954       
           0 if                 1955         assert NO_WARNING
                                1956           report "NUMERIC_STD.""/="": metavalue detected, returning TRUE"
                                1957           severity warning;
                                1958         return true;
                                1959       end if;
                                1960       
           0 implicit_else      1954       if ((L01(L01'left) = 'X') or (R01(R01'left) = 'X')) then
                                1955         
           0 reconvergence      1960       return not(SIGNED_EQUAL(RESIZE(L01, SIZE), RESIZE(R01, SIZE)));
                                1961     end function "/="
           0 if                 1970         assert NO_WARNING
                                1971           report "NUMERIC_STD.""/="": null argument detected, returning TRUE"
                                1972           severity warning;
                                1973         return true;
                                1974       end if;
                                1975       
           0 implicit_else      1969       if (R'length < 1) then
                                1970         
           0 reconvergence      1975       R01 := TO_01(XR, 'X');
                                1976       
           0 if                 1977         assert NO_WARNING
                                1978           report "NUMERIC_STD.""/="": metavalue detected, returning TRUE"
                                1979           severity warning;
                                1980         return true;
                                1981       end if;
                                1982       
           0 implicit_else      1976       if (R01(R01'left) = 'X') then
                                1977         
           0 if                 1982                                               return true;
                                1983       end if;
                                1984       
           0 implicit_else      1982       if UNSIGNED_NUM_BITS(L) > R'length then 
           0 reconvergence      1984       return not(UNSIGNED_EQUAL(TO_UNSIGNED(L, R01'length), R01));
                                1985     end function "/="
           0 if                 1994         assert NO_WARNING
                                1995           report "NUMERIC_STD.""/="": null argument detected, returning TRUE"
                                1996           severity warning;
                                1997         return true;
                                1998       end if;
                                1999       
           0 implicit_else      1993       if (R'length < 1) then
                                1994         
           0 reconvergence      1999       R01 := TO_01(XR, 'X');
                                2000       
           0 if                 2001         assert NO_WARNING
                                2002           report "NUMERIC_STD.""/="": metavalue detected, returning TRUE"
                                2003           severity warning;
                                2004         return true;
                                2005       end if;
                                2006       
           0 implicit_else      2000       if (R01(R01'left) = 'X') then
                                2001         
           0 if                 2006                                             return true;
                                2007       end if;
                                2008       
           0 implicit_else      2006       if SIGNED_NUM_BITS(L) > R'length then 
           0 reconvergence      2008       return not(SIGNED_EQUAL(TO_SIGNED(L, R01'length), R01));
                                2009     end function "/="
           0 if                 2018         assert NO_WARNING
                                2019           report "NUMERIC_STD.""/="": null argument detected, returning TRUE"
                                2020           severity warning;
                                2021         return true;
                                2022       end if;
                                2023       
           0 implicit_else      2017       if (L'length < 1) then
                                2018         
           0 reconvergence      2023       L01 := TO_01(XL, 'X');
                                2024       
           0 if                 2025         assert NO_WARNING
                                2026           report "NUMERIC_STD.""/="": metavalue detected, returning TRUE"
                                2027           severity warning;
                                2028         return true;
                                2029       end if;
                                2030       
           0 implicit_else      2024       if (L01(L01'left) = 'X') then
                                2025         
           0 if                 2030                                               return true;
                                2031       end if;
                                2032       
           0 implicit_else      2030       if UNSIGNED_NUM_BITS(R) > L'length then 
           0 reconvergence      2032       return not(UNSIGNED_EQUAL(L01, TO_UNSIGNED(R, L01'length)));
                                2033     end function "/="
           0 if                 2042         assert NO_WARNING
                                2043           report "NUMERIC_STD.""/="": null argument detected, returning TRUE"
                                2044           severity warning;
                                2045         return true;
                                2046       end if;
                                2047       
           0 implicit_else      2041       if (L'length < 1) then
                                2042         
           0 reconvergence      2047       L01 := TO_01(XL, 'X');
                                2048       
           0 if                 2049         assert NO_WARNING
                                2050           report "NUMERIC_STD.""/="": metavalue detected, returning TRUE"
                                2051           severity warning;
                                2052         return true;
                                2053       end if;
                                2054       
           0 implicit_else      2048       if (L01(L01'left) = 'X') then
                                2049         
           0 if                 2054                                             return true;
                                2055       end if;
                                2056       
           0 implicit_else      2054       if SIGNED_NUM_BITS(R) > L'length then 
           0 reconvergence      2056       return not(SIGNED_EQUAL(L01, TO_SIGNED(R, L01'length)));
                                2057     end function "/="
           0 if                 2067                                                  return NAU;
                                2068       end if;
                                2069       
           0 implicit_else      2067       if ((L'length < 1) or (R'length < 1)) then 
           0 reconvergence      2069       L01 := TO_01(RESIZE(L, SIZE), 'X');
                                2070       
           0 if                 2070                                     return L01;
                                2071       end if;
                                2072       
           0 implicit_else      2070       if (L01(L01'left) = 'X') then 
           0 reconvergence      2072       R01 := TO_01(RESIZE(R, SIZE), 'X');
                                2073       
           0 if                 2073                                     return R01;
                                2074       end if;
                                2075       
           0 implicit_else      2073       if (R01(R01'left) = 'X') then 
           0 reconvergence      2075       if UNSIGNED_LESS(L01, R01) then
                                2076         
           0 if                 2076         return L01;
                                2077       else
                                2078         
           0 else               2078         return R01;
                                2079       end if;
                                2080     end function MINIMUM
           0 if                 2088                                                  return NAS;
                                2089       end if;
                                2090       
           0 implicit_else      2088       if ((L'length < 1) or (R'length < 1)) then 
           0 reconvergence      2090       L01 := TO_01(RESIZE(L, SIZE), 'X');
                                2091       
           0 if                 2091                                     return L01;
                                2092       end if;
                                2093       
           0 implicit_else      2091       if (L01(L01'left) = 'X') then 
           0 reconvergence      2093       R01 := TO_01(RESIZE(R, SIZE), 'X');
                                2094       
           0 if                 2094                                     return R01;
                                2095       end if;
                                2096       
           0 implicit_else      2094       if (R01(R01'left) = 'X') then 
           0 reconvergence      2096       if SIGNED_LESS(L01, R01) then
                                2097         
           0 if                 2097         return L01;
                                2098       else
                                2099         
           0 else               2099         return R01;
                                2100       end if;
                                2101     end function MINIMUM
           0 sequence           2107       return MINIMUM(TO_UNSIGNED(L, R'length), R);
                                2108     end function MINIMUM
           0 sequence           2114       return MINIMUM(TO_SIGNED(L, R'length), R);
                                2115     end function MINIMUM
           0 sequence           2121       return MINIMUM(L, TO_UNSIGNED(R, L'length));
                                2122     end function MINIMUM
           0 sequence           2128       return MINIMUM(L, TO_SIGNED(R, L'length));
                                2129     end function MINIMUM
           0 if                 2139                                                  return NAU;
                                2140       end if;
                                2141       
           0 implicit_else      2139       if ((L'length < 1) or (R'length < 1)) then 
           0 reconvergence      2141       L01 := TO_01(RESIZE(L, SIZE), 'X');
                                2142       
           0 if                 2142                                     return L01;
                                2143       end if;
                                2144       
           0 implicit_else      2142       if (L01(L01'left) = 'X') then 
           0 reconvergence      2144       R01 := TO_01(RESIZE(R, SIZE), 'X');
                                2145       
           0 if                 2145                                     return R01;
                                2146       end if;
                                2147       
           0 implicit_else      2145       if (R01(R01'left) = 'X') then 
           0 reconvergence      2147       if UNSIGNED_LESS(L01, R01) then
                                2148         
           0 if                 2148         return R01;
                                2149       else
                                2150         
           0 else               2150         return L01;
                                2151       end if;
                                2152     end function MAXIMUM
           0 if                 2160                                                  return NAS;
                                2161       end if;
                                2162       
           0 implicit_else      2160       if ((L'length < 1) or (R'length < 1)) then 
           0 reconvergence      2162       L01 := TO_01(RESIZE(L, SIZE), 'X');
                                2163       
           0 if                 2163                                     return L01;
                                2164       end if;
                                2165       
           0 implicit_else      2163       if (L01(L01'left) = 'X') then 
           0 reconvergence      2165       R01 := TO_01(RESIZE(R, SIZE), 'X');
                                2166       
           0 if                 2166                                     return R01;
                                2167       end if;
                                2168       
           0 implicit_else      2166       if (R01(R01'left) = 'X') then 
           0 reconvergence      2168       if SIGNED_LESS(L01, R01) then
                                2169         
           0 if                 2169         return R01;
                                2170       else
                                2171         
           0 else               2171         return L01;
                                2172       end if;
                                2173     end function MAXIMUM
           0 sequence           2179       return MAXIMUM(TO_UNSIGNED(L, R'length), R);
                                2180     end function MAXIMUM
           0 sequence           2186       return MAXIMUM(TO_SIGNED(L, R'length), R);
                                2187     end function MAXIMUM
           0 sequence           2193       return MAXIMUM(L, TO_UNSIGNED(R, L'length));
                                2194     end function MAXIMUM
           0 sequence           2200       return MAXIMUM(L, TO_SIGNED(R, L'length));
                                2201     end function MAXIMUM
           0 sequence           2208       if ((L'length < 1) or (R'length < 1)) then
                                2209         
           0 if                 2209         assert NO_WARNING
                                2210           report "NUMERIC_STD.""?>"": null detected, returning X"
                                2211           severity warning;
                                2212         return 'X';
                                2213       else
                                2214         
           0 else               2214         for i in L'range loop
                                2215           
           0 reconvergence      2221         for i in R'range loop
                                2222           
           0 if                 2216             report "NUMERIC_STD.""?>"": '-' found in compare string"
                                2217               severity error;
                                2218             return 'X';
                                2219           end if;
                                2220         end loop;
                                2221         
           0 else               2215           if L(i) = '-' then
                                2216             
           0 if                 2223             report "NUMERIC_STD.""?>"": '-' found in compare string"
                                2224               severity error;
                                2225             return 'X';
                                2226           end if;
                                2227         end loop;
                                2228         
           0 implicit_else      2222           if R(i) = '-' then
                                2223             
           0 reconvergence      2228         if IS_X(L) or IS_X(R) then
                                2229           
           0 if                 2229           return 'X';
                                2230         elsif L 
           0 sequence           2230                 > R then
                                2231           
           0 elsif              2231           return '1';
                                2232         else
                                2233           
           0 else               2233           return '0';
                                2234         end if;
                                2235       end if;
                                2236     end function "?>"
           0 sequence           2241       if ((L'length < 1) or (R'length < 1)) then
                                2242         
           0 if                 2242         assert NO_WARNING
                                2243           report "NUMERIC_STD.""?>"": null detected, returning X"
                                2244           severity warning;
                                2245         return 'X';
                                2246       else
                                2247         
           0 else               2247         for i in L'range loop
                                2248           
           0 reconvergence      2254         for i in R'range loop
                                2255           
           0 if                 2249             report "NUMERIC_STD.""?>"": '-' found in compare string"
                                2250               severity error;
                                2251             return 'X';
                                2252           end if;
                                2253         end loop;
                                2254         
           0 else               2248           if L(i) = '-' then
                                2249             
           0 if                 2256             report "NUMERIC_STD.""?>"": '-' found in compare string"
                                2257               severity error;
                                2258             return 'X';
                                2259           end if;
                                2260         end loop;
                                2261         
           0 implicit_else      2255           if R(i) = '-' then
                                2256             
           0 reconvergence      2261         if IS_X(L) or IS_X(R) then
                                2262           
           0 if                 2262           return 'X';
                                2263         elsif L 
           0 sequence           2263                 > R then
                                2264           
           0 elsif              2264           return '1';
                                2265         else
                                2266           
           0 else               2266           return '0';
                                2267         end if;
                                2268       end if;
                                2269     end function "?>"
           0 sequence           2274       return TO_UNSIGNED(L, R'length) ?> R;
                                2275     end function "?>"
           0 sequence           2280       return TO_SIGNED(L, R'length) ?> R;
                                2281     end function "?>"
           0 sequence           2286       return L ?> TO_UNSIGNED(R, L'length);
                                2287     end function "?>"
           0 sequence           2292       return L ?> TO_SIGNED(R, L'length);
                                2293     end function "?>"
           0 sequence           2300       if ((L'length < 1) or (R'length < 1)) then
                                2301         
           0 if                 2301         assert NO_WARNING
                                2302           report "NUMERIC_STD.""?<"": null detected, returning X"
                                2303           severity warning;
                                2304         return 'X';
                                2305       else
                                2306         
           0 else               2306         for i in L'range loop
                                2307           
           0 reconvergence      2313         for i in R'range loop
                                2314           
           0 if                 2308             report "NUMERIC_STD.""?<"": '-' found in compare string"
                                2309               severity error;
                                2310             return 'X';
                                2311           end if;
                                2312         end loop;
                                2313         
           0 else               2307           if L(i) = '-' then
                                2308             
           0 if                 2315             report "NUMERIC_STD.""?<"": '-' found in compare string"
                                2316               severity error;
                                2317             return 'X';
                                2318           end if;
                                2319         end loop;
                                2320         
           0 implicit_else      2314           if R(i) = '-' then
                                2315             
           0 reconvergence      2320         if IS_X(L) or IS_X(R) then
                                2321           
           0 if                 2321           return 'X';
                                2322         elsif L 
           0 sequence           2322                 < R then
                                2323           
           0 elsif              2323           return '1';
                                2324         else
                                2325           
           0 else               2325           return '0';
                                2326         end if;
                                2327       end if;
                                2328     end function "?<"
           0 sequence           2333       if ((L'length < 1) or (R'length < 1)) then
                                2334         
           0 if                 2334         assert NO_WARNING
                                2335           report "NUMERIC_STD.""?<"": null detected, returning X"
                                2336           severity warning;
                                2337         return 'X';
                                2338       else
                                2339         
           0 else               2339         for i in L'range loop
                                2340           
           0 reconvergence      2346         for i in R'range loop
                                2347           
           0 if                 2341             report "NUMERIC_STD.""?<"": '-' found in compare string"
                                2342               severity error;
                                2343             return 'X';
                                2344           end if;
                                2345         end loop;
                                2346         
           0 else               2340           if L(i) = '-' then
                                2341             
           0 if                 2348             report "NUMERIC_STD.""?<"": '-' found in compare string"
                                2349               severity error;
                                2350             return 'X';
                                2351           end if;
                                2352         end loop;
                                2353         
           0 implicit_else      2347           if R(i) = '-' then
                                2348             
           0 reconvergence      2353         if IS_X(L) or IS_X(R) then
                                2354           
           0 if                 2354           return 'X';
                                2355         elsif L 
           0 sequence           2355                 < R then
                                2356           
           0 elsif              2356           return '1';
                                2357         else
                                2358           
           0 else               2358           return '0';
                                2359         end if;
                                2360       end if;
                                2361     end function "?<"
           0 sequence           2366       return TO_UNSIGNED(L, R'length) ?< R;
                                2367     end function "?<"
           0 sequence           2372       return TO_SIGNED(L, R'length) ?< R;
                                2373     end function "?<"
           0 sequence           2378       return L ?< TO_UNSIGNED(R, L'length);
                                2379     end function "?<"
           0 sequence           2384       return L ?< TO_SIGNED(R, L'length);
                                2385     end function "?<"
           0 sequence           2392       if ((L'length < 1) or (R'length < 1)) then
                                2393         
           0 if                 2393         assert NO_WARNING
                                2394           report "NUMERIC_STD.""?<="": null detected, returning X"
                                2395           severity warning;
                                2396         return 'X';
                                2397       else
                                2398         
           0 else               2398         for i in L'range loop
                                2399           
           0 reconvergence      2405         for i in R'range loop
                                2406           
           0 if                 2400             report "NUMERIC_STD.""?<="": '-' found in compare string"
                                2401               severity error;
                                2402             return 'X';
                                2403           end if;
                                2404         end loop;
                                2405         
           0 else               2399           if L(i) = '-' then
                                2400             
           0 if                 2407             report "NUMERIC_STD.""?<="": '-' found in compare string"
                                2408               severity error;
                                2409             return 'X';
                                2410           end if;
                                2411         end loop;
                                2412         
           0 implicit_else      2406           if R(i) = '-' then
                                2407             
           0 reconvergence      2412         if IS_X(L) or IS_X(R) then
                                2413           
           0 if                 2413           return 'X';
                                2414         elsif L 
           0 sequence           2414                 <= R then
                                2415           
           0 elsif              2415           return '1';
                                2416         else
                                2417           
           0 else               2417           return '0';
                                2418         end if;
                                2419       end if;
                                2420     end function "?<="
           0 sequence           2425       if ((L'length < 1) or (R'length < 1)) then
                                2426         
           0 if                 2426         assert NO_WARNING
                                2427           report "NUMERIC_STD.""?<="": null detected, returning X"
                                2428           severity warning;
                                2429         return 'X';
                                2430       else
                                2431         
           0 else               2431         for i in L'range loop
                                2432           
           0 reconvergence      2438         for i in R'range loop
                                2439           
           0 if                 2433             report "NUMERIC_STD.""?<="": '-' found in compare string"
                                2434               severity error;
                                2435             return 'X';
                                2436           end if;
                                2437         end loop;
                                2438         
           0 else               2432           if L(i) = '-' then
                                2433             
           0 if                 2440             report "NUMERIC_STD.""?<="": '-' found in compare string"
                                2441               severity error;
                                2442             return 'X';
                                2443           end if;
                                2444         end loop;
                                2445         
           0 implicit_else      2439           if R(i) = '-' then
                                2440             
           0 reconvergence      2445         if IS_X(L) or IS_X(R) then
                                2446           
           0 if                 2446           return 'X';
                                2447         elsif L 
           0 sequence           2447                 <= R then
                                2448           
           0 elsif              2448           return '1';
                                2449         else
                                2450           
           0 else               2450           return '0';
                                2451         end if;
                                2452       end if;
                                2453     end function "?<="
           0 sequence           2458       return TO_UNSIGNED(L, R'length) ?<= R;
                                2459     end function "?<="
           0 sequence           2464       return TO_SIGNED(L, R'length) ?<= R;
                                2465     end function "?<="
           0 sequence           2470       return L ?<= TO_UNSIGNED(R, L'length);
                                2471     end function "?<="
           0 sequence           2476       return L ?<= TO_SIGNED(R, L'length);
                                2477     end function "?<="
           0 sequence           2484       if ((L'length < 1) or (R'length < 1)) then
                                2485         
           0 if                 2485         assert NO_WARNING
                                2486           report "NUMERIC_STD.""?>="": null detected, returning X"
                                2487           severity warning;
                                2488         return 'X';
                                2489       else
                                2490         
           0 else               2490         for i in L'range loop
                                2491           
           0 reconvergence      2497         for i in R'range loop
                                2498           
           0 if                 2492             report "NUMERIC_STD.""?>="": '-' found in compare string"
                                2493               severity error;
                                2494             return 'X';
                                2495           end if;
                                2496         end loop;
                                2497         
           0 else               2491           if L(i) = '-' then
                                2492             
           0 if                 2499             report "NUMERIC_STD.""?>="": '-' found in compare string"
                                2500               severity error;
                                2501             return 'X';
                                2502           end if;
                                2503         end loop;
                                2504         
           0 implicit_else      2498           if R(i) = '-' then
                                2499             
           0 reconvergence      2504         if IS_X(L) or IS_X(R) then
                                2505           
           0 if                 2505           return 'X';
                                2506         elsif L 
           0 sequence           2506                 >= R then
                                2507           
           0 elsif              2507           return '1';
                                2508         else
                                2509           
           0 else               2509           return '0';
                                2510         end if;
                                2511       end if;
                                2512     end function "?>="
           0 sequence           2517       if ((L'length < 1) or (R'length < 1)) then
                                2518         
           0 if                 2518         assert NO_WARNING
                                2519           report "NUMERIC_STD.""?>="": null detected, returning X"
                                2520           severity warning;
                                2521         return 'X';
                                2522       else
                                2523         
           0 else               2523         for i in L'range loop
                                2524           
           0 reconvergence      2530         for i in R'range loop
                                2531           
           0 if                 2525             report "NUMERIC_STD.""?>="": '-' found in compare string"
                                2526               severity error;
                                2527             return 'X';
                                2528           end if;
                                2529         end loop;
                                2530         
           0 else               2524           if L(i) = '-' then
                                2525             
           0 if                 2532             report "NUMERIC_STD.""?>="": '-' found in compare string"
                                2533               severity error;
                                2534             return 'X';
                                2535           end if;
                                2536         end loop;
                                2537         
           0 implicit_else      2531           if R(i) = '-' then
                                2532             
           0 reconvergence      2537         if IS_X(L) or IS_X(R) then
                                2538           
           0 if                 2538           return 'X';
                                2539         elsif L 
           0 sequence           2539                 >= R then
                                2540           
           0 elsif              2540           return '1';
                                2541         else
                                2542           
           0 else               2542           return '0';
                                2543         end if;
                                2544       end if;
                                2545     end function "?>="
           0 sequence           2550       return TO_UNSIGNED(L, R'length) ?>= R;
                                2551     end function "?>="
           0 sequence           2556       return TO_SIGNED(L, R'length) ?>= R;
                                2557     end function "?>="
           0 sequence           2562       return L ?>= TO_UNSIGNED(R, L'length);
                                2563     end function "?>="
           0 sequence           2568       return L ?>= TO_SIGNED(R, L'length);
                                2569     end function "?>="
           0 sequence           2585       if ((L'length < 1) or (R'length < 1)) then
                                2586         
           0 if                 2586         assert NO_WARNING
                                2587           report "NUMERIC_STD.""?="": null detected, returning X"
                                2588           severity warning;
                                2589         return 'X';
                                2590       else
                                2591         
           0 else               2591         LX     := RESIZE(XL, SIZE);
                                2592         RX     := RESIZE(XR, SIZE);
                                2593         result := '1';
                                2594         for i in LX'low to LX'high loop
                                2595           
           0 loop_body          2595           result1 := LX(i) ?= RX(i);
                                2596           if result1 = 'U' then
                                2597             
           0 reconvergence      2604         return result;
                                2605       end if;
                                2606     end function "?="
           0 if                 2597             return 'U';
                                2598           elsif 
           0 sequence           2598                 result1 = 'X' or result = 'X' then
                                2599             
           0 elsif              2599             result := 'X';
                                2600           else
                                2601             
           0 else               2601             result := result and result1;
                                2602           end if;
                                2603         end loop;
                                2604         
           0 sequence           2619       if ((L'length < 1) or (R'length < 1)) then
                                2620         
           0 if                 2620         assert NO_WARNING
                                2621           report "NUMERIC_STD.""?="": null detected, returning X"
                                2622           severity warning;
                                2623         return 'X';
                                2624       else
                                2625         
           0 else               2625         LX     := RESIZE(XL, SIZE);
                                2626         RX     := RESIZE(XR, SIZE);
                                2627         result := '1';
                                2628         for i in LX'low to LX'high loop
                                2629           
           0 loop_body          2629           result1 := LX(i) ?= RX(i);
                                2630           if result1 = 'U' then
                                2631             
           0 reconvergence      2638         return result;
                                2639       end if;
                                2640     end function "?="
           0 if                 2631             return 'U';
                                2632           elsif 
           0 sequence           2632                 result1 = 'X' or result = 'X' then
                                2633             
           0 elsif              2633             result := 'X';
                                2634           else
                                2635             
           0 else               2635             result := result and result1;
                                2636           end if;
                                2637         end loop;
                                2638         
           0 sequence           2645       return TO_UNSIGNED(L, R'length) ?= R;
                                2646     end function "?="
           0 sequence           2651       return TO_SIGNED(L, R'length) ?= R;
                                2652     end function "?="
           0 sequence           2657       return L ?= TO_UNSIGNED(R, L'length);
                                2658     end function "?="
           0 sequence           2663       return L ?= TO_SIGNED(R, L'length);
                                2664     end function "?="
           0 sequence           2679       if ((L'length < 1) or (R'length < 1)) then
                                2680         
           0 if                 2680         assert NO_WARNING
                                2681           report "NUMERIC_STD.""?/="": null detected, returning X"
                                2682           severity warning;
                                2683         return 'X';
                                2684       else
                                2685         
           0 else               2685         LX     := RESIZE(XL, SIZE);
                                2686         RX     := RESIZE(XR, SIZE);
                                2687         result := '0';
                                2688         for i in LX'low to LX'high loop
                                2689           
           0 loop_body          2689           result1 := LX(i) ?/= RX(i);
                                2690           if result1 = 'U' then
                                2691             
           0 reconvergence      2698         return result;
                                2699       end if;
                                2700     end function "?/="
           0 if                 2691             return 'U';
                                2692           elsif 
           0 sequence           2692                 result1 = 'X' or result = 'X' then
                                2693             
           0 elsif              2693             result := 'X';
                                2694           else
                                2695             
           0 else               2695             result := result or result1;
                                2696           end if;
                                2697         end loop;
                                2698         
           0 sequence           2713       if ((L'length < 1) or (R'length < 1)) then
                                2714         
           0 if                 2714         assert NO_WARNING
                                2715           report "NUMERIC_STD.""?/="": null detected, returning X"
                                2716           severity warning;
                                2717         return 'X';
                                2718       else
                                2719         
           0 else               2719         LX     := RESIZE(XL, SIZE);
                                2720         RX     := RESIZE(XR, SIZE);
                                2721         result := '0';
                                2722         for i in LX'low to LX'high loop
                                2723           
           0 loop_body          2723           result1 := LX(i) ?/= RX(i);
                                2724           if result1 = 'U' then
                                2725             
           0 reconvergence      2732         return result;
                                2733       end if;
                                2734     end function "?/="
           0 if                 2725             return 'U';
                                2726           elsif 
           0 sequence           2726                 result1 = 'X' or result = 'X' then
                                2727             
           0 elsif              2727             result := 'X';
                                2728           else
                                2729             
           0 else               2729             result := result or result1;
                                2730           end if;
                                2731         end loop;
                                2732         
           0 sequence           2739       return TO_UNSIGNED(L, R'length) ?/= R;
                                2740     end function "?/="
           0 sequence           2745       return TO_SIGNED(L, R'length) ?/= R;
                                2746     end function "?/="
           0 sequence           2751       return L ?/= TO_UNSIGNED(R, L'length);
                                2752     end function "?/="
           0 sequence           2757       return L ?/= TO_SIGNED(R, L'length);
                                2758     end function "?/="
           0 if                 2766                                return NAU;
                                2767       end if;
                                2768       
       12288 implicit_else      2766       if (ARG'length < 1) then 
       12288 reconvergence      2768       return UNRESOLVED_UNSIGNED(XSLL(STD_ULOGIC_VECTOR(ARG), COUNT));
                                2769     end function SHIFT_LEFT
           0 if                 2775                                return NAU;
                                2776       end if;
                                2777       
           0 implicit_else      2775       if (ARG'length < 1) then 
           0 reconvergence      2777       return UNRESOLVED_UNSIGNED(XSRL(STD_ULOGIC_VECTOR(ARG), COUNT));
                                2778     end function SHIFT_RIGHT
           0 if                 2784                                return NAS;
                                2785       end if;
                                2786       
        9728 implicit_else      2784       if (ARG'length < 1) then 
        9728 reconvergence      2786       return UNRESOLVED_SIGNED(XSLL(STD_ULOGIC_VECTOR(ARG), COUNT));
                                2787     end function SHIFT_LEFT
           0 if                 2793                                return NAS;
                                2794       end if;
                                2795       
           0 implicit_else      2793       if (ARG'length < 1) then 
           0 reconvergence      2795       return UNRESOLVED_SIGNED(XSRA(STD_ULOGIC_VECTOR(ARG), COUNT));
                                2796     end function SHIFT_RIGHT
           0 if                 2804                                return NAU;
                                2805       end if;
                                2806       
           0 implicit_else      2804       if (ARG'length < 1) then 
           0 reconvergence      2806       return UNRESOLVED_UNSIGNED(XROL(STD_ULOGIC_VECTOR(ARG), COUNT));
                                2807     end function ROTATE_LEFT
           0 if                 2813                                return NAU;
                                2814       end if;
                                2815       
           0 implicit_else      2813       if (ARG'length < 1) then 
           0 reconvergence      2815       return UNRESOLVED_UNSIGNED(XROR(STD_ULOGIC_VECTOR(ARG), COUNT));
                                2816     end function ROTATE_RIGHT
           0 if                 2823                                return NAS;
                                2824       end if;
                                2825       
           0 implicit_else      2823       if (ARG'length < 1) then 
           0 reconvergence      2825       return UNRESOLVED_SIGNED(XROL(STD_ULOGIC_VECTOR(ARG), COUNT));
                                2826     end function ROTATE_LEFT
           0 if                 2832                                return NAS;
                                2833       end if;
                                2834       
           0 implicit_else      2832       if (ARG'length < 1) then 
           0 reconvergence      2834       return UNRESOLVED_SIGNED(XROR(STD_ULOGIC_VECTOR(ARG), COUNT));
                                2835     end function ROTATE_RIGHT
           0 sequence           2847       if (COUNT >= 0) then
                                2848         
           0 if                 2848         return SHIFT_LEFT(ARG, COUNT);
                                2849       else
                                2850         
           0 else               2850         return SHIFT_RIGHT(ARG, -COUNT);
                                2851       end if;
                                2852     end function "sll"
           0 sequence           2862       if (COUNT >= 0) then
                                2863         
           0 if                 2863         return SHIFT_LEFT(ARG, COUNT);
                                2864       else
                                2865         
           0 else               2865         return UNRESOLVED_SIGNED(SHIFT_RIGHT(UNRESOLVED_UNSIGNED(ARG), -COUNT));
                                2866       end if;
                                2867     end function "sll"
           0 sequence           2877       if (COUNT >= 0) then
                                2878         
           0 if                 2878         return SHIFT_RIGHT(ARG, COUNT);
                                2879       else
                                2880         
           0 else               2880         return SHIFT_LEFT(ARG, -COUNT);
                                2881       end if;
                                2882     end function "srl"
           0 sequence           2892       if (COUNT >= 0) then
                                2893         
           0 if                 2893         return UNRESOLVED_SIGNED(SHIFT_RIGHT(UNRESOLVED_UNSIGNED(ARG), COUNT));
                                2894       else
                                2895         
           0 else               2895         return SHIFT_LEFT(ARG, -COUNT);
                                2896       end if;
                                2897     end function "srl"
           0 sequence           2907       if (COUNT >= 0) then
                                2908         
           0 if                 2908         return ROTATE_LEFT(ARG, COUNT);
                                2909       else
                                2910         
           0 else               2910         return ROTATE_RIGHT(ARG, -COUNT);
                                2911       end if;
                                2912     end function "rol"
           0 sequence           2922       if (COUNT >= 0) then
                                2923         
           0 if                 2923         return ROTATE_LEFT(ARG, COUNT);
                                2924       else
                                2925         
           0 else               2925         return ROTATE_RIGHT(ARG, -COUNT);
                                2926       end if;
                                2927     end function "rol"
           0 sequence           2937       if (COUNT >= 0) then
                                2938         
           0 if                 2938         return ROTATE_RIGHT(ARG, COUNT);
                                2939       else
                                2940         
           0 else               2940         return ROTATE_LEFT(ARG, -COUNT);
                                2941       end if;
                                2942     end function "ror"
           0 sequence           2952       if (COUNT >= 0) then
                                2953         
           0 if                 2953         return ROTATE_RIGHT(ARG, COUNT);
                                2954       else
                                2955         
           0 else               2955         return ROTATE_LEFT(ARG, -COUNT);
                                2956       end if;
                                2957     end function "ror"
           0 sequence           2967       if (COUNT >= 0) then
                                2968         
           0 if                 2968         return SHIFT_LEFT(ARG, COUNT);
                                2969       else
                                2970         
           0 else               2970         return SHIFT_RIGHT(ARG, -COUNT);
                                2971       end if;
                                2972     end function "sla"
           0 sequence           2982       if (COUNT >= 0) then
                                2983         
           0 if                 2983         return SHIFT_LEFT(ARG, COUNT);
                                2984       else
                                2985         
           0 else               2985         return SHIFT_RIGHT(ARG, -COUNT);
                                2986       end if;
                                2987     end function "sla"
           0 sequence           2997       if (COUNT >= 0) then
                                2998         
           0 if                 2998         return SHIFT_RIGHT(ARG, COUNT);
                                2999       else
                                3000         
           0 else               3000         return SHIFT_LEFT(ARG, -COUNT);
                                3001       end if;
                                3002     end function "sra"
           0 sequence           3012       if (COUNT >= 0) then
                                3013         
           0 if                 3013         return SHIFT_RIGHT(ARG, COUNT);
                                3014       else
                                3015         
           0 else               3015         return SHIFT_LEFT(ARG, -COUNT);
                                3016       end if;
                                3017     end function "sra"
           3 if                 3149                              return NAS;
                                3150       end if;
                                3151       
      387560 implicit_else      3149       if (NEW_SIZE < 1) then 
           2 if                 3151                                return RESULT;
                                3152       end if;
                                3153       
      387558 implicit_else      3151       if (ARG'length = 0) then 
      387558 reconvergence      3153       RESULT := (others => ARG(ARG'left));
                                3154       
      387539 if                 3155         RESULT(BOUND downto 0) := INVEC(BOUND downto 0);
                                3156       end if;
                                3157       
          19 implicit_else      3154       if BOUND >= 0 then
                                3155         
      387558 reconvergence      3157       return RESULT;
                                3158     end function RESIZE
           3 if                 3169                              return NAU;
                                3170       end if;
                                3171       
     7350946 implicit_else      3169       if (NEW_SIZE < 1) then 
           2 if                 3171                               return RESULT;
                                3172       end if;
                                3173       
     7350944 implicit_else      3171       if XARG'length = 0 then 
     7350944 reconvergence      3173       if (RESULT'length < ARG'length) then
                                3174         
      276496 if                 3174         RESULT(RESULT'left downto 0) := XARG(RESULT'left downto 0);
                                3175       else
                                3176         
     7074448 else               3176         RESULT(RESULT'left downto XARG'left+1) := (others => '0');
                                3177         RESULT(XARG'left downto 0)             := XARG;
                                3178       end if;
                                3179       
     7350944 reconvergence      3179       return RESULT;
                                3180     end function RESIZE
           0 sequence           3185       return RESIZE (ARG      => ARG,
                                3186                      NEW_SIZE => SIZE_RES'length);
                                3187     end function RESIZE
           0 sequence           3192       return RESIZE (ARG      => ARG,
                                3193                      NEW_SIZE => SIZE_RES'length);
                                3194     end function RESIZE
           0 if                 3029         assert NO_WARNING
                                3030           report "NUMERIC_STD.TO_INTEGER: null detected, returning 0"
                                3031           severity warning;
                                3032         return 0;
                                3033       end if;
                                3034       
      279584 implicit_else      3028       if (ARG'length < 1) then
                                3029         
      279584 reconvergence      3034       XARG := TO_01(XXARG, 'X');
                                3035       
           0 if                 3036         assert NO_WARNING
                                3037           report "NUMERIC_STD.TO_INTEGER: metavalue detected, returning 0"
                                3038           severity warning;
                                3039         return 0;
                                3040       end if;
                                3041       
      279584 implicit_else      3035       if (XARG(XARG'left) = 'X') then
                                3036         
      279584 reconvergence      3041       for I in XARG'range loop
                                3042         
     2701440 loop_body          3042         RESULT := RESULT+RESULT;
                                3043         
      279584 reconvergence      3047       return RESULT;
                                3048     end function TO_INTEGER
      509505 if                 3044           RESULT := RESULT + 1;
                                3045         end if;
                                3046       end loop;
                                3047       
     2191935 else               3043         if XARG(I) = '1' then
                                3044           
           0 if                 3055         assert NO_WARNING
                                3056           report "NUMERIC_STD.TO_INTEGER: null detected, returning 0"
                                3057           severity warning;
                                3058         return 0;
                                3059       end if;
                                3060       
      139792 implicit_else      3054       if (ARG'length < 1) then
                                3055         
      139792 reconvergence      3060       XARG := TO_01(ARG, 'X');
                                3061       
           0 if                 3062         assert NO_WARNING
                                3063           report "NUMERIC_STD.TO_INTEGER: metavalue detected, returning 0"
                                3064           severity warning;
                                3065         return 0;
                                3066       end if;
                                3067       
      139792 implicit_else      3061       if (XARG(XARG'left) = 'X') then
                                3062         
      139792 reconvergence      3067       if XARG(XARG'left) = '0' then
                                3068         
       85100 if                 3068         return TO_INTEGER(UNRESOLVED_UNSIGNED(XARG));
                                3069       else
                                3070         
       54692 else               3070         return (- (TO_INTEGER(UNRESOLVED_UNSIGNED(- (XARG + 1)))) -1);
                                3071       end if;
                                3072     end function TO_INTEGER
           0 if                 3079                          return NAU;
                                3080       end if;
                                3081       
      142983 implicit_else      3079       if (SIZE < 1) then 
      142983 reconvergence      3081       for I in 0 to RESULT'left loop
                                3082         
     1143688 loop_body          3082         if (I_VAL mod 2) = 0 then
                                3083           
     1143688 reconvergence      3086         I_VAL          := I_VAL/2;
                                3087       end loop;
                                3088       
      697786 if                 3083           RESULT(I) := '0';
                                3084         else 
      445902 else               3084              RESULT(I) := '1';
                                3085         end if;
                                3086         
           0 if                 3089         assert NO_WARNING
                                3090           report "NUMERIC_STD.TO_UNSIGNED: vector truncated"
                                3091           severity warning;
                                3092       end if;
                                3093       
      142983 implicit_else      3088       if not(I_VAL = 0) then
                                3089         
      142983 reconvergence      3093       return RESULT;
                                3094     end function TO_UNSIGNED
      197693 sequence           3102       if (SIZE < 1) then 
           0 if                 3102                          return NAS;
                                3103       end if;
                                3104       
       74568 if                 3105         B_VAL := '1';
                                3106         I_VAL := -(ARG+1);
                                3107       end if;
                                3108       
      123125 implicit_else      3104       if (ARG < 0) then
                                3105         
      197693 reconvergence      3108       for I in 0 to RESULT'left loop
                                3109         
     1690189 loop_body          3109         if (I_VAL mod 2) = 0 then
                                3110           
     1690189 reconvergence      3114         I_VAL := I_VAL/2;
                                3115       end loop;
                                3116       
     1264145 if                 3110           RESULT(I) := B_VAL;
                                3111         else
                                3112           
      426044 else               3112           RESULT(I) := not B_VAL;
                                3113         end if;
                                3114         
           0 if                 3117         assert NO_WARNING
                                3118           report "NUMERIC_STD.TO_SIGNED: vector truncated"
                                3119           severity warning;
                                3120       end if;
                                3121       
      197693 implicit_else      3116       if ((I_VAL /= 0) or (B_VAL /= RESULT(RESULT'left))) then
                                3117         
      197693 reconvergence      3121       return RESULT;
                                3122     end function TO_SIGNED
           0 sequence           3127       return TO_UNSIGNED (ARG  => ARG,
                                3128                           SIZE => SIZE_RES'length);
                                3129     end function TO_UNSIGNED
           0 sequence           3134       return TO_SIGNED (ARG  => ARG,
                                3135                         SIZE => SIZE_RES'length);
                                3136     end function TO_SIGNED
     1043339 sequence           3202       RESULT := UNRESOLVED_UNSIGNED(not(STD_ULOGIC_VECTOR(L)));
                                3203       return RESULT;
                                3204     end function "not"
           0 sequence           3210       RESULT := UNRESOLVED_UNSIGNED(STD_ULOGIC_VECTOR(L) and
                                3211                                     STD_ULOGIC_VECTOR(R));
                                3212       return RESULT;
                                3213     end function "and"
           0 sequence           3219       RESULT := UNRESOLVED_UNSIGNED(STD_ULOGIC_VECTOR(L) or
                                3220                                     STD_ULOGIC_VECTOR(R));
                                3221       return RESULT;
                                3222     end function "or"
           0 sequence           3228       RESULT := UNRESOLVED_UNSIGNED(STD_ULOGIC_VECTOR(L) nand
                                3229                                     STD_ULOGIC_VECTOR(R));
                                3230       return RESULT;
                                3231     end function "nand"
           0 sequence           3237       RESULT := UNRESOLVED_UNSIGNED(STD_ULOGIC_VECTOR(L) nor
                                3238                                     STD_ULOGIC_VECTOR(R));
                                3239       return RESULT;
                                3240     end function "nor"
           0 sequence           3246       RESULT := UNRESOLVED_UNSIGNED(STD_ULOGIC_VECTOR(L) xor
                                3247                                     STD_ULOGIC_VECTOR(R));
                                3248       return RESULT;
                                3249     end function "xor"
           0 sequence           3259       RESULT := UNRESOLVED_UNSIGNED(STD_ULOGIC_VECTOR(L) xnor
                                3260                                     STD_ULOGIC_VECTOR(R));
                                3261       return RESULT;
                                3262     end function "xnor"
        1280 sequence           3268       RESULT := UNRESOLVED_SIGNED(not(STD_ULOGIC_VECTOR(L)));
                                3269       return RESULT;
                                3270     end function "not"
           0 sequence           3276       RESULT := UNRESOLVED_SIGNED(STD_ULOGIC_VECTOR(L) and STD_ULOGIC_VECTOR(R));
                                3277       return RESULT;
                                3278     end function "and"
           0 sequence           3284       RESULT := UNRESOLVED_SIGNED(STD_ULOGIC_VECTOR(L) or STD_ULOGIC_VECTOR(R));
                                3285       return RESULT;
                                3286     end function "or"
           0 sequence           3292       RESULT := UNRESOLVED_SIGNED(STD_ULOGIC_VECTOR(L) nand
                                3293                                   STD_ULOGIC_VECTOR(R));
                                3294       return RESULT;
                                3295     end function "nand"
           0 sequence           3301       RESULT := UNRESOLVED_SIGNED(STD_ULOGIC_VECTOR(L) nor STD_ULOGIC_VECTOR(R));
                                3302       return RESULT;
                                3303     end function "nor"
           0 sequence           3309       RESULT := UNRESOLVED_SIGNED(STD_ULOGIC_VECTOR(L) xor STD_ULOGIC_VECTOR(R));
                                3310       return RESULT;
                                3311     end function "xor"
           0 sequence           3321       RESULT := UNRESOLVED_SIGNED(STD_ULOGIC_VECTOR(L) xnor
                                3322                                   STD_ULOGIC_VECTOR(R));
                                3323       return RESULT;
                                3324     end function "xnor"
           0 sequence           3330       return UNRESOLVED_UNSIGNED (L and STD_ULOGIC_VECTOR(R));
                                3331     end function "and"
           0 sequence           3337       return UNRESOLVED_UNSIGNED (STD_ULOGIC_VECTOR(L) and R);
                                3338     end function "and"
           0 sequence           3344       return UNRESOLVED_UNSIGNED (L or STD_ULOGIC_VECTOR(R));
                                3345     end function "or"
           0 sequence           3351       return UNRESOLVED_UNSIGNED (STD_ULOGIC_VECTOR(L) or R);
                                3352     end function "or"
           0 sequence           3358       return UNRESOLVED_UNSIGNED (L nand STD_ULOGIC_VECTOR(R));
                                3359     end function "nand"
           0 sequence           3365       return UNRESOLVED_UNSIGNED (STD_ULOGIC_VECTOR(L) nand R);
                                3366     end function "nand"
           0 sequence           3372       return UNRESOLVED_UNSIGNED (L nor STD_ULOGIC_VECTOR(R));
                                3373     end function "nor"
           0 sequence           3379       return UNRESOLVED_UNSIGNED (STD_ULOGIC_VECTOR(L) nor R);
                                3380     end function "nor"
           0 sequence           3386       return UNRESOLVED_UNSIGNED (L xor STD_ULOGIC_VECTOR(R));
                                3387     end function "xor"
           0 sequence           3393       return UNRESOLVED_UNSIGNED (STD_ULOGIC_VECTOR(L) xor R);
                                3394     end function "xor"
           0 sequence           3404       return UNRESOLVED_UNSIGNED (L xnor STD_ULOGIC_VECTOR(R));
                                3405     end function "xnor"
           0 sequence           3415       return UNRESOLVED_UNSIGNED (STD_ULOGIC_VECTOR(L) xnor R);
                                3416     end function "xnor"
           0 sequence           3422       return UNRESOLVED_SIGNED (L and STD_ULOGIC_VECTOR(R));
                                3423     end function "and"
           0 sequence           3429       return UNRESOLVED_SIGNED (STD_ULOGIC_VECTOR(L) and R);
                                3430     end function "and"
           0 sequence           3436       return UNRESOLVED_SIGNED (L or STD_ULOGIC_VECTOR(R));
                                3437     end function "or"
           0 sequence           3443       return UNRESOLVED_SIGNED (STD_ULOGIC_VECTOR(L) or R);
                                3444     end function "or"
           0 sequence           3450       return UNRESOLVED_SIGNED (L nand STD_ULOGIC_VECTOR(R));
                                3451     end function "nand"
           0 sequence           3457       return UNRESOLVED_SIGNED (STD_ULOGIC_VECTOR(L) nand R);
                                3458     end function "nand"
           0 sequence           3464       return UNRESOLVED_SIGNED (L nor STD_ULOGIC_VECTOR(R));
                                3465     end function "nor"
           0 sequence           3471       return UNRESOLVED_SIGNED (STD_ULOGIC_VECTOR(L) nor R);
                                3472     end function "nor"
           0 sequence           3478       return UNRESOLVED_SIGNED (L xor STD_ULOGIC_VECTOR(R));
                                3479     end function "xor"
           0 sequence           3485       return UNRESOLVED_SIGNED (STD_ULOGIC_VECTOR(L) xor R);
                                3486     end function "xor"
           0 sequence           3496       return UNRESOLVED_SIGNED (L xnor STD_ULOGIC_VECTOR(R));
                                3497     end function "xnor"
           0 sequence           3507       return UNRESOLVED_SIGNED (STD_ULOGIC_VECTOR(L) xnor R);
                                3508     end function "xnor"
           0 sequence           3518       return and (STD_ULOGIC_VECTOR (L));
                                3519     end function "and"
           0 sequence           3540       return nand (STD_ULOGIC_VECTOR (L));
                                3541     end function "nand"
           0 sequence           3562       return or (STD_ULOGIC_VECTOR (L));
                                3563     end function "or"
           0 sequence           3584       return nor (STD_ULOGIC_VECTOR (L));
                                3585     end function "nor"
           0 sequence           3606       return xor (STD_ULOGIC_VECTOR (L));
                                3607     end function "xor"
           0 sequence           3628       return xnor (STD_ULOGIC_VECTOR (L));
                                3629     end function "xnor"
           0 sequence           3529       return and (STD_ULOGIC_VECTOR (L));
                                3530     end function "and"
           0 sequence           3551       return nand (STD_ULOGIC_VECTOR (L));
                                3552     end function "nand"
           0 sequence           3573       return or (STD_ULOGIC_VECTOR (L));
                                3574     end function "or"
           0 sequence           3595       return nor (STD_ULOGIC_VECTOR (L));
                                3596     end function "nor"
           0 sequence           3617       return xor (STD_ULOGIC_VECTOR (L));
                                3618     end function "xor"
           0 sequence           3639       return xnor (STD_ULOGIC_VECTOR (L));
                                3640     end function "xnor"
           0 sequence           3666       return MATCH_TABLE(L, R);
                                3667     end function STD_MATCH
           0 if                 3675         assert NO_WARNING
                                3676           report "NUMERIC_STD.STD_MATCH: null detected, returning FALSE"
                                3677           severity warning;
                                3678         return false;
                                3679       end if;
                                3680       
           0 implicit_else      3674       if ((L'length < 1) or (R'length < 1)) then
                                3675         
           0 reconvergence      3680       if LV'length /= RV'length then
                                3681         
           0 if                 3681         assert NO_WARNING
                                3682           report "NUMERIC_STD.STD_MATCH: L'LENGTH /= R'LENGTH, returning FALSE"
                                3683           severity warning;
                                3684         return false;
                                3685       else
                                3686         
           0 else               3686         for I in LV'low to LV'high loop
                                3687           
           0 reconvergence      3691         return true;
                                3692       end if;
                                3693     end function STD_MATCH
           0 if                 3688             return false;
                                3689           end if;
                                3690         end loop;
                                3691         
           0 else               3687           if not (MATCH_TABLE(LV(I), RV(I))) then
                                3688             
           0 if                 3701         assert NO_WARNING
                                3702           report "NUMERIC_STD.STD_MATCH: null detected, returning FALSE"
                                3703           severity warning;
                                3704         return false;
                                3705       end if;
                                3706       
           0 implicit_else      3700       if ((L'length < 1) or (R'length < 1)) then
                                3701         
           0 reconvergence      3706       if LV'length /= RV'length then
                                3707         
           0 if                 3707         assert NO_WARNING
                                3708           report "NUMERIC_STD.STD_MATCH: L'LENGTH /= R'LENGTH, returning FALSE"
                                3709           severity warning;
                                3710         return false;
                                3711       else
                                3712         
           0 else               3712         for I in LV'low to LV'high loop
                                3713           
           0 reconvergence      3717         return true;
                                3718       end if;
                                3719     end function STD_MATCH
           0 if                 3714             return false;
                                3715           end if;
                                3716         end loop;
                                3717         
           0 else               3713           if not (MATCH_TABLE(LV(I), RV(I))) then
                                3714             
           0 if                 3727         assert NO_WARNING
                                3728           report "NUMERIC_STD.STD_MATCH: null detected, returning FALSE"
                                3729           severity warning;
                                3730         return false;
                                3731       end if;
                                3732       
           0 implicit_else      3726       if ((L'length < 1) or (R'length < 1)) then
                                3727         
           0 reconvergence      3732       if LV'length /= RV'length then
                                3733         
           0 if                 3733         assert NO_WARNING
                                3734           report "NUMERIC_STD.STD_MATCH: L'LENGTH /= R'LENGTH, returning FALSE"
                                3735           severity warning;
                                3736         return false;
                                3737       else
                                3738         
           0 else               3738         for I in LV'low to LV'high loop
                                3739           
           0 reconvergence      3743         return true;
                                3744       end if;
                                3745     end function STD_MATCH
           0 if                 3740             return false;
                                3741           end if;
                                3742         end loop;
                                3743         
           0 else               3739           if not (MATCH_TABLE(LV(I), RV(I))) then
                                3740             
           0 if                 3759         assert NO_WARNING
                                3760           report "NUMERIC_STD.TO_01: null detected, returning NAU"
                                3761           severity warning;
                                3762         return NAU;
                                3763       end if;
                                3764       
     7187686 implicit_else      3758       if (S'length < 1) then
                                3759         
     7187686 reconvergence      3764       return UNRESOLVED_UNSIGNED(TO_01(STD_ULOGIC_VECTOR(S), XMAP));
                                3765     end function TO_01
           0 if                 3772         assert NO_WARNING
                                3773           report "NUMERIC_STD.TO_01: null detected, returning NAS"
                                3774           severity warning;
                                3775         return NAS;
                                3776       end if;
                                3777       
      742886 implicit_else      3771       if (S'length < 1) then
                                3772         
      742886 reconvergence      3777       return UNRESOLVED_SIGNED(TO_01(STD_ULOGIC_VECTOR(S), XMAP));
                                3778     end function TO_01
           0 sequence           3783       return UNRESOLVED_UNSIGNED(TO_X01(STD_ULOGIC_VECTOR(S)));
                                3784     end function TO_X01
           0 sequence           3789       return UNRESOLVED_SIGNED(TO_X01(STD_ULOGIC_VECTOR(S)));
                                3790     end function TO_X01
           0 sequence           3795       return UNRESOLVED_UNSIGNED(TO_X01Z(STD_ULOGIC_VECTOR(S)));
                                3796     end function TO_X01Z
           0 sequence           3801       return UNRESOLVED_SIGNED(TO_X01Z(STD_ULOGIC_VECTOR(S)));
                                3802     end function TO_X01Z
           0 sequence           3807       return UNRESOLVED_UNSIGNED(TO_UX01(STD_ULOGIC_VECTOR(S)));
                                3808     end function TO_UX01
           0 sequence           3813       return UNRESOLVED_SIGNED(TO_UX01(STD_ULOGIC_VECTOR(S)));
                                3814     end function TO_UX01
           0 sequence           3819       return IS_X(STD_ULOGIC_VECTOR(S));
                                3820     end function IS_X
           0 sequence           3825       return IS_X(STD_ULOGIC_VECTOR(S));
                                3826     end function IS_X
           0 sequence           3833       return TO_OSTRING(STD_ULOGIC_VECTOR (value));
                                3834     end function TO_OSTRING
           0 sequence           3842       return TO_OSTRING(pad & STD_ULOGIC_VECTOR (value));
                                3843     end function TO_OSTRING
           0 sequence           3847       return to_hstring(STD_ULOGIC_VECTOR (value));
                                3848     end function to_hstring
           0 sequence           3856       return to_hstring(pad & STD_ULOGIC_VECTOR (value));
                                3857     end function to_hstring
           0 sequence           3863       READ (L     => L,
                                3864             VALUE => ivalue,
                                3865             GOOD  => GOOD);
                                3866       VALUE := UNSIGNED(ivalue);
                                3867     end procedure READ
           0 sequence           3872       READ (L      => L,
                                3873              VALUE => ivalue);
                                3874       VALUE := UNSIGNED (ivalue);
                                3875     end procedure READ
           0 sequence           3881       READ (L     => L,
                                3882             VALUE => ivalue,
                                3883             GOOD  => GOOD);
                                3884       VALUE := SIGNED(ivalue);
                                3885     end procedure READ
           0 sequence           3890       READ (L      => L,
                                3891              VALUE => ivalue);
                                3892       VALUE := SIGNED (ivalue);
                                3893     end procedure READ
           0 sequence           3899       ivalue := STD_ULOGIC_VECTOR (VALUE);
                                3900       WRITE (L          => L,
                                3901               VALUE     => ivalue,
                                3902               JUSTIFIED => JUSTIFIED,
                                3903               FIELD     => FIELD);
                                3904     end procedure WRITE
           0 sequence           3910       ivalue := STD_ULOGIC_VECTOR (VALUE);
                                3911       WRITE (L          => L,
                                3912               VALUE     => ivalue,
                                3913               JUSTIFIED => JUSTIFIED,
                                3914               FIELD     => FIELD);
                                3915     end procedure WRITE
           0 sequence           3921       OREAD (L     => L,
                                3922              VALUE => ivalue,
                                3923              GOOD  => GOOD);
                                3924       VALUE := UNSIGNED(ivalue);
                                3925     end procedure OREAD
           0 sequence           3935       OREAD (L      => L,
                                3936               VALUE => ivalue,            -- Read padded STRING
                                3937               GOOD  => ok);
                                3938       -- Bail out if there was a bad read
                                3939       
           0 if                 3940         GOOD := false;
                                3941         return;
                                3942       end if;
                                3943       
           0 implicit_else      3939       if not ok then
                                3940         
           0 reconvergence      3943       expected_padding := (others => ivalue(pad));
                                3944       if ivalue(0 to pad-1) /= expected_padding then
                                3945         
           0 if                 3945         GOOD := false;
                                3946       else
                                3947         
           0 else               3947         GOOD  := true;
                                3948         VALUE := UNRESOLVED_SIGNED (ivalue (pad to ivalue'high));
                                3949       end if;
                                3950     end procedure OREAD
           0 sequence           3955       OREAD (L     => L,
                                3956              VALUE => ivalue);
                                3957       VALUE := UNSIGNED (ivalue);
                                3958     end procedure OREAD
           0 sequence           3966       OREAD (L      => L,
                                3967               VALUE => ivalue);           -- Read padded string
                                3968       expected_padding := (others => ivalue(pad));
                                3969       if ivalue(0 to pad-1) /= expected_padding then
                                3970         
           0 if                 3970         assert false
                                3971           report "NUMERIC_STD.OREAD Error: Signed vector truncated"
                                3972           severity error;
                                3973       else
                                3974         
           0 else               3974         VALUE := UNRESOLVED_SIGNED (ivalue (pad to ivalue'high));
                                3975       end if;
                                3976     end procedure OREAD
           0 sequence           3982       HREAD (L     => L,
                                3983              VALUE => ivalue,
                                3984              GOOD  => GOOD);
                                3985       VALUE := UNSIGNED(ivalue);
                                3986     end procedure HREAD
           0 sequence           3996       HREAD (L      => L,
                                3997               VALUE => ivalue,            -- Read padded STRING
                                3998               GOOD  => ok);
                                3999       
           0 if                 4000         GOOD := false;
                                4001         return;
                                4002       end if;
                                4003       
           0 implicit_else      3999       if not ok then
                                4000         
           0 reconvergence      4003       expected_padding := (others => ivalue(pad));
                                4004       if ivalue(0 to pad-1) /= expected_padding then
                                4005         
           0 if                 4005         GOOD := false;
                                4006       else
                                4007         
           0 else               4007         GOOD  := true;
                                4008         VALUE := UNRESOLVED_SIGNED (ivalue (pad to ivalue'high));
                                4009       end if;
                                4010     end procedure HREAD
           0 sequence           4015       HREAD (L     => L,
                                4016              VALUE => ivalue);
                                4017       VALUE := UNSIGNED (ivalue);
                                4018     end procedure HREAD
           0 sequence           4026       HREAD (L      => L,
                                4027               VALUE => ivalue);           -- Read padded string
                                4028       expected_padding := (others => ivalue(pad));
                                4029       if ivalue(0 to pad-1) /= expected_padding then
                                4030         
           0 if                 4030         assert false
                                4031           report "NUMERIC_STD.HREAD Error: Signed vector truncated"
                                4032           severity error;
                                4033       else
                                4034         
           0 else               4034         VALUE := UNRESOLVED_SIGNED (ivalue (pad to ivalue'high));
                                4035       end if;
                                4036     end procedure HREAD
           0 sequence           4042       ivalue := STD_ULOGIC_VECTOR (VALUE);
                                4043       OWRITE (L         => L,
                                4044               VALUE     => ivalue,
                                4045               JUSTIFIED => JUSTIFIED,
                                4046               FIELD     => FIELD);
                                4047     end procedure OWRITE
           0 sequence           4056       ivalue := STD_ULOGIC_VECTOR (VALUE);
                                4057       OWRITE (L         => L,
                                4058               VALUE     => pad & ivalue,
                                4059               JUSTIFIED => JUSTIFIED,
                                4060               FIELD     => FIELD);
                                4061     end procedure OWRITE
           0 sequence           4067       ivalue := STD_ULOGIC_VECTOR (VALUE);
                                4068       HWRITE (L         => L,
                                4069               VALUE     => ivalue,
                                4070               JUSTIFIED => JUSTIFIED,
                                4071               FIELD     => FIELD);
                                4072     end procedure HWRITE
           0 sequence           4081       ivalue := STD_ULOGIC_VECTOR (VALUE);
                                4082       HWRITE (L         => L,
                                4083               VALUE     => pad & ivalue,
                                4084               JUSTIFIED => JUSTIFIED,
                                4085               FIELD     => FIELD);
                                4086     end procedure HWRITE
       92241 sequence             82       if ARG >= 0 then
                                  83         
       44586 if                   83         N := ARG;
                                  84       else
                                  85         
       47655 else                 85         N := -(ARG+1);
                                  86       end if;
                                  87       
       92241 reconvergence        87       NBITS := 1;
                                  88       while 
      565726 sequence             88             N > 0 loop
                                  89         
      473485 loop_body            89         NBITS := NBITS+1;
                                  90         N := N / 2;
                                  91       end loop;
                                  92       
       92241 reconvergence        92       return NBITS;
                                  93     end function SIGNED_NUM_BITS
       92212 sequence             99       N := ARG;
                                 100       NBITS := 1;
                                 101       while 
      565558 sequence            101             N > 1 loop
                                 102         
      473346 loop_body           102         NBITS := NBITS+1;
                                 103         N := N / 2;
                                 104       end loop;
                                 105       
       92212 reconvergence       105       return NBITS;
                                 106     end function UNSIGNED_NUM_BITS
     1049483 sequence            123       for I in 0 to L_LEFT loop
                                 124         
     4355290 loop_body           124         RESULT(I) := CBIT xor XL(I) xor XR(I);
                                 125         CBIT      := (CBIT and XL(I)) or (CBIT and XR(I)) or (XL(I) and XR(I));
                                 126       end loop;
                                 127       
     1049483 reconvergence       127       return RESULT;
                                 128     end function ADD_UNSIGNED
       60836 sequence            143       for I in 0 to L_LEFT loop
                                 144         
      605816 loop_body           144         RESULT(I) := CBIT xor XL(I) xor XR(I);
                                 145         CBIT      := (CBIT and XL(I)) or (CBIT and XR(I)) or (XL(I) and XR(I));
                                 146       end loop;
                                 147       
       60836 reconvergence       147       return RESULT;
                                 148     end function ADD_SIGNED
      276487 sequence            162       TEMP   := "0"&NUM;
                                 163       QUOT   := (others => '0');
                                 164       TOPBIT := -1;
                                 165       for J in DENOM'range loop
                                 166         
      276487 if                  167           TOPBIT := J;
                                 168           exit;
                                 169         end if;
                                 170       end loop;
                                 171       
      276487 blocking            171       assert TOPBIT >= 0 report "NUMERIC_STD.DIVMOD: DIV, MOD, or REM by zero"
                                 172         severity error;
                                 173   
                                 174       for J in NUM'length-(TOPBIT+1) downto 0 loop
                                 175         
     1410051 else                166         if DENOM(J) = '1' then
                                 167           
     2239608 reconvergence       180         assert TEMP(TOPBIT+J+1) = '0'
                                 181           report "NUMERIC_STD.DIVMOD: internal error in the division algorithm"
                                 182           severity error;
                                 183       end loop;
                                 184       
      276487 reconvergence       184       XQUOT   := RESIZE(QUOT, XQUOT'length);
                                 185       XREMAIN := RESIZE(TEMP, XREMAIN'length);
                                 186     end procedure DIVMOD
      970090 if                  176           TEMP(TOPBIT+J+1 downto J) := (TEMP(TOPBIT+J+1 downto J))
                                 177                                        -("0"&DENOM(TOPBIT downto 0));
                                 178           QUOT(J) := '1';
                                 179         end if;
                                 180         
     1269518 else                175         if TEMP(TOPBIT+J+1 downto J) >= "0"&DENOM(TOPBIT downto 0) then
                                 176           
       22016 if                  198         RESULT(ARG_L downto COUNT) := XARG(ARG_L-COUNT downto 0);
                                 199       end if;
                                 200       
           0 implicit_else       197       if COUNT <= ARG_L then
                                 198         
       22016 reconvergence       200       return RESULT;
                                 201     end function XSLL
           0 if                  211         RESULT(ARG_L-COUNT downto 0) := XARG(ARG_L downto COUNT);
                                 212       end if;
                                 213       
           0 implicit_else       210       if COUNT <= ARG_L then
                                 211         
           0 reconvergence       213       return RESULT;
                                 214     end function XSRL
           0 sequence            224       if ((ARG'length <= 1) or (XCOUNT = 0)) then 
           0 if                  224                                                   return ARG;
                                 225       else
                                 226         
           0 if                  226                                  XCOUNT           := ARG_L;
                                 227         end if;
                                 228         
           0 implicit_else       226         if (XCOUNT > ARG_L) then 
           0 reconvergence       228         RESULT(ARG_L-XCOUNT downto 0)             := XARG(ARG_L downto XCOUNT);
                                 229         RESULT(ARG_L downto (ARG_L - XCOUNT + 1)) := (others => XARG(ARG_L));
                                 230       end if;
                                 231       
           0 reconvergence       231       return RESULT;
                                 232     end function XSRA
           0 sequence            242       COUNTM := COUNT mod (ARG_L + 1);
                                 243       
           0 if                  244         RESULT(ARG_L downto COUNTM) := XARG(ARG_L-COUNTM downto 0);
                                 245         RESULT(COUNTM-1 downto 0)   := XARG(ARG_L downto ARG_L-COUNTM+1);
                                 246       end if;
                                 247       
           0 implicit_else       243       if COUNTM /= 0 then
                                 244         
           0 reconvergence       247       return RESULT;
                                 248     end function XROL
           0 sequence            258       COUNTM := COUNT mod (ARG_L + 1);
                                 259       
           0 if                  260         RESULT(ARG_L-COUNTM downto 0)       := XARG(ARG_L downto COUNTM);
                                 261         RESULT(ARG_L downto ARG_L-COUNTM+1) := XARG(COUNTM-1 downto 0);
                                 262       end if;
                                 263       
           0 implicit_else       259       if COUNTM /= 0 then
                                 260         
           0 reconvergence       263       return RESULT;
                                 264     end function XROR
       24099 sequence            273       return STD_ULOGIC_VECTOR(L) = STD_ULOGIC_VECTOR(R);
                                 274     end function UNSIGNED_EQUAL
        1059 sequence            281       return STD_ULOGIC_VECTOR(L) = STD_ULOGIC_VECTOR(R);
                                 282     end function SIGNED_EQUAL
     2239641 sequence            289       return STD_ULOGIC_VECTOR(L) < STD_ULOGIC_VECTOR(R);
                                 290     end function UNSIGNED_LESS
          51 sequence            299       INTERN_L    := L;
                                 300       INTERN_R    := R;
                                 301       INTERN_L(0) := not INTERN_L(0);
                                 302       INTERN_R(0) := not INTERN_R(0);
                                 303       return STD_ULOGIC_VECTOR(INTERN_L) < STD_ULOGIC_VECTOR(INTERN_R);
                                 304     end function SIGNED_LESS
          33 sequence            312       return STD_ULOGIC_VECTOR(L) <= STD_ULOGIC_VECTOR(R);
                                 313     end function UNSIGNED_LESS_OR_EQUAL
          51 sequence            323       INTERN_L                           := L;
                                 324       INTERN_R                           := R;
                                 325       INTERN_L(0)                        := not INTERN_L(0);
                                 326       INTERN_R(0)                        := not INTERN_R(0);
                                 327       return STD_ULOGIC_VECTOR(INTERN_L) <= STD_ULOGIC_VECTOR(INTERN_R);
                                 328     end function SIGNED_LESS_OR_EQUAL

Line coverage for $root.$pkgs.work.not_test_pkg:

Coverage for source: not_test_pkg.vhdl

           0 sequence             30       for i in sz-1 downto 0 loop
                                  31         
           0 loop_body            31         if(bv(i) = '1') then
                                  32           
           0 reconvergence        39       return rtn;
                                  40     end function
           0 if                   32           rtn(i) := '1';
                                  33         elsif(
           0 sequence             33               bv(i) = '0') then
                                  34           
           0 elsif                34           rtn(i) := '0';
                                  35         else
                                  36           
           0 else                 36           rtn(i) := 'U';
                                  37         end if;
                                  38       end loop;
                                  39       
           0 sequence             46       for i in sz-1 downto 0 loop
                                  47         
           0 loop_body            47         if(bv(i) = '1') then
                                  48           
           0 reconvergence        55       return rtn;
                                  56     end function
           0 if                   48           rtn(i) := '1';
                                  49         elsif(
           0 sequence             49               bv(i) = '0') then
                                  50           
           0 elsif                50           rtn(i) := '0';
                                  51         else
                                  52           
           0 else                 52           rtn(i) := 'U';
                                  53         end if;
                                  54       end loop;
                                  55       
           0 sequence             64       case len is
                                  65         when 8 =>
                                  66           
           0 case_item            66           rtn := v(6 downto 0) & ((v(7) xor v(4)) xor (v(1) xor v(2)));
                                  67         when 16 =>
                                  68           
           0 case_item            68           rtn := v(14 downto 0) & ((v(15) xor v(14)) xor (v(12) xor v(3)));
                                  69         when 32 =>
                                  70           
           0 case_item            70           rtn := v(30 downto 0) & ((v(31) xor v(6)) xor (v(5) xor v(1)));
                                  71         when others =>
                                  72           
           0 case_item            72           report "ERROR: LSFR size not implemented ..." severity failure;
                                  73       end case;
                                  74       
           0 reconvergence        74       return rtn;
                                  75     end function
           0 sequence            104       case len is
                                 105         when 8 =>
                                 106           
           0 case_item           106           rtn := v(6 downto 0) & ((v(7) xor v(4)) xor (v(1) xor v(2)));
                                 107         when 16 =>
                                 108           
           0 case_item           108           rtn := v(14 downto 0) & ((v(15) xor v(14)) xor (v(12) xor v(3)));
                                 109         when 32 =>
                                 110           
           0 case_item           110           rtn := v(30 downto 0) & ((v(31) xor v(6)) xor (v(5) xor v(1)));
                                 111         when others =>
                                 112           
           0 case_item           112           report "ERROR: LSFR size not implemented ..." severity failure;
                                 113       end case;
                                 114       --report "unsigned  LSFR exit";
                                 115       
           0 reconvergence       115       return rtn;
                                 116     end function
           0 sequence             84       case len is
                                  85         when 8 =>
                                  86           
           0 case_item            86           rtn := v(6 downto 0) & ((v(7) xor v(4)) xor (v(1) xor v(2)));
                                  87         when 16 =>
                                  88           
           0 case_item            88           rtn := v(14 downto 0) & ((v(15) xor v(14)) xor (v(12) xor v(3)));
                                  89         when 32 =>
                                  90           
           0 case_item            90           rtn := v(30 downto 0) & ((v(31) xor v(6)) xor (v(5) xor v(1)));
                                  91         when others =>
                                  92           
           0 case_item            92           report "ERROR: LSFR size not implemented ..." severity failure;
                                  93       end case;
                                  94       
           0 reconvergence        94       return rtn;
                                  95     end function

Line coverage for $root.a15to38b:

Coverage for source: test.vhdl

           1 sequence             42       assert quiet report "start of tests" severity note;
                                  43   
                                  44   --  ************************************************
                                  45   --  ************************************************
                                  46   -- A15_38 tests from Kingsley ::::::
                                  47   
                                  48       -- A.15 tests
                                  49       for i in 0 to 63 loop
                                  50         
          64 loop_body            50         uns6:=to_unsigned(i,6);
                                  51         for j in 0 to 15 loop
                                  52           
           1 reconvergence        61       assert quiet report "A.15 test done" severity note;
                                  62   
                                  63       -- A.16 tests
                                  64       for i in -32 to 31 loop
                                  65         
        1024 loop_body            52           uns4:=to_unsigned(j,4);
                                  53           uns10:=uns6*uns4;    -- A.15
                                  54           assert to_integer(uns10)=i*j  report "A.15 fails 6x4" 
                                  55   	  severity FAILURE;
                                  56           assert uns4*uns6=uns10        report "A.15 fails 4x6"
                                  57   	  severity FAILURE;
                                  58         end loop;
                                  59       end loop;
                                  60   
                                  61       
          64 loop_body            65         sgn6:=to_signed(i,6);
                                  66         for j in -8 to 7 loop
                                  67           
           1 reconvergence        76       assert quiet report "A.16 test done" severity note;
                                  77   
                                  78       -- A.17 and A.18 tests
                                  79       for i in 0 to 15 loop
                                  80         
        1024 loop_body            67           sgn4:=to_signed(j,4);
                                  68           res10:=sgn6*sgn4;    -- A.16
                                  69           assert to_integer(res10)=i*j  report "A.16 fails 6x4"
                                  70   	  severity FAILURE;
                                  71           assert sgn4*sgn6=res10        report "A.16 fails 4x6"
                                  72   	  severity FAILURE;
                                  73         end loop;
                                  74       end loop;
                                  75   
                                  76       
          16 loop_body            80         uns4:=to_unsigned(i,4);
                                  81         assert (i/=8 or uns4="1000") and (i/=9 or uns4="1001")
                                  82           and (i/=15 or uns4="1111") and (i/=0 or uns4="0000")
                                  83           and (i/=3 or uns4="0011") and (i/=7 or uns4="0111")
                                  84           and (to_integer(uns4)=i);
                                  85         for j in 0 to 15 loop
                                  86           -- exaustively test 4x4 case
                                  87           
           1 reconvergence       100       assert quiet report "A.17, A.18 tests done" severity note;
                                 101   
                                 102       -- A.19 and A.20 tests
                                 103       for i in -8 to 7 loop
                                 104         
         256 loop_body            87           uns8:=j*uns4;         -- A.18
                                  88           assert to_integer(uns8)=(i*j) report "A.18 fails"
                                  89             severity FAILURE;
                                  90           uns8:=uns4*j;         -- A.17
                                  91           assert to_integer(uns8)=(i*j) report "A.17 fails"
                                  92             severity FAILURE;
                                  93         end loop;
                                  94         -- uns8:=19*uns4;		-- A.18; may note overflow of conversion
                                  95         -- assert to_integer(uns8)=(3*i)  report "A.18 fails" severity FAILURE;
                                  96         -- uns8:=uns4*21;		-- A.17; may note overflow of conversion
                                  97         -- assert to_integer(uns8)=(5*i)  report "A.17 fails" severity FAILURE;
                                  98       end loop;
                                  99   
                                 100       
          16 loop_body           104         sgn4:=to_signed(i,4);
                                 105         assert (i/=-8 or sgn4="1000") and (i/=-7 or sgn4="1001")
                                 106           and (i/=-1 or sgn4="1111") and (i/=0 or sgn4="0000")
                                 107           and (i/=3 or sgn4="0011") and (i/=7 or sgn4="0111")
                                 108           and (to_integer(sgn4)=i);
                                 109         for j in -8 to 7 loop
                                 110           -- exaustively test 4x4 case
                                 111           
         256 loop_body           111           res8:=j*sgn4;         -- A.20
                                 112           assert to_integer(res8)=(i*j) report "A.20 fails"
                                 113             severity FAILURE;
                                 114           res8:=sgn4*j;         -- A.19
                                 115           assert to_integer(res8)=(i*j) report "A.19 fails"
                                 116             severity FAILURE;
                                 117         end loop;
                                 118         -- res8:=19*sgn4;		-- A.20; may note overflow of conversion
                                 119         -- assert to_integer(res8)=(3*i)  report "A.20 fails" severity FAILURE;
                                 120         -- res8:=sgn4*21;		-- A.21; may note overflow of conversion
                                 121         -- assert to_integer(res8)=(5*i)  report "A.19 fails" severity FAILURE;
                                 122       end loop;
                                 123   
                                 124       
           1 reconvergence       124       assert quiet report "A.19, A.20 tests done" severity note;
                                 125   
                                 126       -- Id: A.21, A.23, and A.24
                                 127       for i in 0 to 1023 loop
                                 128         
        1024 loop_body           128         uns10:=to_unsigned(i,10);
                                 129         for j in 1 to 15 loop
                                 130           
           1 reconvergence       146       assert (to_unsigned(5505001,23)&"0000000000000000")/to_unsigned(294911,19)
                                 147         ="100101010101010101001"  -- =(5505001*65536/294911)
                                 148         report "A.21 fails ex.1"
                                 149         severity FAILURE;
                                 150       assert (to_unsigned(4195835,23)&"0000000000000000")/to_unsigned(3145727,22)
                                 151         ="10101010101110101"      -- =(4195835*65536/3145727);
                                 152         report "A.21 fails ex.2"
                                 153         severity FAILURE;
                                 154       -- These examples exercise interesting parts of Knuth's Algorithm D, in
                                 155       -- Seminumerical Algorithms, section 4.3.2, when B is 256.
                                 156       assert (to_unsigned(112893473,28)/to_unsigned(19607,16))=to_unsigned(5757,16)
                                 157         report "A.21 fails ex.3"
                                 158         severity FAILURE;
                                 159       assert (to_unsigned(96419675,28)/to_unsigned(34257,16))=to_unsigned(2814,12)
                                 160         report "A.21 fails ex.4"
                                 161         severity FAILURE;
                                 162       assert (to_unsigned(244699666,28)/to_unsigned(59746,16))=to_unsigned(4095,13)
                                 163         report "A.21 fails ex.5"
                                 164         severity FAILURE;
                                 165   
                                 166       assert quiet report "A.21, A.23, A.24 tests done" severity note;
                                 167   
                                 168       -- Id: A.22, A.25 and A.26
                                 169       for i in -512 to 511 loop
                                 170         
       15360 loop_body           130           uns4:=to_unsigned(j,4);
                                 131           ures10:=uns10/uns4;
                                 132           assert to_integer(ures10)=i/j report "A.21 fails"
                                 133             severity FAILURE;
                                 134           ures10:=uns10/j;
                                 135           assert to_integer(ures10)=i/j report "A.23 fails"
                                 136             severity FAILURE;
                                 137           ures10:=i/("000000"&uns4);
                                 138           assert to_integer(ures10)=i/j report "A.24 fails"
                                 139             severity FAILURE;
                                 140         end loop;
                                 141       end loop;
                                 142       -- These examples test interesting parts of other division algorithms.
                                 143       -- They are not particularly targeted to the division algorithm in the
                                 144       -- numeric packages.
                                 145       -- (These are two examples of the pentium's FDIV bug.)
                                 146       
        1024 loop_body           170         sgn10:=to_signed(i,10);
                                 171         for j in -8 to 7 loop
                                 172           
           1 reconvergence       187       assert (to_signed(5505001,24)&"0000000000000000")/to_signed(294911,20)
                                 188         ="0100101010101010101001"  -- =(5505001*65536/294911)
                                 189         report "A.22 fails p1" severity FAILURE;
                                 190       assert (to_signed(-4195835,24)&"0000000000000000")/to_signed(3145727,23)
                                 191         ="11101010101010001011"    -- =(4195835*65536/3145727);
                                 192         report "A.22 fails p2" severity FAILURE;
                                 193   
                                 194       assert quiet report "A.22, A.25, A.26 tests done" severity note;
                                 195   
                                 196       -- Id: A.27, A.29 and A.30
                                 197       for i in 0 to 1023 loop
                                 198         
       16384 loop_body           172           next when j=0;
                                 173           
       15360 blocking            173           sgn4:=to_signed(j,4);
                                 174           res10:=sgn10/sgn4;
                                 175           -- the exception is because -512 overflows when it is negated.
                                 176           assert to_integer(res10)=i/j or (i=-512 and j=-1 and res10=-512)
                                 177             report "A.22 fails";
                                 178           res10:=sgn10/j;
                                 179           assert to_integer(res10)=i/j or (i=-512 and j=-1 and res10=-512)
                                 180             report "A.25 fails" severity FAILURE;
                                 181           res10:=i/resize(sgn4,10);
                                 182           assert to_integer(res10)=i/j or (i=-512 and j=-1 and res10=-512)
                                 183             report "A.26 fails" severity FAILURE;
                                 184         end loop;
                                 185       end loop;
                                 186       -- (These are two examples of the pentium's FDIV bug.)
                                 187       
        1024 loop_body           198         uns10:=to_unsigned(i,10);
                                 199         for j in 1 to 15 loop
                                 200           
       15360 loop_body           200           uns4:=to_unsigned(j,4);
                                 201           ures4:=uns10 rem uns4;
                                 202           assert to_integer(ures4)=i rem j report "A.27 fails" severity FAILURE;
                                 203           ures10:=uns10 rem j;
                                 204           assert to_integer(ures10)=i rem j report "A.29 fails" severity FAILURE;
                                 205           ures10:=i rem ("000000"&uns4);
                                 206           assert to_integer(ures10)=i rem j report "A.30 fails" severity FAILURE;
                                 207         end loop;
                                 208       end loop;
                                 209   
                                 210       
           1 reconvergence       210       assert quiet report "A.27, A.29, A.30 tests done" severity note;
                                 211   
                                 212       -- Id: A.28, A.31 and A.32
                                 213       for i in -512 to 511 loop
                                 214         
        1024 loop_body           214         sgn10:=to_signed(i,10);
                                 215         for j in -8 to 7 loop
                                 216           
           1 reconvergence       227       assert quiet report "A.28, A.31, A.32 tests done" severity note;
                                 228   
                                 229       -- Id: A.33, A.35 and A.36
                                 230       for i in 0 to 1023 loop
                                 231         
       16384 loop_body           216           next when j=0;
                                 217           
       15360 blocking            217           sgn4:=to_signed(j,4);
                                 218           res10:=resize((sgn10 rem sgn4),res10'length);
                                 219           assert to_integer(res10)=i rem j report "A.28 fails" severity FAILURE;
                                 220           res10:=sgn10 rem j;
                                 221           assert to_integer(res10)=i rem j report "A.31 fails" severity FAILURE;
                                 222           res10:=i rem resize(sgn4,10);
                                 223           assert to_integer(res10)=i rem j report "A.32 fails" severity FAILURE;
                                 224         end loop;
                                 225       end loop;
                                 226   
                                 227       
        1024 loop_body           231         uns10:=to_unsigned(i,10);
                                 232         for j in 1 to 15 loop
                                 233           
           1 reconvergence       243       assert quiet report "A.33, A.35, A.36 tests done" severity note;
                                 244   
                                 245       -- Id: A.34, A.37 and A.38
                                 246       for i in -512 to 511 loop
                                 247         
       15360 loop_body           233           uns4:=to_unsigned(j,4);
                                 234           ures10:=resize((uns10 mod uns4),ures10'length);
                                 235           assert to_integer(ures10)=i mod j report "A.33 fails" severity FAILURE;
                                 236           ures10:=uns10 mod j;
                                 237           assert to_integer(ures10)=i mod j report "A.35 fails" severity FAILURE;
                                 238           ures10:=i mod ("000000"&uns4);
                                 239           assert to_integer(ures10)=i mod j report "A.36 fails" severity FAILURE;
                                 240         end loop;
                                 241       end loop;
                                 242   
                                 243       
        1024 loop_body           247         sgn10:=to_signed(i,10);
                                 248         for j in -8 to 7 loop
                                 249           
           1 reconvergence       260       assert quiet report "A.34, A.37, A.38 tests done" severity note;
                                 261   
                                 262   --  ************************************************
                                 263   --  ************************************************
                                 264   -- C13_24 tests from Bhasker ::::::
                                 265   
                                 266   -- STD_C.13 tests:
                                 267       assert UNSIGNED'("0001") <= UNSIGNED'("0010")
                                 268                                   report "Test STD_C.13.1 failing."
                                 269                                   severity FAILURE;
                                 270       assert UNSIGNED'("01") <= UNSIGNED'("1010")
                                 271                                 report "Test STD_C.13.2 failing."
                                 272                                 severity FAILURE;
                                 273       assert UNSIGNED'("000001") <= UNSIGNED'("111")
                                 274                                     report "Test STD_C.13.3 failing."
                                 275                                     severity FAILURE;
                                 276   
                                 277       assert UNSIGNED'("010") <= UNSIGNED'("010")
                                 278                                  report "Test STD_C.13.5 failing."
                                 279                                  severity FAILURE;
                                 280       assert UNSIGNED'("00010010") <= UNSIGNED'("10010")
                                 281                                       report "Test STD_C.13.8 failing."
                                 282                                       severity FAILURE;
                                 283       assert UNSIGNED'("10") <= UNSIGNED'("0010")
                                 284                                 report "Test STD_C.13.9 failing."
                                 285                                 severity FAILURE;
                                 286   
                                 287       assert not (UNSIGNED'("110001") <= UNSIGNED'("100010"))
                                 288         report "Test STD_C.13.4 failing."
                                 289         severity FAILURE;
                                 290       assert not(UNSIGNED'("1111") <= UNSIGNED'("0001010"))
                                 291         report "Test STD_C.13.6 test failing."
                                 292         severity FAILURE;
                                 293       assert not(UNSIGNED'("10001000") <= UNSIGNED'("11"))
                                 294         report "Test STD_C.13.7 test failing."
                                 295         severity FAILURE;
                                 296   
                                 297       assert not(UNSIGNED'("110") <= UNSIGNED'("011"))
                                 298         report "Test STD_C.13.10 failing."
                                 299         severity FAILURE;
                                 300       assert not(UNSIGNED'("10010010") <= UNSIGNED'("10010"))
                                 301         report "Test STD_C.13.11 failing."
                                 302         severity FAILURE;
                                 303       assert not(UNSIGNED'("110") <= UNSIGNED'("LLHL"))
                                 304         report "Test STD_C.13.12 failing."
                                 305         severity FAILURE;
                                 306   
                                 307       
       16384 loop_body           249           next when j=0;
                                 250           
       15360 blocking            250           sgn4:=to_signed(j,4);
                                 251           res10:=resize((sgn10 mod sgn4),res10'length);
                                 252           assert to_integer(res10)=i mod j report "A.34 fails" severity FAILURE;
                                 253           res10:=sgn10 mod j;
                                 254           assert to_integer(res10)=i mod j report "A.37 fails" severity FAILURE;
                                 255           res10:=i mod resize(sgn4,10);
                                 256           assert to_integer(res10)=i mod j report "A.38 fails" severity FAILURE;
                                 257         end loop;
                                 258       end loop;
                                 259   
                                 260       
           1 if                  308         assert not ( UNSIGNED'("110") <= BNULL)
                                 309           report "Test STD_C.13.13 failing."
                                 310           severity FAILURE;
                                 311         assert not (BNULL <= ANULL)
                                 312           report "Test STD_C.13.14 failing."
                                 313           severity FAILURE;
                                 314       end if;
                                 315       
                                 316       
           0 implicit_else       307       if (not quiet) then
                                 308         
           1 if                  317         assert not (UNSIGNED'("10001") <= UNSIGNED'("10X0"))
                                 318           report "Test STD_C.13.15 failing."
                                 319           severity FAILURE;
                                 320         assert not (UNSIGNED'("1HHHLLXX0") <= UNSIGNED'("100"))
                                 321           report "Test STD_C.13.16 failing."
                                 322           severity FAILURE;
                                 323       end if;
                                 324   
                                 325       
           0 implicit_else       316       if (not quiet) then
                                 317         
           1 reconvergence       325       assert quiet report "C.13 tests done" severity note;
                                 326   
                                 327   --STD_C.14 tests:
                                 328   
                                 329       assert SIGNED'("0001") <= SIGNED'("0010")
                                 330                                 report "Test STD_C.14.1 failing."
                                 331                                 severity FAILURE;
                                 332       assert SIGNED'("01") <= SIGNED'("01010")
                                 333                               report "Test STD_C.14.2 failing."
                                 334                               severity FAILURE;
                                 335       assert SIGNED'("000001") <= SIGNED'("0111")
                                 336                                   report "Test STD_C.14.3 failing."
                                 337                                   severity FAILURE;
                                 338       assert SIGNED'("111100") <= SIGNED'("11100")
                                 339                                   report "Test STD_C.14.15 failing."
                                 340                                   severity FAILURE;
                                 341       assert SIGNED'("111100") <= SIGNED'("011100")
                                 342                                   report "Test STD_C.14.16 failing."
                                 343                                   severity FAILURE;
                                 344   
                                 345       assert SIGNED'("010") <= SIGNED'("010")
                                 346                                report "Test STD_C.14.5 failing."
                                 347                                severity FAILURE;
                                 348       assert SIGNED'("10000010") <= SIGNED'("111110010")
                                 349                                     report "Test STD_C.14.8 failing."
                                 350                                     severity FAILURE;
                                 351       assert SIGNED'("10") <= SIGNED'("0010")
                                 352                               report "Test STD_C.14.9 failing."
                                 353                               severity FAILURE;
                                 354       assert SIGNED'("00") <= SIGNED'("0000")
                                 355                               report "Test STD_C.14.17 failing."
                                 356                               severity FAILURE;
                                 357       assert SIGNED'("11100001100") <= SIGNED'("0000")
                                 358                                        report "Test STD_C.14.18 failing."
                                 359                                        severity FAILURE;
                                 360   
                                 361       assert not (SIGNED'("110001") <= SIGNED'("100010"))
                                 362         report "Test STD_C.14.4 failing."
                                 363         severity FAILURE;
                                 364       assert not(SIGNED'("1111") <= SIGNED'("1001010"))
                                 365         report "Test STD_C.14.6 test failing."
                                 366         severity FAILURE;
                                 367       assert not(SIGNED'("11") <= SIGNED'("10001000"))
                                 368         report "Test STD_C.14.7 test failing."
                                 369         severity FAILURE;
                                 370       assert not(SIGNED'("0110") <= SIGNED'("10001000"))
                                 371         report "Test STD_C.14.19 test failing."
                                 372         severity FAILURE;
                                 373   
                                 374       assert not(SIGNED'("010") <= SIGNED'("110"))
                                 375         report "Test STD_C.14.10 failing."
                                 376         severity FAILURE;
                                 377       assert not(SIGNED'("1001") <= SIGNED'("100100010"))
                                 378         report "Test STD_C.14.11 failing."
                                 379         severity FAILURE;
                                 380       assert not(SIGNED'("110") <= SIGNED'("10010"))
                                 381         report "Test STD_C.14.12 failing."
                                 382         severity FAILURE;
                                 383       assert not(SIGNED'("00000110") <= SIGNED'("0000"))
                                 384         report "Test STD_C.14.20 failing."
                                 385         severity FAILURE;
                                 386   
                                 387       
           1 if                  388         assert not (SIGNED'("1HL") <= SBNULL)
                                 389           report "Test STD_C.14.13 failing."
                                 390           severity FAILURE;
                                 391         assert not (SBNULL <= SANULL)
                                 392           report "Test STD_C.14.14 failing."
                                 393           severity FAILURE;
                                 394       end if;
                                 395   
                                 396       
           0 implicit_else       387       if (not quiet) then
                                 388         
           1 if                  397         assert not (SIGNED'("10001") <= SIGNED'("1HX-"))
                                 398           report "Test STD_C.14.21 failing."
                                 399           severity FAILURE;
                                 400         assert not (SIGNED'("1-------0") <= SIGNED'("100"))
                                 401           report "Test STD_C.14.22 failing."
                                 402           severity FAILURE;
                                 403       end if;
                                 404   
                                 405       
           0 implicit_else       396       if (not quiet) then
                                 397         
           1 reconvergence       405       assert quiet report "C.14 tests done" severity note;
                                 406   
                                 407   -- STD_C.17 tests
                                 408   
                                 409       assert UNSIGNED'("0001") <= 2
                                 410                                   report "Test STD_C.17.1 failing."
                                 411                                   severity FAILURE;
                                 412       assert UNSIGNED'("01") <= 10
                                 413                                 report "Test STD_C.17.2 failing."
                                 414                                 severity FAILURE;
                                 415       assert UNSIGNED'("000001") <= 7
                                 416                                     report "Test STD_C.17.3 failing."
                                 417                                     severity FAILURE;
                                 418   
                                 419       assert UNSIGNED'("010") <= 2
                                 420                                  report "Test STD_C.17.5 failing."
                                 421                                  severity FAILURE;
                                 422       assert UNSIGNED'("00010010") <= 18
                                 423                                       report "Test STD_C.17.8 failing."
                                 424                                       severity FAILURE;
                                 425       assert UNSIGNED'("10") <= 2
                                 426                                 report "Test STD_C.17.9 failing."
                                 427                                 severity FAILURE;
                                 428   
                                 429       assert not (UNSIGNED'("110001") <= 34)
                                 430         report "Test STD_C.17.4 failing."
                                 431         severity FAILURE;
                                 432       assert not(UNSIGNED'("1111") <= 10)
                                 433         report "Test STD_C.17.6 test failing."
                                 434         severity FAILURE;
                                 435       assert not(UNSIGNED'("10001000") <= 3)
                                 436         report "Test STD_C.17.7 test failing."
                                 437         severity FAILURE;
                                 438   
                                 439       assert not(UNSIGNED'("110") <= 3)
                                 440         report "Test STD_C.17.10 failing."
                                 441         severity FAILURE;
                                 442       assert not(UNSIGNED'("10010010") <= 18)
                                 443         report "Test STD_C.17.11 failing."
                                 444         severity FAILURE;
                                 445       assert not(UNSIGNED'("110") <= 2)
                                 446         report "Test STD_C.17.12 failing."
                                 447         severity FAILURE;
                                 448   
                                 449       assert (UNSIGNED'("HHL") <= 10000)
                                 450         report "Test STD_C.17.13 failing."
                                 451         severity FAILURE;
                                 452       
           1 if                  453         assert not ( BNULL <= 0)
                                 454           report "Test STD_C.17.14 failing."
                                 455           severity FAILURE;
                                 456   
                                 457         assert not (UNSIGNED'("XUUZZ1WW0") <= 100)
                                 458           report "Test STD_C.17.15 failing."
                                 459           severity FAILURE;
                                 460       end if;
                                 461   
                                 462       
           0 implicit_else       452       if (not quiet) then
                                 453         
           1 reconvergence       462       assert quiet report "C.17 tests done" severity note;
                                 463   
                                 464   -- STD_C.18 tests
                                 465   
                                 466       assert SIGNED'("0001") <= 2
                                 467                                 report "Test STD_C.18.1 failing."
                                 468                                 severity FAILURE;
                                 469       assert SIGNED'("01") <= 10
                                 470                               report "Test STD_C.18.2 failing."
                                 471                               severity FAILURE;
                                 472       assert SIGNED'("100001") <= 7
                                 473                                   report "Test STD_C.18.3 failing."
                                 474                                   severity FAILURE;
                                 475       assert SIGNED'("111100") <= -4
                                 476                                   report "Test STD_C.18.15 failing."
                                 477                                   severity FAILURE;
                                 478       assert SIGNED'("111100") <= 28
                                 479                                   report "Test STD_C.18.16 failing."
                                 480                                   severity FAILURE;
                                 481   
                                 482       assert SIGNED'("010") <= 2
                                 483                                report "Test STD_C.18.5 failing."
                                 484                                severity FAILURE;
                                 485       assert SIGNED'("HLLLH0010") <= -14
                                 486                                      report "Test STD_C.18.8 failing."
                                 487                                      severity FAILURE;
                                 488       assert SIGNED'("10") <= 2
                                 489                               report "Test STD_C.18.9 failing."
                                 490                               severity FAILURE;
                                 491       assert SIGNED'("00") <= 0
                                 492                               report "Test STD_C.18.17 failing."
                                 493                               severity FAILURE;
                                 494       assert SIGNED'("11100001100") <= -0
                                 495                                        report "Test STD_C.18.18 failing."
                                 496                                        severity FAILURE;
                                 497   
                                 498       assert not (SIGNED'("110001") <= -30)
                                 499         report "Test STD_C.18.4 failing."
                                 500         severity FAILURE;
                                 501       assert not(SIGNED'("01111") <= +10)
                                 502         report "Test STD_C.18.6 test failing."
                                 503         severity FAILURE;
                                 504       assert not(SIGNED'("1100") <= -9)
                                 505         report "Test STD_C.18.7 test failing."
                                 506         severity FAILURE;
                                 507       assert not(SIGNED'("010001LLL") <= 3)
                                 508         report "Test STD_C.18.19 test failing."
                                 509         severity FAILURE;
                                 510   
                                 511       assert not(SIGNED'("0110") <= 3)
                                 512         report "Test STD_C.18.10 failing."
                                 513         severity FAILURE;
                                 514       assert not(SIGNED'("110") <= -15)
                                 515         report "Test STD_C.18.11 failing."
                                 516         severity FAILURE;
                                 517       assert not(SIGNED'("0110") <= 2)
                                 518         report "Test STD_C.18.12 failing."
                                 519         severity FAILURE;
                                 520       assert not(SIGNED'("00000110") <= 0)
                                 521         report "Test STD_C.18.20 failing."
                                 522         severity FAILURE;
                                 523   
                                 524       assert not (SIGNED'("0110") <= 0)
                                 525         report "Test STD_C.18.13 failing."
                                 526         severity FAILURE;
                                 527       
           1 if                  528         assert not (SIGNED'("110") <= -1000000)
                                 529           report "Test STD_C.18.14 failing."
                                 530           severity FAILURE;
                                 531   
                                 532         assert not (SIGNED'("-0XZZZZW0") <= 100)
                                 533           report "Test STD_C.18.21 failing."
                                 534           severity FAILURE;
                                 535       end if;
                                 536   
                                 537       
           0 implicit_else       527       if (not quiet) then
                                 528         
           1 reconvergence       537       assert quiet report "C.18 tests done" severity note;
                                 538   
                                 539   -- STD_C.15 tests
                                 540   
                                 541       assert 1 <= UNSIGNED'("0010")
                                 542                   report "Test STD_C.15.1 failing."
                                 543                   severity FAILURE;
                                 544       assert 1 <= UNSIGNED'("1LHL")
                                 545                   report "Test STD_C.15.2 failing."
                                 546                   severity FAILURE;
                                 547       assert 1 <= UNSIGNED'("111")
                                 548                   report "Test STD_C.15.3 failing."
                                 549                   severity FAILURE;
                                 550   
                                 551       assert 2 <= UNSIGNED'("010")
                                 552                   report "Test STD_C.15.5 failing."
                                 553                   severity FAILURE;
                                 554       assert 18 <= UNSIGNED'("10010")
                                 555                    report "Test STD_C.15.8 failing."
                                 556                    severity FAILURE;
                                 557       assert 2 <= UNSIGNED'("0010")
                                 558                   report "Test STD_C.15.9 failing."
                                 559                   severity FAILURE;
                                 560   
                                 561       assert not (49 <= UNSIGNED'("100010"))
                                 562         report "Test STD_C.15.4 failing."
                                 563         severity FAILURE;
                                 564       assert not(15 <= UNSIGNED'("0001010"))
                                 565         report "Test STD_C.15.6 test failing."
                                 566         severity FAILURE;
                                 567       assert not(151 <= UNSIGNED'("11"))
                                 568         report "Test STD_C.15.7 test failing."
                                 569         severity FAILURE;
                                 570   
                                 571       assert not(6 <= UNSIGNED'("0HH"))
                                 572         report "Test STD_C.15.10 failing."
                                 573         severity FAILURE;
                                 574       assert not(256 <= UNSIGNED'("10010"))
                                 575         report "Test STD_C.15.11 failing."
                                 576         severity FAILURE;
                                 577       assert not(6 <= UNSIGNED'("0010"))
                                 578         report "Test STD_C.15.12 failing."
                                 579         severity FAILURE;
                                 580   
                                 581       
           1 if                  582         assert not (8 <= BNULL)
                                 583           report "Test STD_C.15.13 failing."
                                 584           severity FAILURE;
                                 585       end if;
                                 586       
           0 implicit_else       581       if (not quiet) then
                                 582         
           1 reconvergence       586       assert not (3267 <= UNSIGNED'("111"))
                                 587         report "Test STD_C.15.14 failing."
                                 588         severity FAILURE;
                                 589   
                                 590       
           1 if                  591         assert not (256 <= UNSIGNED'("-L"))
                                 592           report "Test STD_C.15.15 failing."
                                 593           severity FAILURE;
                                 594       end if;
                                 595   
                                 596       
           0 implicit_else       590       if (not quiet) then
                                 591         
           1 reconvergence       596       assert quiet report "C.15 tests done" severity note;
                                 597   
                                 598   -- STD_C.16 tests:
                                 599   
                                 600       assert 1 <= SIGNED'("0010")
                                 601                   report "Test STD_C.16.1 failing."
                                 602                   severity FAILURE;
                                 603       assert 8 <= SIGNED'("LHLH0")
                                 604                   report "Test STD_C.16.2 failing."
                                 605                   severity FAILURE;
                                 606       assert 1 <= SIGNED'("0111")
                                 607                   report "Test STD_C.16.3 failing."
                                 608                   severity FAILURE;
                                 609       assert -4 <= SIGNED'("11100")
                                 610                    report "Test STD_C.16.15 failing."
                                 611                    severity FAILURE;
                                 612       assert -4 <= SIGNED'("011100")
                                 613                    report "Test STD_C.16.16 failing."
                                 614                    severity FAILURE;
                                 615   
                                 616       assert 2 <= SIGNED'("010")
                                 617                   report "Test STD_C.16.5 failing."
                                 618                   severity FAILURE;
                                 619       assert -14 <= SIGNED'("10010")
                                 620                     report "Test STD_C.16.8 failing."
                                 621                     severity FAILURE;
                                 622       assert -2 <= SIGNED'("0010")
                                 623                    report "Test STD_C.16.9 failing."
                                 624                    severity FAILURE;
                                 625       assert 0 <= SIGNED'("0000")
                                 626                   report "Test STD_C.16.17 failing."
                                 627                   severity FAILURE;
                                 628       assert -2048 <= SIGNED'("0000")
                                 629                       report "Test STD_C.16.18 failing."
                                 630                       severity FAILURE;
                                 631   
                                 632       assert not (-15 <= SIGNED'("100010"))
                                 633         report "Test STD_C.16.4 failing."
                                 634         severity FAILURE;
                                 635       assert not(1 <= SIGNED'("10001010"))
                                 636         report "Test STD_C.16.6 test failing."
                                 637         severity FAILURE;
                                 638       assert not(-345 <= SIGNED'("H00L1L00111"))
                                 639         report "Test STD_C.16.7 test failing."
                                 640         severity FAILURE;
                                 641       assert not(-1024 <= SIGNED'("1000000111111"))
                                 642         report "Test STD_C.16.19 test failing."
                                 643         severity FAILURE;
                                 644   
                                 645       assert not(-2 <= SIGNED'("1000011"))
                                 646         report "Test STD_C.16.10 failing."
                                 647         severity FAILURE;
                                 648       assert not(-63 <= SIGNED'("10000010"))
                                 649         report "Test STD_C.16.11 failing."
                                 650         severity FAILURE;
                                 651       assert not(-2 <= SIGNED'("HLHL"))
                                 652         report "Test STD_C.16.12 failing."
                                 653         severity FAILURE;
                                 654       assert not(0 <= SIGNED'("1000"))
                                 655         report "Test STD_C.16.20 failing."
                                 656         severity FAILURE;
                                 657   
                                 658       
           1 if                  659         assert not (-7 <= SBNULL)
                                 660           report "Test STD_C.16.13 failing."
                                 661           severity FAILURE;
                                 662       end if;
                                 663       
           0 implicit_else       658       if (not quiet) then
                                 659         
           1 reconvergence       663       assert not (-6457 <= SIGNED'("100000000000000010"))
                                 664         report "Test STD_C.16.14 failing."
                                 665         severity FAILURE;
                                 666   
                                 667       
           1 if                  668         assert not (256 <= SIGNED'("HX"))
                                 669           report "Test STD_C.16.21 failing."
                                 670           severity FAILURE;
                                 671       end if;
                                 672   
                                 673       
           0 implicit_else       667       if (not quiet) then
                                 668         
           1 reconvergence       673       assert quiet report "C.16 tests done" severity note;
                                 674   
                                 675   -- STD_C.19 tests:
                                 676       assert UNSIGNED'("0010") >= UNSIGNED'("0LL1")
                                 677         report "Test STD_C.19.1 failing."
                                 678         severity FAILURE;
                                 679       assert UNSIGNED'("1010") >= UNSIGNED'("01")
                                 680         report "Test STD_C.19.2 failing."
                                 681         severity FAILURE;
                                 682       assert UNSIGNED'("111") >= UNSIGNED'("00000H")
                                 683         report "Test STD_C.19.3 failing."
                                 684         severity FAILURE;
                                 685   
                                 686       assert UNSIGNED'("010") >= UNSIGNED'("010")
                                 687         report "Test STD_C.19.5 failing."
                                 688         severity FAILURE;
                                 689       assert UNSIGNED'("10010") >= UNSIGNED'("00010010")
                                 690         report "Test STD_C.19.8 failing."
                                 691         severity FAILURE;
                                 692       assert UNSIGNED'("0010") >= UNSIGNED'("HL")
                                 693         report "Test STD_C.19.9 failing."
                                 694         severity FAILURE;
                                 695   
                                 696       assert not (UNSIGNED'("100010") >= UNSIGNED'("110001"))
                                 697         report "Test STD_C.19.4 failing."
                                 698         severity FAILURE;
                                 699       assert not(UNSIGNED'("0001010") >= UNSIGNED'("1111"))
                                 700         report "Test STD_C.19.6 test failing."
                                 701         severity FAILURE;
                                 702       assert not(UNSIGNED'("11") >= UNSIGNED'("10001000"))
                                 703         report "Test STD_C.19.7 test failing."
                                 704         severity FAILURE;
                                 705   
                                 706       assert not(UNSIGNED'("011") >= UNSIGNED'("110"))
                                 707         report "Test STD_C.19.10 failing."
                                 708         severity FAILURE;
                                 709       assert not(UNSIGNED'("10010") >= UNSIGNED'("10010010"))
                                 710         report "Test STD_C.19.11 failing."
                                 711         severity FAILURE;
                                 712       assert not(UNSIGNED'("0010") >= UNSIGNED'("110"))
                                 713         report "Test STD_C.19.12 failing."
                                 714         severity FAILURE;
                                 715   
                                 716       
           1 if                  717         assert not (BNULL >= UNSIGNED'("110"))
                                 718           report "Test STD_C.19.13 failing."
                                 719           severity FAILURE;
                                 720         assert not (ANULL >= BNULL)
                                 721           report "Test STD_C.19.14 failing."
                                 722           severity FAILURE;
                                 723       end if;
                                 724   
                                 725       
           0 implicit_else       716       if (not quiet) then
                                 717         
           1 if                  726         assert not (UNSIGNED'("10X0") >= UNSIGNED'("10001"))
                                 727           report "Test STD_C.19.15 failing."
                                 728           severity FAILURE;
                                 729         assert not (UNSIGNED'("100") >= UNSIGNED'("1HHHLLXX0"))
                                 730           report "Test STD_C.19.16 failing."
                                 731           severity FAILURE;
                                 732       end if;
                                 733   
                                 734       
           0 implicit_else       725       if (not quiet) then
                                 726         
           1 reconvergence       734       assert quiet report "C.19 tests done" severity note;
                                 735   
                                 736   --STD_C.20 tests:
                                 737   
                                 738       assert SIGNED'("0010") >= SIGNED'("0001")
                                 739         report "Test STD_C.20.1 failing."
                                 740         severity FAILURE;
                                 741       assert SIGNED'("01010") >= SIGNED'("01")
                                 742         report "Test STD_C.20.2 failing."
                                 743         severity FAILURE;
                                 744       assert SIGNED'("0111") >= SIGNED'("000001")
                                 745         report "Test STD_C.20.3 failing."
                                 746         severity FAILURE;
                                 747       assert SIGNED'("11100") >= SIGNED'("HHHHLL")
                                 748         report "Test STD_C.20.15 failing."
                                 749         severity FAILURE;
                                 750       assert SIGNED'("011100") >= SIGNED'("111100")
                                 751         report "Test STD_C.20.16 failing."
                                 752         severity FAILURE;
                                 753   
                                 754       assert SIGNED'("010") >= SIGNED'("010")
                                 755         report "Test STD_C.20.5 failing."
                                 756         severity FAILURE;
                                 757       assert SIGNED'("111110010") >= SIGNED'("10000010")
                                 758         report "Test STD_C.20.8 failing."
                                 759         severity FAILURE;
                                 760       assert SIGNED'("0010") >= SIGNED'("10")
                                 761         report "Test STD_C.20.9 failing."
                                 762         severity FAILURE;
                                 763       assert SIGNED'("0000") >= SIGNED'("00")
                                 764         report "Test STD_C.20.17 failing."
                                 765         severity FAILURE;
                                 766       assert SIGNED'("0000") >= SIGNED'("11100001100")
                                 767         report "Test STD_C.20.18 failing."
                                 768         severity FAILURE;
                                 769   
                                 770       assert not (SIGNED'("100010") >= SIGNED'("110001"))
                                 771         report "Test STD_C.20.4 failing."
                                 772         severity FAILURE;
                                 773       assert not(SIGNED'("1001010") >= SIGNED'("1111"))
                                 774         report "Test STD_C.20.6 test failing."
                                 775         severity FAILURE;
                                 776       assert not(SIGNED'("10001000") >= SIGNED'("11"))
                                 777         report "Test STD_C.20.7 test failing."
                                 778         severity FAILURE;
                                 779       assert not(SIGNED'("HLLLHLLL") >= SIGNED'("0110"))
                                 780         report "Test STD_C.20.19 test failing."
                                 781         severity FAILURE;
                                 782   
                                 783       assert not(SIGNED'("110") >= SIGNED'("010"))
                                 784         report "Test STD_C.20.10 failing."
                                 785         severity FAILURE;
                                 786       assert not(SIGNED'("100100010") >= SIGNED'("1001"))
                                 787         report "Test STD_C.20.11 failing."
                                 788         severity FAILURE;
                                 789       assert not(SIGNED'("10010") >= SIGNED'("110"))
                                 790         report "Test STD_C.20.12 failing."
                                 791         severity FAILURE;
                                 792       assert not(SIGNED'("0000") >= SIGNED'("00000110"))
                                 793         report "Test STD_C.20.20 failing."
                                 794         severity FAILURE;
                                 795   
                                 796       
           1 if                  797         assert not (SBNULL >= SIGNED'("110"))
                                 798           report "Test STD_C.20.13 failing."
                                 799           severity FAILURE;
                                 800         assert not (SANULL >= SBNULL)
                                 801           report "Test STD_C.20.14 failing."
                                 802           severity FAILURE;
                                 803       end if;
                                 804   
                                 805       
           0 implicit_else       796       if (not quiet) then
                                 797         
           1 if                  806         assert not (SIGNED'("1HX-") >= SIGNED'("10001"))
                                 807           report "Test STD_C.20.21 failing."
                                 808           severity FAILURE;
                                 809         assert not (SIGNED'("100") >= SIGNED'("1-------0"))
                                 810           report "Test STD_C.20.22 failing."
                                 811           severity FAILURE;
                                 812       end if;
                                 813   
                                 814       
           0 implicit_else       805       if (not quiet) then
                                 806         
           1 reconvergence       814       assert quiet report "C.20 tests done" severity note;
                                 815   
                                 816   -- STD_C.21 tests
                                 817   
                                 818       assert 2 >= UNSIGNED'("0001")
                                 819         report "Test STD_C.21.1 failing."
                                 820         severity FAILURE;
                                 821       assert 10 >= UNSIGNED'("01")
                                 822         report "Test STD_C.21.2 failing."
                                 823         severity FAILURE;
                                 824       assert 7 >= UNSIGNED'("000001")
                                 825         report "Test STD_C.21.3 failing."
                                 826         severity FAILURE;
                                 827   
                                 828       assert 2 >= UNSIGNED'("010")
                                 829         report "Test STD_C.21.5 failing."
                                 830         severity FAILURE;
                                 831       assert 18 >= UNSIGNED'("00010010")
                                 832         report "Test STD_C.21.8 failing."
                                 833         severity FAILURE;
                                 834       assert 2 >= UNSIGNED'("HL")
                                 835         report "Test STD_C.21.9 failing."
                                 836         severity FAILURE;
                                 837   
                                 838       assert not (34 >= UNSIGNED'("110001"))
                                 839         report "Test STD_C.21.4 failing."
                                 840         severity FAILURE;
                                 841       assert not(10 >= UNSIGNED'("1111"))
                                 842         report "Test STD_C.21.6 test failing."
                                 843         severity FAILURE;
                                 844       assert not(3 >= UNSIGNED'("10001000"))
                                 845         report "Test STD_C.21.7 test failing."
                                 846         severity FAILURE;
                                 847   
                                 848       assert not(3 >= UNSIGNED'("110"))
                                 849         report "Test STD_C.21.10 failing."
                                 850         severity FAILURE;
                                 851       assert not(18 >= UNSIGNED'("10010010"))
                                 852         report "Test STD_C.21.11 failing."
                                 853         severity FAILURE;
                                 854       assert not(2 >= UNSIGNED'("110"))
                                 855         report "Test STD_C.21.12 failing."
                                 856         severity FAILURE;
                                 857   
                                 858       assert (10000 >= UNSIGNED'("110"))
                                 859         report "Test STD_C.21.13 failing."
                                 860         severity FAILURE;
                                 861       
           1 if                  862         assert not ( 0 >= BNULL)
                                 863           report "Test STD_C.21.14 failing."
                                 864           severity FAILURE;
                                 865       end if;
                                 866   
                                 867       
           0 implicit_else       861       if (not quiet) then
                                 862         
           1 if                  868         assert not (100 >= UNSIGNED'("XUUZZ1WW0"))
                                 869           report "Test STD_C.21.15 failing."
                                 870           severity FAILURE;
                                 871       end if;
                                 872   
                                 873       
           0 implicit_else       867       if (not quiet) then
                                 868         
           1 reconvergence       873       assert quiet report "C.21 tests done" severity note;
                                 874   
                                 875   -- STD_C.22 tests
                                 876   
                                 877       assert 2 >= SIGNED'("LLLH")
                                 878         report "Test STD_C.22.1 failing."
                                 879         severity FAILURE;
                                 880       assert 10 >= SIGNED'("01")
                                 881         report "Test STD_C.22.2 failing."
                                 882         severity FAILURE;
                                 883       assert 7 >= SIGNED'("100001")
                                 884         report "Test STD_C.22.3 failing."
                                 885         severity FAILURE;
                                 886       assert -4 >= SIGNED'("111100")
                                 887         report "Test STD_C.22.15 failing."
                                 888         severity FAILURE;
                                 889       assert 28 >= SIGNED'("111100")
                                 890         report "Test STD_C.22.16 failing."
                                 891         severity FAILURE;
                                 892   
                                 893       assert 2 >= SIGNED'("010")
                                 894         report "Test STD_C.22.5 failing."
                                 895         severity FAILURE;
                                 896       assert -14 >= SIGNED'("100010010")
                                 897         report "Test STD_C.22.8 failing."
                                 898         severity FAILURE;
                                 899       assert 2 >= SIGNED'("10")
                                 900         report "Test STD_C.22.9 failing."
                                 901         severity FAILURE;
                                 902       assert 0 >= SIGNED'("00")
                                 903         report "Test STD_C.22.17 failing."
                                 904         severity FAILURE;
                                 905       assert -0 >= SIGNED'("11100001100")
                                 906         report "Test STD_C.22.18 failing."
                                 907         severity FAILURE;
                                 908   
                                 909       assert not (-30 >= SIGNED'("110001"))
                                 910         report "Test STD_C.22.4 failing."
                                 911         severity FAILURE;
                                 912       assert not(+10 >= SIGNED'("01111"))
                                 913         report "Test STD_C.22.6 test failing."
                                 914         severity FAILURE;
                                 915       assert not(-9 >= SIGNED'("1100"))
                                 916         report "Test STD_C.22.7 test failing."
                                 917         severity FAILURE;
                                 918       assert not(3 >= SIGNED'("010001000"))
                                 919         report "Test STD_C.22.19 test failing."
                                 920         severity FAILURE;
                                 921   
                                 922       assert not(3 >= SIGNED'("LHHL"))
                                 923         report "Test STD_C.22.10 failing."
                                 924         severity FAILURE;
                                 925       assert not(-15 >= SIGNED'("110"))
                                 926         report "Test STD_C.22.11 failing."
                                 927         severity FAILURE;
                                 928       assert not(2 >= SIGNED'("0110"))
                                 929         report "Test STD_C.22.12 failing."
                                 930         severity FAILURE;
                                 931       assert not(0 >= SIGNED'("00000110"))
                                 932         report "Test STD_C.22.20 failing."
                                 933         severity FAILURE;
                                 934   
                                 935       assert not (0 >= SIGNED'("0110"))
                                 936         report "Test STD_C.22.13 failing."
                                 937         severity FAILURE;
                                 938       assert not (-1000000 >= SIGNED'("110"))
                                 939         report "Test STD_C.22.14 failing."
                                 940         severity FAILURE;
                                 941   
                                 942       
           1 if                  943         assert not (100 >= SIGNED'("-0XZZZZW0"))
                                 944           report "Test STD_C.22.21 failing."
                                 945           severity FAILURE;
                                 946       end if;
                                 947   
                                 948       
           0 implicit_else       942       if (not quiet) then
                                 943         
           1 reconvergence       948       assert quiet report "C.22 tests done" severity note;
                                 949   
                                 950   -- STD_C.23 tests
                                 951   
                                 952       assert UNSIGNED'("0010") >= 1
                                 953         report "Test STD_C.23.1 failing."
                                 954         severity FAILURE;
                                 955       assert UNSIGNED'("1010") >= 1
                                 956         report "Test STD_C.23.2 failing."
                                 957         severity FAILURE;
                                 958       assert UNSIGNED'("111") >= 1
                                 959         report "Test STD_C.23.3 failing."
                                 960         severity FAILURE;
                                 961   
                                 962       assert UNSIGNED'("010") >= 2
                                 963         report "Test STD_C.23.5 failing."
                                 964         severity FAILURE;
                                 965       assert UNSIGNED'("10010") >= 18
                                 966         report "Test STD_C.23.8 failing."
                                 967         severity FAILURE;
                                 968       assert UNSIGNED'("0010") >= 2
                                 969         report "Test STD_C.23.9 failing."
                                 970         severity FAILURE;
                                 971   
                                 972       assert not (UNSIGNED'("100010") >= 49)
                                 973         report "Test STD_C.23.4 failing."
                                 974         severity FAILURE;
                                 975       assert not(UNSIGNED'("0001010") >= 15)
                                 976         report "Test STD_C.23.6 test failing."
                                 977         severity FAILURE;
                                 978       assert not(UNSIGNED'("11") >= 151)
                                 979         report "Test STD_C.23.7 test failing."
                                 980         severity FAILURE;
                                 981   
                                 982       assert not(UNSIGNED'("LHH") >= 6)
                                 983         report "Test STD_C.23.10 failing."
                                 984         severity FAILURE;
                                 985       assert not(UNSIGNED'("10010") >= 256)
                                 986         report "Test STD_C.23.11 failing."
                                 987         severity FAILURE;
                                 988       assert not(UNSIGNED'("0010") >= 6)
                                 989         report "Test STD_C.23.12 failing."
                                 990         severity FAILURE;
                                 991   
                                 992       
           1 if                  993         assert not (BNULL >= 8)
                                 994           report "Test STD_C.23.13 failing."
                                 995           severity FAILURE;
                                 996       end if;
                                 997       
           0 implicit_else       992       if (not quiet) then
                                 993         
           1 reconvergence       997       assert not (UNSIGNED'("111") >= 3267)
                                 998         report "Test STD_C.23.14 failing."
                                 999         severity FAILURE;
                                1000   
                                1001       
           1 if                 1002         assert not (UNSIGNED'("-L") >= 256)
                                1003           report "Test STD_C.23.15 failing."
                                1004           severity FAILURE;
                                1005       end if;
                                1006   
                                1007       
           0 implicit_else      1001       if (not quiet) then
                                1002         
           1 reconvergence      1007       assert quiet report "C.23 tests done" severity note;
                                1008   
                                1009   -- STD_C.24 tests:
                                1010   
                                1011       assert SIGNED'("0010") >= 1
                                1012         report "Test STD_C.24.1 failing."
                                1013         severity FAILURE;
                                1014       assert SIGNED'("01010") >= 8
                                1015         report "Test STD_C.24.2 failing."
                                1016         severity FAILURE;
                                1017       assert SIGNED'("0111") >= 1
                                1018         report "Test STD_C.24.3 failing."
                                1019         severity FAILURE;
                                1020       assert SIGNED'("HHHLL") >= -4
                                1021         report "Test STD_C.24.15 failing."
                                1022         severity FAILURE;
                                1023       assert SIGNED'("011100") >= -4
                                1024         report "Test STD_C.24.16 failing."
                                1025         severity FAILURE;
                                1026   
                                1027       assert SIGNED'("010") >= 2
                                1028         report "Test STD_C.24.5 failing."
                                1029         severity FAILURE;
                                1030       assert SIGNED'("10010") >= -14
                                1031         report "Test STD_C.24.8 failing."
                                1032         severity FAILURE;
                                1033       assert SIGNED'("0010") >= -2
                                1034         report "Test STD_C.24.9 failing."
                                1035         severity FAILURE;
                                1036       assert SIGNED'("0000") >= 0
                                1037         report "Test STD_C.24.17 failing."
                                1038         severity FAILURE;
                                1039       assert SIGNED'("0000") >= -2048
                                1040         report "Test STD_C.24.18 failing."
                                1041         severity FAILURE;
                                1042   
                                1043       assert not (SIGNED'("HLLLHL") >= -15)
                                1044         report "Test STD_C.24.4 failing."
                                1045         severity FAILURE;
                                1046       assert not(SIGNED'("10001010") >= 1)
                                1047         report "Test STD_C.24.6 test failing."
                                1048         severity FAILURE;
                                1049       assert not(SIGNED'("10011100111") >= -345)
                                1050         report "Test STD_C.24.7 test failing."
                                1051         severity FAILURE;
                                1052       assert not(SIGNED'("1000000111111") >= -1024)
                                1053         report "Test STD_C.24.19 test failing."
                                1054         severity FAILURE;
                                1055   
                                1056       assert not(SIGNED'("1000011") >= -2)
                                1057         report "Test STD_C.24.10 failing."
                                1058         severity FAILURE;
                                1059       assert not(SIGNED'("10000010") >= -63)
                                1060         report "Test STD_C.24.11 failing."
                                1061         severity FAILURE;
                                1062       assert not(SIGNED'("HLHL") >= -2)
                                1063         report "Test STD_C.24.12 failing."
                                1064         severity FAILURE;
                                1065       assert not(SIGNED'("1000") >= 0)
                                1066         report "Test STD_C.24.20 failing."
                                1067         severity FAILURE;
                                1068   
                                1069       
           1 if                 1070         assert not (SBNULL >= -7)
                                1071           report "Test STD_C.24.13 failing."
                                1072           severity FAILURE;
                                1073       end if;
                                1074       
           0 implicit_else      1069       if (not quiet) then
                                1070         
           1 reconvergence      1074       assert not (SIGNED'("1000000000000000H0") >= -6457)
                                1075         report "Test STD_C.24.14 failing."
                                1076         severity FAILURE;
                                1077   
                                1078       
           1 if                 1079         assert not (SIGNED'("HX") >= 256)
                                1080           report "Test STD_C.24.21 failing."
                                1081           severity FAILURE;
                                1082       end if;
                                1083   
                                1084       
           0 implicit_else      1078       if (not quiet) then
                                1079         
           1 reconvergence      1084       assert quiet report "C.24 tests done" severity note;
                                1085   
                                1086   
                                1087   --  ************************************************
                                1088   --  ************************************************
                                1089   -- r.1, r.2 tests from Bob Flatt ::::::
                                1090       -- r.1 tests:
                                1091       
                                1092       assert RESIZE(SIGNED'("0001") , 0)'length = 0
                                1093         report "Test r.1.1 failing."
                                1094         severity FAILURE;
                                1095       assert RESIZE(SIGNED'("0001") , 1) = "0" 
                                1096         report "Test r.1.2 failing."
                                1097         severity FAILURE;
                                1098       assert RESIZE(SIGNED'("0001") , 2) = "01"
                                1099         report "Test r.1.3 failing."
                                1100         severity FAILURE;
                                1101       assert RESIZE(SIGNED'("0001") , 3) = "001"
                                1102         report "Test r.1.4 failing."
                                1103         severity FAILURE;
                                1104       assert RESIZE(SIGNED'("0001") , 4) = "0001"
                                1105         report "Test r.1.5 failing."
                                1106         severity FAILURE;
                                1107       assert RESIZE(SIGNED'("0001") , 5) = "00001"
                                1108         report "Test r.1.6 failing."
                                1109         severity FAILURE;
                                1110       assert RESIZE(SIGNED'("0001") , 6) = "000001"
                                1111         report "Test r.1.7 failing."
                                1112         severity FAILURE;
                                1113   
                                1114       assert RESIZE(SIGNED'("1001") , 1) = "1"
                                1115         report "Test r.1.8 failing."
                                1116         severity FAILURE;
                                1117       assert RESIZE(SIGNED'("1001") , 2) = "11"
                                1118         report "Test r.1.9 failing."
                                1119         severity FAILURE;
                                1120       assert RESIZE(SIGNED'("1001") , 3) = "101"
                                1121         report "Test r.1.10 failing."
                                1122         severity FAILURE;
                                1123       assert RESIZE(SIGNED'("1001") , 4) = "1001"
                                1124         report "Test r.1.11 failing."
                                1125         severity FAILURE;
                                1126       assert RESIZE(SIGNED'("1001") , 5) = "11001"
                                1127         report "Test r.1.12 failing."
                                1128         severity FAILURE;
                                1129       assert RESIZE(SIGNED'("1001") , 6) = "111001"
                                1130         report "Test r.1.13 failing."
                                1131         severity FAILURE;
                                1132   
                                1133       assert RESIZE(SIGNED'("0101") , 1) = "0"
                                1134         report "Test r.1.14 failing."
                                1135         severity FAILURE;
                                1136       assert RESIZE(SIGNED'("0101") , 2) = "01"
                                1137         report "Test r.1.15 failing."
                                1138         severity FAILURE;
                                1139       assert RESIZE(SIGNED'("0101") , 3) = "001"  
                                1140         report "Test r.1.16 failing."
                                1141         severity FAILURE;
                                1142       assert RESIZE(SIGNED'("0101") , 4) = "0101"
                                1143         report "Test r.1.17 failing."
                                1144         severity FAILURE;
                                1145       assert RESIZE(SIGNED'("0101") , 5) = "00101"
                                1146         report "Test r.1.18 failing."
                                1147         severity FAILURE;
                                1148       assert RESIZE(SIGNED'("0101") , 6) = "000101"
                                1149         report "Test r.1.19 failing."
                                1150         severity FAILURE;
                                1151   
                                1152       
           1 if                 1153         assert RESIZE(SANULL , 0)'length = 0
                                1154           report "Test r.1.20 failing."
                                1155           severity FAILURE;
                                1156         assert RESIZE(SANULL , 1) = "0"     
                                1157           report "Test r.1.21 failing."
                                1158           severity FAILURE;
                                1159         assert RESIZE(SANULL , 2) = "00"
                                1160           report "Test r.1.22 failing."
                                1161           severity FAILURE;
                                1162       end if;
                                1163   
                                1164       
           0 implicit_else      1152       if (not quiet) then
                                1153         
           1 reconvergence      1164       assert RESIZE(SIGNED'("0") , 0)'length = 0
                                1165         report "Test r.1.23 failing."
                                1166         severity FAILURE;
                                1167       assert RESIZE(SIGNED'("0") , 1) = "0"    
                                1168         report "Test r.1.24 failing."
                                1169         severity FAILURE;
                                1170       assert RESIZE(SIGNED'("0") , 2) = "00"
                                1171         report "Test r.1.25 failing."
                                1172         severity FAILURE;
                                1173       assert RESIZE(SIGNED'("1") , 1) = "1"    
                                1174         report "Test r.1.26 failing."
                                1175         severity FAILURE;
                                1176       assert RESIZE(SIGNED'("1") , 2) = "11"
                                1177         report "Test r.1.27 failing."
                                1178         severity FAILURE;
                                1179   
                                1180       assert quiet report "R.1 tests done" severity note;
                                1181   
                                1182       -- r.2 tests:
                                1183   
                                1184       assert RESIZE(UNSIGNED'("0001") , 0)'length = 0
                                1185         report "Test r.2.1 failing."
                                1186         severity FAILURE;
                                1187       assert RESIZE(UNSIGNED'("0001") , 1) = "1"
                                1188         report "Test r.2.2 failing."
                                1189         severity FAILURE;
                                1190       assert RESIZE(UNSIGNED'("0001") , 2) = "01"
                                1191         report "Test r.2.3 failing."
                                1192         severity FAILURE;
                                1193       assert RESIZE(UNSIGNED'("0001") , 3) = "001"
                                1194         report "Test r.2.4 failing."
                                1195         severity FAILURE;
                                1196       assert RESIZE(UNSIGNED'("0001") , 4) = "0001"
                                1197         report "Test r.2.5 failing."
                                1198         severity FAILURE;
                                1199       assert RESIZE(UNSIGNED'("0001") , 5) = "00001"
                                1200         report "Test r.2.6 failing."
                                1201         severity FAILURE;
                                1202       assert RESIZE(UNSIGNED'("0001") , 6) = "000001"
                                1203         report "Test r.2.7 failing."
                                1204         severity FAILURE;
                                1205   
                                1206       assert RESIZE(UNSIGNED'("1001") , 1) = "1"
                                1207         report "Test r.2.8 failing."
                                1208         severity FAILURE;
                                1209       assert RESIZE(UNSIGNED'("1001") , 2) = "01"
                                1210         report "Test r.2.9 failing."
                                1211         severity FAILURE;
                                1212       assert RESIZE(UNSIGNED'("1001") , 3) = "001"
                                1213         report "Test r.2.10 failing."
                                1214         severity FAILURE;
                                1215       assert RESIZE(UNSIGNED'("1001") , 4) = "1001"
                                1216         report "Test r.2.11 failing."
                                1217         severity FAILURE;
                                1218       assert RESIZE(UNSIGNED'("1001") , 5) = "01001"
                                1219         report "Test r.2.12 failing."
                                1220         severity FAILURE;
                                1221       assert RESIZE(UNSIGNED'("1001") , 6) = "001001"
                                1222         report "Test r.2.13 failing."
                                1223         severity FAILURE;
                                1224   
                                1225       assert RESIZE(UNSIGNED'("0101") , 1) = "1"
                                1226         report "Test r.2.14 failing."
                                1227         severity FAILURE;
                                1228       assert RESIZE(UNSIGNED'("0101") , 2) = "01"
                                1229         report "Test r.2.15 failing."
                                1230         severity FAILURE;
                                1231       assert RESIZE(UNSIGNED'("0101") , 3) = "101"
                                1232         report "Test r.2.16 failing."
                                1233         severity FAILURE;
                                1234       assert RESIZE(UNSIGNED'("0101") , 4) = "0101"
                                1235         report "Test r.2.17 failing."
                                1236         severity FAILURE;
                                1237       assert RESIZE(UNSIGNED'("0101") , 5) = "00101"
                                1238         report "Test r.2.18 failing."
                                1239         severity FAILURE;
                                1240       assert RESIZE(UNSIGNED'("0101") , 6) = "000101"
                                1241         report "Test r.2.19 failing."
                                1242         severity FAILURE;
                                1243   
                                1244       
           1 if                 1245         assert RESIZE(ANULL , 0)'length = 0
                                1246           report "Test r.2.20 failing."
                                1247           severity FAILURE;
                                1248         assert RESIZE(ANULL , 1) = "0"    
                                1249           report "Test r.2.21 failing."
                                1250           severity FAILURE;
                                1251         assert RESIZE(ANULL , 2) = "00"
                                1252           report "Test r.2.22 failing."
                                1253           severity FAILURE;
                                1254       end if;
                                1255   
                                1256       
           0 implicit_else      1244       if (not quiet) then
                                1245         
           1 reconvergence      1256       assert RESIZE(UNSIGNED'("0") , 0)'length = 0
                                1257         report "Test r.2.23 failing."
                                1258         severity FAILURE;
                                1259       assert RESIZE(UNSIGNED'("0") , 1) = "0"    
                                1260         report "Test r.2.24 failing."
                                1261         severity FAILURE;
                                1262       assert RESIZE(UNSIGNED'("0") , 2) = "00"
                                1263         report "Test r.2.25 failing."
                                1264         severity FAILURE;
                                1265       assert RESIZE(UNSIGNED'("1") , 1) = "1"    
                                1266         report "Test r.2.26 failing."
                                1267         severity FAILURE;
                                1268       assert RESIZE(UNSIGNED'("1") , 2) = "01"
                                1269         report "Test r.2.27 failing."
                                1270         severity FAILURE;
                                1271   
                                1272   -- end of r.1, r.2 tests from Bob Flatt.
                                1273   
                                1274       assert quiet report "R.2 tests done" severity note;
                                1275   
                                1276   --  ************************************************
                                1277   --  ************************************************
                                1278   --  ************************************************
                                1279   --  ************************************************
                                1280   --  ************************************************
                                1281   --  ************************************************
                                1282   
                                1283       assert FALSE
                                1284         report "END OF TESTS"
                                1285         severity note;
                                1286   
                                1287       wait;
                                1288     end process
