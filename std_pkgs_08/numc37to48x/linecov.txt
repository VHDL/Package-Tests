
Line coverage for $root.$pkgs.not_ieee.numeric_std:

Coverage for source: /project/dsim/kcampbell/superp/source/dsim/../../test/dsim/vh_tests/std_pkgs/not_ieee/2008/numeric_std-body.vhdl

           0 if                  338                              return NAS;
                                 339       end if;
                                 340       
           0 implicit_else       338       if ARG'length < 1 then 
           0 reconvergence       340       RESULT := TO_01(XARG, 'X');
                                 341       
           0 if                  341                                           return RESULT;
                                 342       end if;
                                 343       
           0 implicit_else       341       if (RESULT(RESULT'left) = 'X') then 
           0 if                  344         RESULT := -RESULT;
                                 345       end if;
                                 346       
           0 implicit_else       343       if RESULT(RESULT'left) = '1' then
                                 344         
           0 reconvergence       346       return RESULT;
                                 347     end function "abs"
           0 if                  355                              return NAS;
                                 356       end if;
                                 357       
           1 implicit_else       355       if ARG'length < 1 then 
           1 reconvergence       357       XARG01 := TO_01(ARG, 'X');
                                 358       
           1 if                  358                                           return XARG01;
                                 359       end if;
                                 360       
           0 implicit_else       358       if (XARG01(XARG01'left) = 'X') then 
           0 reconvergence       360       for I in 0 to RESULT'left loop
                                 361         
           0 loop_body           361         RESULT(I) := not(XARG01(I)) xor CBIT;
                                 362         CBIT      := CBIT and not(XARG01(I));
                                 363       end loop;
                                 364       
           0 reconvergence       364       return RESULT;
                                 365     end function "-"
           0 if                  375                                                  return NAU;
                                 376       end if;
                                 377       
           6 implicit_else       375       if ((L'length < 1) or (R'length < 1)) then 
           6 reconvergence       377       L01 := TO_01(RESIZE(L, SIZE), 'X');
                                 378       
           0 if                  378                                     return L01;
                                 379       end if;
                                 380       
           6 implicit_else       378       if (L01(L01'left) = 'X') then 
           6 reconvergence       380       R01 := TO_01(RESIZE(R, SIZE), 'X');
                                 381       
           0 if                  381                                     return R01;
                                 382       end if;
                                 383       
           6 implicit_else       381       if (R01(R01'left) = 'X') then 
           6 reconvergence       383       return ADD_UNSIGNED(L01, R01, '0');
                                 384     end function "+"
           3 sequence            392       XR(0) := R;
                                 393       return (L + XR);
                                 394     end function "+"
           3 sequence            402       XL(0) := L;
                                 403       return (XL + R);
                                 404     end function "+"
           0 if                  412                                                  return NAS;
                                 413       end if;
                                 414       
           6 implicit_else       412       if ((L'length < 1) or (R'length < 1)) then 
           6 reconvergence       414       L01 := TO_01(RESIZE(L, SIZE), 'X');
                                 415       
           0 if                  415                                     return L01;
                                 416       end if;
                                 417       
           6 implicit_else       415       if (L01(L01'left) = 'X') then 
           6 reconvergence       417       R01 := TO_01(RESIZE(R, SIZE), 'X');
                                 418       
           0 if                  418                                     return R01;
                                 419       end if;
                                 420       
           6 implicit_else       418       if (R01(R01'left) = 'X') then 
           6 reconvergence       420       return ADD_SIGNED(L01, R01, '0');
                                 421     end function "+"
           4 sequence            429       XR(0) := R;
                                 430       return (L + XR);
                                 431     end function "+"
           2 sequence            439       XL(0) := L;
                                 440       return (XL + R);
                                 441     end function "+"
           0 sequence            447       return L + TO_UNSIGNED(R, L'length);
                                 448     end function "+"
           0 sequence            454       return TO_UNSIGNED(L, R'length) + R;
                                 455     end function "+"
           0 sequence            468       return TO_SIGNED(L, R'length) + R;
                                 469     end function "+"
           0 sequence            461       return L + TO_SIGNED(R, L'length);
                                 462     end function "+"
           0 if                  479                                                  return NAU;
                                 480       end if;
                                 481       
           4 implicit_else       479       if ((L'length < 1) or (R'length < 1)) then 
           4 reconvergence       481       L01 := TO_01(RESIZE(L, SIZE), 'X');
                                 482       
           0 if                  482                                     return L01;
                                 483       end if;
                                 484       
           4 implicit_else       482       if (L01(L01'left) = 'X') then 
           4 reconvergence       484       R01 := TO_01(RESIZE(R, SIZE), 'X');
                                 485       
           0 if                  485                                     return R01;
                                 486       end if;
                                 487       
           4 implicit_else       485       if (R01(R01'left) = 'X') then 
           4 reconvergence       487       return ADD_UNSIGNED(L01, not(R01), '1');
                                 488     end function "-"
           2 sequence            496       XR(0) := R;
                                 497       return (L - XR);
                                 498     end function "-"
           2 sequence            506       XL(0) := L;
                                 507       return (XL - R);
                                 508     end function "-"
           0 if                  516                                                  return NAS;
                                 517       end if;
                                 518       
           4 implicit_else       516       if ((L'length < 1) or (R'length < 1)) then 
           4 reconvergence       518       L01 := TO_01(RESIZE(L, SIZE), 'X');
                                 519       
           0 if                  519                                     return L01;
                                 520       end if;
                                 521       
           4 implicit_else       519       if (L01(L01'left) = 'X') then 
           4 reconvergence       521       R01 := TO_01(RESIZE(R, SIZE), 'X');
                                 522       
           0 if                  522                                     return R01;
                                 523       end if;
                                 524       
           4 implicit_else       522       if (R01(R01'left) = 'X') then 
           4 reconvergence       524       return ADD_SIGNED(L01, not(R01), '1');
                                 525     end function "-"
           2 sequence            533       XR(0) := R;
                                 534       return (L - XR);
                                 535     end function "-"
           2 sequence            543       XL(0) := L;
                                 544       return (XL - R);
                                 545     end function "-"
           0 sequence            551       return L - TO_UNSIGNED(R, L'length);
                                 552     end function "-"
           0 sequence            558       return TO_UNSIGNED(L, R'length) - R;
                                 559     end function "-"
           0 sequence            564       return L - TO_SIGNED(R, L'length);
                                 565     end function "-"
           0 sequence            570       return TO_SIGNED(L, R'length) - R;
                                 571     end function "-"
           0 if                  587                                                  return NAU;
                                 588       end if;
                                 589       
           0 implicit_else       587       if ((L'length < 1) or (R'length < 1)) then 
           0 reconvergence       589       XL := TO_01(XXL, 'X');
                                 590       XR := TO_01(XXR, 'X');
                                 591       
           0 if                  592         RESULT := (others => 'X');
                                 593         return RESULT;
                                 594       end if;
                                 595       
           0 implicit_else       591       if ((XL(XL'left) = 'X') or (XR(XR'left) = 'X')) then
                                 592         
           0 reconvergence       595       ADVAL := RESIZE(XR, RESULT'length);
                                 596       for I in 0 to L_LEFT loop
                                 597         
           0 reconvergence       599         ADVAL                      := SHIFT_LEFT(ADVAL, 1);
                                 600       end loop;
                                 601       
           0 reconvergence       601       return RESULT;
                                 602     end function "*"
           0 if                  597                             RESULT := RESULT + ADVAL;
                                 598         end if;
                                 599         
           0 else                597         if XL(I) = '1' then 
           0 sequence            614       if ((L_LEFT < 0) or (R_LEFT < 0)) then 
           0 if                  614                                              return NAS;
                                 615       end if;
                                 616       
           0 reconvergence       616       XL := TO_01(L, 'X');
                                 617       XR := TO_01(R, 'X');
                                 618       
           0 if                  619         RESULT := (others => 'X');
                                 620         return RESULT;
                                 621       end if;
                                 622       
           0 implicit_else       618       if ((XL(L_LEFT) = 'X') or (XR(R_LEFT) = 'X')) then
                                 619         
           0 reconvergence       622       ADVAL := RESIZE(XR, RESULT'length);
                                 623       for I in 0 to L_LEFT-1 loop
                                 624         
           0 reconvergence       626         ADVAL                      := SHIFT_LEFT(ADVAL, 1);
                                 627       end loop;
                                 628       
           0 if                  624                             RESULT := RESULT + ADVAL;
                                 625         end if;
                                 626         
           0 else                624         if XL(I) = '1' then 
           0 if                  629         RESULT := RESULT - ADVAL;
                                 630       end if;
                                 631       
           0 implicit_else       628       if XL(L_LEFT) = '1' then
                                 629         
           0 reconvergence       631       return RESULT;
                                 632     end function "*"
           0 sequence            638       return L * TO_UNSIGNED(R, L'length);
                                 639     end function "*"
           0 sequence            645       return TO_UNSIGNED(L, R'length) * R;
                                 646     end function "*"
           0 sequence            652       return L * TO_SIGNED(R, L'length);
                                 653     end function "*"
           0 sequence            658       return TO_SIGNED(L, R'length) * R;
                                 659     end function "*"
           0 if                  674                                                  return NAU;
                                 675       end if;
                                 676       
           0 implicit_else       674       if ((L'length < 1) or (R'length < 1)) then 
           0 reconvergence       676       XL := TO_01(XXL, 'X');
                                 677       XR := TO_01(XXR, 'X');
                                 678       
           0 if                  679         FQUOT := (others => 'X');
                                 680         return FQUOT;
                                 681       end if;
                                 682       
           0 implicit_else       678       if ((XL(XL'left) = 'X') or (XR(XR'left) = 'X')) then
                                 679         
           0 reconvergence       682       DIVMOD(XL, XR, FQUOT, FREMAIN);
                                 683       return FQUOT;
                                 684     end function "/"
           0 if                  700                                                  return NAS;
                                 701       end if;
                                 702       
           0 implicit_else       700       if ((L'length < 1) or (R'length < 1)) then 
           0 reconvergence       702       XL := TO_01(XXL, 'X');
                                 703       XR := TO_01(XXR, 'X');
                                 704       
           0 if                  705         FQUOT := (others => 'X');
                                 706         return UNRESOLVED_SIGNED(FQUOT);
                                 707       end if;
                                 708       
           0 implicit_else       704       if ((XL(XL'left) = 'X') or (XR(XR'left) = 'X')) then
                                 705         
           0 reconvergence       708       if XL(XL'left) = '1' then
                                 709         
           0 if                  709         XNUM := UNRESOLVED_UNSIGNED(-XL);
                                 710         QNEG := true;
                                 711       else
                                 712         
           0 else                712         XNUM := UNRESOLVED_UNSIGNED(XL);
                                 713       end if;
                                 714       
           0 reconvergence       714       if XR(XR'left) = '1' then
                                 715         
           0 if                  715         XDENOM := UNRESOLVED_UNSIGNED(-XR);
                                 716         QNEG   := not QNEG;
                                 717       else
                                 718         
           0 else                718         XDENOM := UNRESOLVED_UNSIGNED(XR);
                                 719       end if;
                                 720       
           0 reconvergence       720       DIVMOD(XNUM, XDENOM, FQUOT, FREMAIN);
                                 721       
           0 if                  721                    FQUOT := "0"-FQUOT;
                                 722       end if;
                                 723       
           0 implicit_else       721       if QNEG then 
           0 reconvergence       723       return UNRESOLVED_SIGNED(FQUOT);
                                 724     end function "/"
           0 if                  733                              return NAU;
                                 734       end if;
                                 735       
           0 implicit_else       733       if (L'length < 1) then 
           0 if                  736         QUOT := (others => '0');
                                 737         return RESIZE(QUOT, L'length);
                                 738       end if;
                                 739       
           0 implicit_else       735       if (R_LENGTH > L'length) then
                                 736         
           0 reconvergence       739       XR   := TO_UNSIGNED(R, R_LENGTH);
                                 740       QUOT := RESIZE((L / XR), QUOT'length);
                                 741       return RESIZE(QUOT, L'length);
                                 742     end function "/"
           0 if                  751                              return NAU;
                                 752       end if;
                                 753       
           0 implicit_else       751       if (R'length < 1) then 
           0 reconvergence       753       XL   := TO_UNSIGNED(L, L_LENGTH);
                                 754       QUOT := RESIZE((XL / R), QUOT'length);
                                 755       
           0 if                  759         assert NO_WARNING report "NUMERIC_STD.""/"": Quotient Truncated"
                                 760           severity warning;
                                 761       end if;
                                 762       
           0 implicit_else       755       if L_LENGTH > R'length and QUOT(0) /= 'X'
                                 756         and QUOT(L_LENGTH-1 downto R'length)
                                 757         /= (L_LENGTH-1 downto R'length => '0')
                                 758       then
                                 759         
           0 reconvergence       762       return RESIZE(QUOT, R'length);
                                 763     end function "/"
           0 if                  770                              return NAS;
                                 771       end if;
                                 772       
           0 implicit_else       770       if (L'length < 1) then 
           0 if                  773         QUOT := (others => '0');
                                 774         return RESIZE(QUOT, L'length);
                                 775       end if;
                                 776       
           0 implicit_else       772       if (R_LENGTH > L'length) then
                                 773         
           0 reconvergence       776       XR   := TO_SIGNED(R, R_LENGTH);
                                 777       QUOT := RESIZE((L / XR), QUOT'length);
                                 778       return RESIZE(QUOT, L'length);
                                 779     end function "/"
           0 if                  786                              return NAS;
                                 787       end if;
                                 788       
           0 implicit_else       786       if (R'length < 1) then 
           0 reconvergence       788       XL   := TO_SIGNED(L, L_LENGTH);
                                 789       QUOT := RESIZE((XL / R), QUOT'length);
                                 790       
           0 if                  794         assert NO_WARNING report "NUMERIC_STD.""/"": Quotient Truncated"
                                 795           severity warning;
                                 796       end if;
                                 797       
           0 implicit_else       790       if L_LENGTH > R'length and QUOT(0) /= 'X'
                                 791         and QUOT(L_LENGTH-1 downto R'length)
                                 792         /= (L_LENGTH-1 downto R'length => QUOT(R'length-1))
                                 793       then
                                 794         
           0 reconvergence       797       return RESIZE(QUOT, R'length);
                                 798     end function "/"
           0 if                  813                                                  return NAU;
                                 814       end if;
                                 815       
           0 implicit_else       813       if ((L'length < 1) or (R'length < 1)) then 
           0 reconvergence       815       XL := TO_01(XXL, 'X');
                                 816       XR := TO_01(XXR, 'X');
                                 817       
           0 if                  818         FREMAIN := (others => 'X');
                                 819         return FREMAIN;
                                 820       end if;
                                 821       
           0 implicit_else       817       if ((XL(XL'left) = 'X') or (XR(XR'left) = 'X')) then
                                 818         
           0 reconvergence       821       DIVMOD(XL, XR, FQUOT, FREMAIN);
                                 822       return FREMAIN;
                                 823     end function "rem"
           0 if                  837                                                  return NAS;
                                 838       end if;
                                 839       
           0 implicit_else       837       if ((L'length < 1) or (R'length < 1)) then 
           0 reconvergence       839       XNUM   := UNRESOLVED_UNSIGNED(TO_01(XXL, 'X'));
                                 840       XDENOM := UNRESOLVED_UNSIGNED(TO_01(XXR, 'X'));
                                 841       
           0 if                  842         FREMAIN := (others => 'X');
                                 843         return UNRESOLVED_SIGNED(FREMAIN);
                                 844       end if;
                                 845       
           0 implicit_else       841       if ((XNUM(XNUM'left) = 'X') or (XDENOM(XDENOM'left) = 'X')) then
                                 842         
           0 reconvergence       845       if XNUM(XNUM'left) = '1' then
                                 846         
           0 if                  846         XNUM := UNRESOLVED_UNSIGNED(-UNRESOLVED_SIGNED(XNUM));
                                 847         RNEG := true;
                                 848       else
                                 849         
           0 else                849         XNUM := UNRESOLVED_UNSIGNED(XNUM);
                                 850       end if;
                                 851       
           0 reconvergence       851       if XDENOM(XDENOM'left) = '1' then
                                 852         
           0 if                  852         XDENOM := UNRESOLVED_UNSIGNED(-UNRESOLVED_SIGNED(XDENOM));
                                 853       else
                                 854         
           0 else                854         XDENOM := UNRESOLVED_UNSIGNED(XDENOM);
                                 855       end if;
                                 856       
           0 reconvergence       856       DIVMOD(XNUM, XDENOM, FQUOT, FREMAIN);
                                 857       
           0 if                  858         FREMAIN := "0"-FREMAIN;
                                 859       end if;
                                 860       
           0 implicit_else       857       if RNEG then
                                 858         
           0 reconvergence       860       return UNRESOLVED_SIGNED(FREMAIN);
                                 861     end function "rem"
           0 if                  870                              return NAU;
                                 871       end if;
                                 872       
           0 implicit_else       870       if (L'length < 1) then 
           0 reconvergence       872       XR   := TO_UNSIGNED(R, R_LENGTH);
                                 873       XREM := L rem XR;
                                 874       
           0 if                  878         assert NO_WARNING report "NUMERIC_STD.""rem"": Remainder Truncated"
                                 879           severity warning;
                                 880       end if;
                                 881       
           0 implicit_else       874       if R_LENGTH > L'length and XREM(0) /= 'X'
                                 875         and XREM(R_LENGTH-1 downto L'length)
                                 876         /= (R_LENGTH-1 downto L'length => '0')
                                 877       then
                                 878         
           0 reconvergence       881       return RESIZE(XREM, L'length);
                                 882     end function "rem"
           0 sequence            891       XL   := TO_UNSIGNED(L, L_LENGTH);
                                 892       XREM := XL rem R;
                                 893       
           0 if                  897         assert NO_WARNING report "NUMERIC_STD.""rem"": Remainder Truncated"
                                 898           severity warning;
                                 899       end if;
                                 900       
           0 implicit_else       893       if L_LENGTH > R'length and XREM(0) /= 'X'
                                 894         and XREM(L_LENGTH-1 downto R'length)
                                 895         /= (L_LENGTH-1 downto R'length => '0')
                                 896       then
                                 897         
           0 reconvergence       900       return RESIZE(XREM, R'length);
                                 901     end function "rem"
           0 if                  910                              return NAS;
                                 911       end if;
                                 912       
           0 implicit_else       910       if (L'length < 1) then 
           0 reconvergence       912       XR   := TO_SIGNED(R, R_LENGTH);
                                 913       XREM := RESIZE((L rem XR), XREM'length);
                                 914       
           0 if                  918         assert NO_WARNING report "NUMERIC_STD.""rem"": Remainder Truncated"
                                 919           severity warning;
                                 920       end if;
                                 921       
           0 implicit_else       914       if R_LENGTH > L'length and XREM(0) /= 'X'
                                 915         and XREM(R_LENGTH-1 downto L'length)
                                 916         /= (R_LENGTH-1 downto L'length => XREM(L'length-1))
                                 917       then
                                 918         
           0 reconvergence       921       return RESIZE(XREM, L'length);
                                 922     end function "rem"
           0 if                  931                              return NAS;
                                 932       end if;
                                 933       
           0 implicit_else       931       if (R'length < 1) then 
           0 reconvergence       933       XL   := TO_SIGNED(L, L_LENGTH);
                                 934       XREM := RESIZE((XL rem R), XREM'length);
                                 935       
           0 if                  939         assert NO_WARNING report "NUMERIC_STD.""rem"": Remainder Truncated"
                                 940           severity warning;
                                 941       end if;
                                 942       
           0 implicit_else       935       if L_LENGTH > R'length and XREM(0) /= 'X'
                                 936         and XREM(L_LENGTH-1 downto R'length)
                                 937         /= (L_LENGTH-1 downto R'length => XREM(R'length-1))
                                 938       then
                                 939         
           0 reconvergence       942       return RESIZE(XREM, R'length);
                                 943     end function "rem"
           0 if                  958                                                  return NAU;
                                 959       end if;
                                 960       
           0 implicit_else       958       if ((L'length < 1) or (R'length < 1)) then 
           0 reconvergence       960       XL := TO_01(XXL, 'X');
                                 961       XR := TO_01(XXR, 'X');
                                 962       
           0 if                  963         FREMAIN := (others => 'X');
                                 964         return FREMAIN;
                                 965       end if;
                                 966       
           0 implicit_else       962       if ((XL(XL'left) = 'X') or (XR(XR'left) = 'X')) then
                                 963         
           0 reconvergence       966       DIVMOD(XL, XR, FQUOT, FREMAIN);
                                 967       return FREMAIN;
                                 968     end function "mod"
           0 sequence            984       if ((L'length < 1) or (R'length < 1)) then 
           0 if                  984                                                  return NAS;
                                 985       end if;
                                 986       
           0 reconvergence       986       XL := TO_01(XXL, 'X');
                                 987       XR := TO_01(XXR, 'X');
                                 988       
           0 if                  989         FREMAIN := (others => 'X');
                                 990         return UNRESOLVED_SIGNED(FREMAIN);
                                 991       end if;
                                 992       
           0 implicit_else       988       if ((XL(XL'left) = 'X') or (XR(XR'left) = 'X')) then
                                 989         
           0 reconvergence       992       if XL(XL'left) = '1' then
                                 993         
           0 if                  993         XNUM := UNRESOLVED_UNSIGNED(-XL);
                                 994       else
                                 995         
           0 else                995         XNUM := UNRESOLVED_UNSIGNED(XL);
                                 996       end if;
                                 997       
           0 reconvergence       997       if XR(XR'left) = '1' then
                                 998         
           0 if                  998         XDENOM := UNRESOLVED_UNSIGNED(-XR);
                                 999         RNEG   := true;
                                1000       else
                                1001         
           0 else               1001         XDENOM := UNRESOLVED_UNSIGNED(XR);
                                1002       end if;
                                1003       
           0 reconvergence      1003       DIVMOD(XNUM, XDENOM, FQUOT, FREMAIN);
                                1004       
           0 if                 1005         FREMAIN := "0"-FREMAIN;
                                1006       elsif 
           0 sequence           1006             RNEG and FREMAIN /= "0" then
                                1007         
           0 elsif              1007         FREMAIN := FREMAIN-XDENOM;
                                1008       elsif 
           0 sequence           1008             L(L'left) = '1' and FREMAIN /= "0" then
                                1009         
           0 elsif              1009         FREMAIN := XDENOM-FREMAIN;
                                1010       end if;
                                1011       
           0 implicit_else      1004       if RNEG and L(L'left) = '1' then
                                1005         
           0 reconvergence      1011       return UNRESOLVED_SIGNED(FREMAIN);
                                1012     end function "mod"
           0 if                 1021                              return NAU;
                                1022       end if;
                                1023       
           0 implicit_else      1021       if (L'length < 1) then 
           0 reconvergence      1023       XR   := TO_UNSIGNED(R, R_LENGTH);
                                1024       XREM := RESIZE((L mod XR), XREM'length);
                                1025       
           0 if                 1029         assert NO_WARNING report "NUMERIC_STD.""mod"": Modulus Truncated"
                                1030           severity warning;
                                1031       end if;
                                1032       
           0 implicit_else      1025       if R_LENGTH > L'length and XREM(0) /= 'X'
                                1026         and XREM(R_LENGTH-1 downto L'length)
                                1027         /= (R_LENGTH-1 downto L'length => '0')
                                1028       then
                                1029         
           0 reconvergence      1032       return RESIZE(XREM, L'length);
                                1033     end function "mod"
           0 if                 1042                              return NAU;
                                1043       end if;
                                1044       
           0 implicit_else      1042       if (R'length < 1) then 
           0 reconvergence      1044       XL   := TO_UNSIGNED(L, L_LENGTH);
                                1045       XREM := RESIZE((XL mod R), XREM'length);
                                1046       
           0 if                 1050         assert NO_WARNING report "NUMERIC_STD.""mod"": Modulus Truncated"
                                1051           severity warning;
                                1052       end if;
                                1053       
           0 implicit_else      1046       if L_LENGTH > R'length and XREM(0) /= 'X'
                                1047         and XREM(L_LENGTH-1 downto R'length)
                                1048         /= (L_LENGTH-1 downto R'length => '0')
                                1049       then
                                1050         
           0 reconvergence      1053       return RESIZE(XREM, R'length);
                                1054     end function "mod"
           0 if                 1063                              return NAS;
                                1064       end if;
                                1065       
           0 implicit_else      1063       if (L'length < 1) then 
           0 reconvergence      1065       XR   := TO_SIGNED(R, R_LENGTH);
                                1066       XREM := RESIZE((L mod XR), XREM'length);
                                1067       
           0 if                 1071         assert NO_WARNING report "NUMERIC_STD.""mod"": Modulus Truncated"
                                1072           severity warning;
                                1073       end if;
                                1074       
           0 implicit_else      1067       if R_LENGTH > L'length and XREM(0) /= 'X'
                                1068         and XREM(R_LENGTH-1 downto L'length)
                                1069         /= (R_LENGTH-1 downto L'length => XREM(L'length-1))
                                1070       then
                                1071         
           0 reconvergence      1074       return RESIZE(XREM, L'length);
                                1075     end function "mod"
           0 if                 1084                              return NAS;
                                1085       end if;
                                1086       
           0 implicit_else      1084       if (R'length < 1) then 
           0 reconvergence      1086       XL   := TO_SIGNED(L, L_LENGTH);
                                1087       XREM := RESIZE((XL mod R), XREM'length);
                                1088       
           0 if                 1092         assert NO_WARNING report "NUMERIC_STD.""mod"": Modulus Truncated"
                                1093           severity warning;
                                1094       end if;
                                1095       
           0 implicit_else      1088       if L_LENGTH > R'length and XREM(0) /= 'X'
                                1089         and XREM(L_LENGTH-1 downto R'length)
                                1090         /= (L_LENGTH-1 downto R'length => XREM(R'length-1))
                                1091       then
                                1092         
           0 reconvergence      1095       return RESIZE(XREM, R'length);
                                1096     end function "mod"
           3 sequence           1103       for INDEX in ARG'range loop
                                1104         
           1 reconvergence      1108       return -1;
                                1109     end function find_leftmost
           2 if                 1105           return INDEX;
                                1106         end if;
                                1107       end loop;
                                1108       
          10 else               1104         if ARG(INDEX) ?= Y then
                                1105           
           3 sequence           1115       for INDEX in ARG'range loop
                                1116         
           1 reconvergence      1120       return -1;
                                1121     end function find_leftmost
           2 if                 1117           return INDEX;
                                1118         end if;
                                1119       end loop;
                                1120       
          10 else               1116         if ARG(INDEX) ?= Y then
                                1117           
           3 sequence           1127       for INDEX in ARG'reverse_range loop
                                1128         
           1 reconvergence      1132       return -1;
                                1133     end function find_rightmost
           2 if                 1129           return INDEX;
                                1130         end if;
                                1131       end loop;
                                1132       
           9 else               1128         if ARG(INDEX) ?= Y then
                                1129           
           3 sequence           1139       for INDEX in ARG'reverse_range loop
                                1140         
           1 reconvergence      1144       return -1;
                                1145     end function find_rightmost
           2 if                 1141           return INDEX;
                                1142         end if;
                                1143       end loop;
                                1144       
           9 else               1140         if ARG(INDEX) ?= Y then
                                1141           
           0 if                 1160         assert NO_WARNING
                                1161           report "NUMERIC_STD."">"": null argument detected, returning FALSE"
                                1162           severity warning;
                                1163         return false;
                                1164       end if;
                                1165       
           8 implicit_else      1159       if ((L'length < 1) or (R'length < 1)) then
                                1160         
           8 reconvergence      1165       L01 := TO_01(XL, 'X');
                                1166       R01 := TO_01(XR, 'X');
                                1167       
           0 if                 1168         assert NO_WARNING
                                1169           report "NUMERIC_STD."">"": metavalue detected, returning FALSE"
                                1170           severity warning;
                                1171         return false;
                                1172       end if;
                                1173       
           8 implicit_else      1167       if ((L01(L01'left) = 'X') or (R01(R01'left) = 'X')) then
                                1168         
           8 reconvergence      1173       return not UNSIGNED_LESS_OR_EQUAL(RESIZE(L01, SIZE), RESIZE(R01, SIZE));
                                1174     end function ">"
           0 if                 1187         assert NO_WARNING
                                1188           report "NUMERIC_STD."">"": null argument detected, returning FALSE"
                                1189           severity warning;
                                1190         return false;
                                1191       end if;
                                1192       
          10 implicit_else      1186       if ((L'length < 1) or (R'length < 1)) then
                                1187         
          10 reconvergence      1192       L01 := TO_01(XL, 'X');
                                1193       R01 := TO_01(XR, 'X');
                                1194       
           0 if                 1195         assert NO_WARNING
                                1196           report "NUMERIC_STD."">"": metavalue detected, returning FALSE"
                                1197           severity warning;
                                1198         return false;
                                1199       end if;
                                1200       
          10 implicit_else      1194       if ((L01(L01'left) = 'X') or (R01(R01'left) = 'X')) then
                                1195         
          10 reconvergence      1200       return not SIGNED_LESS_OR_EQUAL(RESIZE(L01, SIZE), RESIZE(R01, SIZE));
                                1201     end function ">"
           0 if                 1210         assert NO_WARNING
                                1211           report "NUMERIC_STD."">"": null argument detected, returning FALSE"
                                1212           severity warning;
                                1213         return false;
                                1214       end if;
                                1215       
           0 implicit_else      1209       if (R'length < 1) then
                                1210         
           0 reconvergence      1215       R01 := TO_01(XR, 'X');
                                1216       
           0 if                 1217         assert NO_WARNING
                                1218           report "NUMERIC_STD."">"": metavalue detected, returning FALSE"
                                1219           severity warning;
                                1220         return false;
                                1221       end if;
                                1222       
           0 implicit_else      1216       if (R01(R01'left) = 'X') then
                                1217         
           0 if                 1222                                               return true;
                                1223       end if;
                                1224       
           0 implicit_else      1222       if UNSIGNED_NUM_BITS(L) > R'length then 
           0 reconvergence      1224       return not UNSIGNED_LESS_OR_EQUAL(TO_UNSIGNED(L, R01'length), R01);
                                1225     end function ">"
           0 if                 1234         assert NO_WARNING
                                1235           report "NUMERIC_STD."">"": null argument detected, returning FALSE"
                                1236           severity warning;
                                1237         return false;
                                1238       end if;
                                1239       
           0 implicit_else      1233       if (R'length < 1) then
                                1234         
           0 reconvergence      1239       R01 := TO_01(XR, 'X');
                                1240       
           0 if                 1241         assert NO_WARNING
                                1242           report "NUMERIC_STD."">"": metavalue detected, returning FALSE"
                                1243           severity warning;
                                1244         return false;
                                1245       end if;
                                1246       
           0 implicit_else      1240       if (R01(R01'left) = 'X') then
                                1241         
           0 if                 1246                                             return L > 0;
                                1247       end if;
                                1248       
           0 implicit_else      1246       if SIGNED_NUM_BITS(L) > R'length then 
           0 reconvergence      1248       return not SIGNED_LESS_OR_EQUAL(TO_SIGNED(L, R01'length), R01);
                                1249     end function ">"
           0 if                 1258         assert NO_WARNING
                                1259           report "NUMERIC_STD."">"": null argument detected, returning FALSE"
                                1260           severity warning;
                                1261         return false;
                                1262       end if;
                                1263       
           0 implicit_else      1257       if (L'length < 1) then
                                1258         
           0 reconvergence      1263       L01 := TO_01(XL, 'X');
                                1264       
           0 if                 1265         assert NO_WARNING
                                1266           report "NUMERIC_STD."">"": metavalue detected, returning FALSE"
                                1267           severity warning;
                                1268         return false;
                                1269       end if;
                                1270       
           0 implicit_else      1264       if (L01(L01'left) = 'X') then
                                1265         
           0 if                 1270                                               return false;
                                1271       end if;
                                1272       
           0 implicit_else      1270       if UNSIGNED_NUM_BITS(R) > L'length then 
           0 reconvergence      1272       return not UNSIGNED_LESS_OR_EQUAL(L01, TO_UNSIGNED(R, L01'length));
                                1273     end function ">"
           0 if                 1282         assert NO_WARNING
                                1283           report "NUMERIC_STD."">"": null argument detected, returning FALSE"
                                1284           severity warning;
                                1285         return false;
                                1286       end if;
                                1287       
           0 implicit_else      1281       if (L'length < 1) then
                                1282         
           0 reconvergence      1287       L01 := TO_01(XL, 'X');
                                1288       
           0 if                 1289         assert NO_WARNING
                                1290           report "NUMERIC_STD."">"": metavalue detected, returning FALSE"
                                1291           severity warning;
                                1292         return false;
                                1293       end if;
                                1294       
           0 implicit_else      1288       if (L01(L01'left) = 'X') then
                                1289         
           0 if                 1294                                             return 0 > R;
                                1295       end if;
                                1296       
           0 implicit_else      1294       if SIGNED_NUM_BITS(R) > L'length then 
           0 reconvergence      1296       return not SIGNED_LESS_OR_EQUAL(L01, TO_SIGNED(R, L01'length));
                                1297     end function ">"
           0 if                 1312         assert NO_WARNING
                                1313           report "NUMERIC_STD.""<"": null argument detected, returning FALSE"
                                1314           severity warning;
                                1315         return false;
                                1316       end if;
                                1317       
           8 implicit_else      1311       if ((L'length < 1) or (R'length < 1)) then
                                1312         
           8 reconvergence      1317       L01 := TO_01(XL, 'X');
                                1318       R01 := TO_01(XR, 'X');
                                1319       
           0 if                 1320         assert NO_WARNING
                                1321           report "NUMERIC_STD.""<"": metavalue detected, returning FALSE"
                                1322           severity warning;
                                1323         return false;
                                1324       end if;
                                1325       
           8 implicit_else      1319       if ((L01(L01'left) = 'X') or (R01(R01'left) = 'X')) then
                                1320         
           8 reconvergence      1325       return UNSIGNED_LESS(RESIZE(L01, SIZE), RESIZE(R01, SIZE));
                                1326     end function "<"
           0 if                 1339         assert NO_WARNING
                                1340           report "NUMERIC_STD.""<"": null argument detected, returning FALSE"
                                1341           severity warning;
                                1342         return false;
                                1343       end if;
                                1344       
          10 implicit_else      1338       if ((L'length < 1) or (R'length < 1)) then
                                1339         
          10 reconvergence      1344       L01 := TO_01(XL, 'X');
                                1345       R01 := TO_01(XR, 'X');
                                1346       
           0 if                 1347         assert NO_WARNING
                                1348           report "NUMERIC_STD.""<"": metavalue detected, returning FALSE"
                                1349           severity warning;
                                1350         return false;
                                1351       end if;
                                1352       
          10 implicit_else      1346       if ((L01(L01'left) = 'X') or (R01(R01'left) = 'X')) then
                                1347         
          10 reconvergence      1352       return SIGNED_LESS(RESIZE(L01, SIZE), RESIZE(R01, SIZE));
                                1353     end function "<"
           0 if                 1362         assert NO_WARNING
                                1363           report "NUMERIC_STD.""<"": null argument detected, returning FALSE"
                                1364           severity warning;
                                1365         return false;
                                1366       end if;
                                1367       
           0 implicit_else      1361       if (R'length < 1) then
                                1362         
           0 reconvergence      1367       R01 := TO_01(XR, 'X');
                                1368       
           0 if                 1369         assert NO_WARNING
                                1370           report "NUMERIC_STD.""<"": metavalue detected, returning FALSE"
                                1371           severity warning;
                                1372         return false;
                                1373       end if;
                                1374       
           0 implicit_else      1368       if (R01(R01'left) = 'X') then
                                1369         
           0 if                 1374                                               return L < 0;
                                1375       end if;
                                1376       
           0 implicit_else      1374       if UNSIGNED_NUM_BITS(L) > R'length then 
           0 reconvergence      1376       return UNSIGNED_LESS(TO_UNSIGNED(L, R01'length), R01);
                                1377     end function "<"
           0 if                 1386         assert NO_WARNING
                                1387           report "NUMERIC_STD.""<"": null argument detected, returning FALSE"
                                1388           severity warning;
                                1389         return false;
                                1390       end if;
                                1391       
           0 implicit_else      1385       if (R'length < 1) then
                                1386         
           0 reconvergence      1391       R01 := TO_01(XR, 'X');
                                1392       
           0 if                 1393         assert NO_WARNING
                                1394           report "NUMERIC_STD.""<"": metavalue detected, returning FALSE"
                                1395           severity warning;
                                1396         return false;
                                1397       end if;
                                1398       
           0 implicit_else      1392       if (R01(R01'left) = 'X') then
                                1393         
           0 if                 1398                                             return L < 0;
                                1399       end if;
                                1400       
           0 implicit_else      1398       if SIGNED_NUM_BITS(L) > R'length then 
           0 reconvergence      1400       return SIGNED_LESS(TO_SIGNED(L, R01'length), R01);
                                1401     end function "<"
           0 if                 1410         assert NO_WARNING
                                1411           report "NUMERIC_STD.""<"": null argument detected, returning FALSE"
                                1412           severity warning;
                                1413         return false;
                                1414       end if;
                                1415       
           0 implicit_else      1409       if (L'length < 1) then
                                1410         
           0 reconvergence      1415       L01 := TO_01(XL, 'X');
                                1416       
           0 if                 1417         assert NO_WARNING
                                1418           report "NUMERIC_STD.""<"": metavalue detected, returning FALSE"
                                1419           severity warning;
                                1420         return false;
                                1421       end if;
                                1422       
           0 implicit_else      1416       if (L01(L01'left) = 'X') then
                                1417         
           0 if                 1422                                               return 0 < R;
                                1423       end if;
                                1424       
           0 implicit_else      1422       if UNSIGNED_NUM_BITS(R) > L'length then 
           0 reconvergence      1424       return UNSIGNED_LESS(L01, TO_UNSIGNED(R, L01'length));
                                1425     end function "<"
           0 if                 1434         assert NO_WARNING
                                1435           report "NUMERIC_STD.""<"": null argument detected, returning FALSE"
                                1436           severity warning;
                                1437         return false;
                                1438       end if;
                                1439       
           0 implicit_else      1433       if (L'length < 1) then
                                1434         
           0 reconvergence      1439       L01 := TO_01(XL, 'X');
                                1440       
           0 if                 1441         assert NO_WARNING
                                1442           report "NUMERIC_STD.""<"": metavalue detected, returning FALSE"
                                1443           severity warning;
                                1444         return false;
                                1445       end if;
                                1446       
           0 implicit_else      1440       if (L01(L01'left) = 'X') then
                                1441         
           0 if                 1446                                             return 0 < R;
                                1447       end if;
                                1448       
           0 implicit_else      1446       if SIGNED_NUM_BITS(R) > L'length then 
           0 reconvergence      1448       return SIGNED_LESS(L01, TO_SIGNED(R, L01'length));
                                1449     end function "<"
           0 if                 1464         assert NO_WARNING
                                1465           report "NUMERIC_STD.""<="": null argument detected, returning FALSE"
                                1466           severity warning;
                                1467         return false;
                                1468       end if;
                                1469       
           7 implicit_else      1463       if ((L'length < 1) or (R'length < 1)) then
                                1464         
           7 reconvergence      1469       L01 := TO_01(XL, 'X');
                                1470       R01 := TO_01(XR, 'X');
                                1471       
           0 if                 1472         assert NO_WARNING
                                1473           report "NUMERIC_STD.""<="": metavalue detected, returning FALSE"
                                1474           severity warning;
                                1475         return false;
                                1476       end if;
                                1477       
           7 implicit_else      1471       if ((L01(L01'left) = 'X') or (R01(R01'left) = 'X')) then
                                1472         
           7 reconvergence      1477       return UNSIGNED_LESS_OR_EQUAL(RESIZE(L01, SIZE), RESIZE(R01, SIZE));
                                1478     end function "<="
           0 if                 1491         assert NO_WARNING
                                1492           report "NUMERIC_STD.""<="": null argument detected, returning FALSE"
                                1493           severity warning;
                                1494         return false;
                                1495       end if;
                                1496       
          10 implicit_else      1490       if ((L'length < 1) or (R'length < 1)) then
                                1491         
          10 reconvergence      1496       L01 := TO_01(XL, 'X');
                                1497       R01 := TO_01(XR, 'X');
                                1498       
           0 if                 1499         assert NO_WARNING
                                1500           report "NUMERIC_STD.""<="": metavalue detected, returning FALSE"
                                1501           severity warning;
                                1502         return false;
                                1503       end if;
                                1504       
          10 implicit_else      1498       if ((L01(L01'left) = 'X') or (R01(R01'left) = 'X')) then
                                1499         
          10 reconvergence      1504       return SIGNED_LESS_OR_EQUAL(RESIZE(L01, SIZE), RESIZE(R01, SIZE));
                                1505     end function "<="
           0 if                 1514         assert NO_WARNING
                                1515           report "NUMERIC_STD.""<="": null argument detected, returning FALSE"
                                1516           severity warning;
                                1517         return false;
                                1518       end if;
                                1519       
           0 implicit_else      1513       if (R'length < 1) then
                                1514         
           0 reconvergence      1519       R01 := TO_01(XR, 'X');
                                1520       
           0 if                 1521         assert NO_WARNING
                                1522           report "NUMERIC_STD.""<="": metavalue detected, returning FALSE"
                                1523           severity warning;
                                1524         return false;
                                1525       end if;
                                1526       
           0 implicit_else      1520       if (R01(R01'left) = 'X') then
                                1521         
           0 if                 1526                                               return L < 0;
                                1527       end if;
                                1528       
           0 implicit_else      1526       if UNSIGNED_NUM_BITS(L) > R'length then 
           0 reconvergence      1528       return UNSIGNED_LESS_OR_EQUAL(TO_UNSIGNED(L, R01'length), R01);
                                1529     end function "<="
           0 if                 1538         assert NO_WARNING
                                1539           report "NUMERIC_STD.""<="": null argument detected, returning FALSE"
                                1540           severity warning;
                                1541         return false;
                                1542       end if;
                                1543       
           0 implicit_else      1537       if (R'length < 1) then
                                1538         
           0 reconvergence      1543       R01 := TO_01(XR, 'X');
                                1544       
           0 if                 1545         assert NO_WARNING
                                1546           report "NUMERIC_STD.""<="": metavalue detected, returning FALSE"
                                1547           severity warning;
                                1548         return false;
                                1549       end if;
                                1550       
           0 implicit_else      1544       if (R01(R01'left) = 'X') then
                                1545         
           0 if                 1550                                             return L < 0;
                                1551       end if;
                                1552       
           0 implicit_else      1550       if SIGNED_NUM_BITS(L) > R'length then 
           0 reconvergence      1552       return SIGNED_LESS_OR_EQUAL(TO_SIGNED(L, R01'length), R01);
                                1553     end function "<="
           0 if                 1562         assert NO_WARNING
                                1563           report "NUMERIC_STD.""<="": null argument detected, returning FALSE"
                                1564           severity warning;
                                1565         return false;
                                1566       end if;
                                1567       
           0 implicit_else      1561       if (L_LEFT < 0) then
                                1562         
           0 reconvergence      1567       L01 := TO_01(XL, 'X');
                                1568       
           0 if                 1569         assert NO_WARNING
                                1570           report "NUMERIC_STD.""<="": metavalue detected, returning FALSE"
                                1571           severity warning;
                                1572         return false;
                                1573       end if;
                                1574       
           0 implicit_else      1568       if (L01(L01'left) = 'X') then
                                1569         
           0 if                 1574                                               return 0 < R;
                                1575       end if;
                                1576       
           0 implicit_else      1574       if UNSIGNED_NUM_BITS(R) > L'length then 
           0 reconvergence      1576       return UNSIGNED_LESS_OR_EQUAL(L01, TO_UNSIGNED(R, L01'length));
                                1577     end function "<="
           0 if                 1586         assert NO_WARNING
                                1587           report "NUMERIC_STD.""<="": null argument detected, returning FALSE"
                                1588           severity warning;
                                1589         return false;
                                1590       end if;
                                1591       
           0 implicit_else      1585       if (L_LEFT < 0) then
                                1586         
           0 reconvergence      1591       L01 := TO_01(XL, 'X');
                                1592       
           0 if                 1593         assert NO_WARNING
                                1594           report "NUMERIC_STD.""<="": metavalue detected, returning FALSE"
                                1595           severity warning;
                                1596         return false;
                                1597       end if;
                                1598       
           0 implicit_else      1592       if (L01(L01'left) = 'X') then
                                1593         
           0 if                 1598                                             return 0 < R;
                                1599       end if;
                                1600       
           0 implicit_else      1598       if SIGNED_NUM_BITS(R) > L'length then 
           0 reconvergence      1600       return SIGNED_LESS_OR_EQUAL(L01, TO_SIGNED(R, L01'length));
                                1601     end function "<="
           0 if                 1616         assert NO_WARNING
                                1617           report "NUMERIC_STD."">="": null argument detected, returning FALSE"
                                1618           severity warning;
                                1619         return false;
                                1620       end if;
                                1621       
           8 implicit_else      1615       if ((L'length < 1) or (R'length < 1)) then
                                1616         
           8 reconvergence      1621       L01 := TO_01(XL, 'X');
                                1622       R01 := TO_01(XR, 'X');
                                1623       
           0 if                 1624         assert NO_WARNING
                                1625           report "NUMERIC_STD."">="": metavalue detected, returning FALSE"
                                1626           severity warning;
                                1627         return false;
                                1628       end if;
                                1629       
           8 implicit_else      1623       if ((L01(L01'left) = 'X') or (R01(R01'left) = 'X')) then
                                1624         
           8 reconvergence      1629       return not UNSIGNED_LESS(RESIZE(L01, SIZE), RESIZE(R01, SIZE));
                                1630     end function ">="
           0 if                 1643         assert NO_WARNING
                                1644           report "NUMERIC_STD."">="": null argument detected, returning FALSE"
                                1645           severity warning;
                                1646         return false;
                                1647       end if;
                                1648       
          11 implicit_else      1642       if ((L'length < 1) or (R'length < 1)) then
                                1643         
          11 reconvergence      1648       L01 := TO_01(XL, 'X');
                                1649       R01 := TO_01(XR, 'X');
                                1650       
           0 if                 1651         assert NO_WARNING
                                1652           report "NUMERIC_STD."">="": metavalue detected, returning FALSE"
                                1653           severity warning;
                                1654         return false;
                                1655       end if;
                                1656       
          11 implicit_else      1650       if ((L01(L01'left) = 'X') or (R01(R01'left) = 'X')) then
                                1651         
          11 reconvergence      1656       return not SIGNED_LESS(RESIZE(L01, SIZE), RESIZE(R01, SIZE));
                                1657     end function ">="
           0 if                 1666         assert NO_WARNING
                                1667           report "NUMERIC_STD."">="": null argument detected, returning FALSE"
                                1668           severity warning;
                                1669         return false;
                                1670       end if;
                                1671       
           0 implicit_else      1665       if (R'length < 1) then
                                1666         
           0 reconvergence      1671       R01 := TO_01(XR, 'X');
                                1672       
           0 if                 1673         assert NO_WARNING
                                1674           report "NUMERIC_STD."">="": metavalue detected, returning FALSE"
                                1675           severity warning;
                                1676         return false;
                                1677       end if;
                                1678       
           0 implicit_else      1672       if (R01(R01'left) = 'X') then
                                1673         
           0 if                 1678                                               return L > 0;
                                1679       end if;
                                1680       
           0 implicit_else      1678       if UNSIGNED_NUM_BITS(L) > R'length then 
           0 reconvergence      1680       return not UNSIGNED_LESS(TO_UNSIGNED(L, R01'length), R01);
                                1681     end function ">="
           0 if                 1690         assert NO_WARNING
                                1691           report "NUMERIC_STD."">="": null argument detected, returning FALSE"
                                1692           severity warning;
                                1693         return false;
                                1694       end if;
                                1695       
           0 implicit_else      1689       if (R'length < 1) then
                                1690         
           0 reconvergence      1695       R01 := TO_01(XR, 'X');
                                1696       
           0 if                 1697         assert NO_WARNING
                                1698           report "NUMERIC_STD."">="": metavalue detected, returning FALSE"
                                1699           severity warning;
                                1700         return false;
                                1701       end if;
                                1702       
           0 implicit_else      1696       if (R01(R01'left) = 'X') then
                                1697         
           0 if                 1702                                             return L > 0;
                                1703       end if;
                                1704       
           0 implicit_else      1702       if SIGNED_NUM_BITS(L) > R'length then 
           0 reconvergence      1704       return not SIGNED_LESS(TO_SIGNED(L, R01'length), R01);
                                1705     end function ">="
           0 if                 1714         assert NO_WARNING
                                1715           report "NUMERIC_STD."">="": null argument detected, returning FALSE"
                                1716           severity warning;
                                1717         return false;
                                1718       end if;
                                1719       
           0 implicit_else      1713       if (L'length < 1) then
                                1714         
           0 reconvergence      1719       L01 := TO_01(XL, 'X');
                                1720       
           0 if                 1721         assert NO_WARNING
                                1722           report "NUMERIC_STD."">="": metavalue detected, returning FALSE"
                                1723           severity warning;
                                1724         return false;
                                1725       end if;
                                1726       
           0 implicit_else      1720       if (L01(L01'left) = 'X') then
                                1721         
           0 if                 1726                                               return 0 > R;
                                1727       end if;
                                1728       
           0 implicit_else      1726       if UNSIGNED_NUM_BITS(R) > L'length then 
           0 reconvergence      1728       return not UNSIGNED_LESS(L01, TO_UNSIGNED(R, L01'length));
                                1729     end function ">="
           0 if                 1738         assert NO_WARNING
                                1739           report "NUMERIC_STD."">="": null argument detected, returning FALSE"
                                1740           severity warning;
                                1741         return false;
                                1742       end if;
                                1743       
           0 implicit_else      1737       if (L'length < 1) then
                                1738         
           0 reconvergence      1743       L01 := TO_01(XL, 'X');
                                1744       
           0 if                 1745         assert NO_WARNING
                                1746           report "NUMERIC_STD."">="": metavalue detected, returning FALSE"
                                1747           severity warning;
                                1748         return false;
                                1749       end if;
                                1750       
           0 implicit_else      1744       if (L01(L01'left) = 'X') then
                                1745         
           0 if                 1750                                             return 0 > R;
                                1751       end if;
                                1752       
           0 implicit_else      1750       if SIGNED_NUM_BITS(R) > L'length then 
           0 reconvergence      1752       return not SIGNED_LESS(L01, TO_SIGNED(R, L01'length));
                                1753     end function ">="
           0 if                 1768         assert NO_WARNING
                                1769           report "NUMERIC_STD.""="": null argument detected, returning FALSE"
                                1770           severity warning;
                                1771         return false;
                                1772       end if;
                                1773       
          18 implicit_else      1767       if ((L'length < 1) or (R'length < 1)) then
                                1768         
          18 reconvergence      1773       L01 := TO_01(XL, 'X');
                                1774       R01 := TO_01(XR, 'X');
                                1775       
           0 if                 1776         assert NO_WARNING
                                1777           report "NUMERIC_STD.""="": metavalue detected, returning FALSE"
                                1778           severity warning;
                                1779         return false;
                                1780       end if;
                                1781       
          18 implicit_else      1775       if ((L01(L01'left) = 'X') or (R01(R01'left) = 'X')) then
                                1776         
          18 reconvergence      1781       return UNSIGNED_EQUAL(RESIZE(L01, SIZE), RESIZE(R01, SIZE));
                                1782     end function "="
           0 if                 1795         assert NO_WARNING
                                1796           report "NUMERIC_STD.""="": null argument detected, returning FALSE"
                                1797           severity warning;
                                1798         return false;
                                1799       end if;
                                1800       
          18 implicit_else      1794       if ((L'length < 1) or (R'length < 1)) then
                                1795         
          18 reconvergence      1800       L01 := TO_01(XL, 'X');
                                1801       R01 := TO_01(XR, 'X');
                                1802       
           0 if                 1803         assert NO_WARNING
                                1804           report "NUMERIC_STD.""="": metavalue detected, returning FALSE"
                                1805           severity warning;
                                1806         return false;
                                1807       end if;
                                1808       
          18 implicit_else      1802       if ((L01(L01'left) = 'X') or (R01(R01'left) = 'X')) then
                                1803         
          18 reconvergence      1808       return SIGNED_EQUAL(RESIZE(L01, SIZE), RESIZE(R01, SIZE));
                                1809     end function "="
           0 if                 1818         assert NO_WARNING
                                1819           report "NUMERIC_STD.""="": null argument detected, returning FALSE"
                                1820           severity warning;
                                1821         return false;
                                1822       end if;
                                1823       
           0 implicit_else      1817       if (R'length < 1) then
                                1818         
           0 reconvergence      1823       R01 := TO_01(XR, 'X');
                                1824       
           0 if                 1825         assert NO_WARNING
                                1826           report "NUMERIC_STD.""="": metavalue detected, returning FALSE"
                                1827           severity warning;
                                1828         return false;
                                1829       end if;
                                1830       
           0 implicit_else      1824       if (R01(R01'left) = 'X') then
                                1825         
           0 if                 1830                                               return false;
                                1831       end if;
                                1832       
           0 implicit_else      1830       if UNSIGNED_NUM_BITS(L) > R'length then 
           0 reconvergence      1832       return UNSIGNED_EQUAL(TO_UNSIGNED(L, R01'length), R01);
                                1833     end function "="
           0 if                 1842         assert NO_WARNING
                                1843           report "NUMERIC_STD.""="": null argument detected, returning FALSE"
                                1844           severity warning;
                                1845         return false;
                                1846       end if;
                                1847       
           0 implicit_else      1841       if (R'length < 1) then
                                1842         
           0 reconvergence      1847       R01 := TO_01(XR, 'X');
                                1848       
           0 if                 1849         assert NO_WARNING
                                1850           report "NUMERIC_STD.""="": metavalue detected, returning FALSE"
                                1851           severity warning;
                                1852         return false;
                                1853       end if;
                                1854       
           0 implicit_else      1848       if (R01(R01'left) = 'X') then
                                1849         
           0 if                 1854                                             return false;
                                1855       end if;
                                1856       
           0 implicit_else      1854       if SIGNED_NUM_BITS(L) > R'length then 
           0 reconvergence      1856       return SIGNED_EQUAL(TO_SIGNED(L, R01'length), R01);
                                1857     end function "="
           0 if                 1866         assert NO_WARNING
                                1867           report "NUMERIC_STD.""="": null argument detected, returning FALSE"
                                1868           severity warning;
                                1869         return false;
                                1870       end if;
                                1871       
           0 implicit_else      1865       if (L'length < 1) then
                                1866         
           0 reconvergence      1871       L01 := TO_01(XL, 'X');
                                1872       
           0 if                 1873         assert NO_WARNING
                                1874           report "NUMERIC_STD.""="": metavalue detected, returning FALSE"
                                1875           severity warning;
                                1876         return false;
                                1877       end if;
                                1878       
           0 implicit_else      1872       if (L01(L01'left) = 'X') then
                                1873         
           0 if                 1878                                               return false;
                                1879       end if;
                                1880       
           0 implicit_else      1878       if UNSIGNED_NUM_BITS(R) > L'length then 
           0 reconvergence      1880       return UNSIGNED_EQUAL(L01, TO_UNSIGNED(R, L01'length));
                                1881     end function "="
           0 if                 1890         assert NO_WARNING
                                1891           report "NUMERIC_STD.""="": null argument detected, returning FALSE"
                                1892           severity warning;
                                1893         return false;
                                1894       end if;
                                1895       
           0 implicit_else      1889       if (L'length < 1) then
                                1890         
           0 reconvergence      1895       L01 := TO_01(XL, 'X');
                                1896       
           0 if                 1897         assert NO_WARNING
                                1898           report "NUMERIC_STD.""="": metavalue detected, returning FALSE"
                                1899           severity warning;
                                1900         return false;
                                1901       end if;
                                1902       
           0 implicit_else      1896       if (L01(L01'left) = 'X') then
                                1897         
           0 if                 1902                                             return false;
                                1903       end if;
                                1904       
           0 implicit_else      1902       if SIGNED_NUM_BITS(R) > L'length then 
           0 reconvergence      1904       return SIGNED_EQUAL(L01, TO_SIGNED(R, L01'length));
                                1905     end function "="
           0 if                 1920         assert NO_WARNING
                                1921           report "NUMERIC_STD.""/="": null argument detected, returning TRUE"
                                1922           severity warning;
                                1923         return true;
                                1924       end if;
                                1925       
          36 implicit_else      1919       if ((L'length < 1) or (R'length < 1)) then
                                1920         
          36 reconvergence      1925       L01 := TO_01(XL, 'X');
                                1926       R01 := TO_01(XR, 'X');
                                1927       
           0 if                 1928         assert NO_WARNING
                                1929           report "NUMERIC_STD.""/="": metavalue detected, returning TRUE"
                                1930           severity warning;
                                1931         return true;
                                1932       end if;
                                1933       
          36 implicit_else      1927       if ((L01(L01'left) = 'X') or (R01(R01'left) = 'X')) then
                                1928         
          36 reconvergence      1933       return not(UNSIGNED_EQUAL(RESIZE(L01, SIZE), RESIZE(R01, SIZE)));
                                1934     end function "/="
           0 if                 1947         assert NO_WARNING
                                1948           report "NUMERIC_STD.""/="": null argument detected, returning TRUE"
                                1949           severity warning;
                                1950         return true;
                                1951       end if;
                                1952       
          32 implicit_else      1946       if ((L'length < 1) or (R'length < 1)) then
                                1947         
          32 reconvergence      1952       L01 := TO_01(XL, 'X');
                                1953       R01 := TO_01(XR, 'X');
                                1954       
           0 if                 1955         assert NO_WARNING
                                1956           report "NUMERIC_STD.""/="": metavalue detected, returning TRUE"
                                1957           severity warning;
                                1958         return true;
                                1959       end if;
                                1960       
          32 implicit_else      1954       if ((L01(L01'left) = 'X') or (R01(R01'left) = 'X')) then
                                1955         
          32 reconvergence      1960       return not(SIGNED_EQUAL(RESIZE(L01, SIZE), RESIZE(R01, SIZE)));
                                1961     end function "/="
           0 if                 1970         assert NO_WARNING
                                1971           report "NUMERIC_STD.""/="": null argument detected, returning TRUE"
                                1972           severity warning;
                                1973         return true;
                                1974       end if;
                                1975       
           0 implicit_else      1969       if (R'length < 1) then
                                1970         
           0 reconvergence      1975       R01 := TO_01(XR, 'X');
                                1976       
           0 if                 1977         assert NO_WARNING
                                1978           report "NUMERIC_STD.""/="": metavalue detected, returning TRUE"
                                1979           severity warning;
                                1980         return true;
                                1981       end if;
                                1982       
           0 implicit_else      1976       if (R01(R01'left) = 'X') then
                                1977         
           0 if                 1982                                               return true;
                                1983       end if;
                                1984       
           0 implicit_else      1982       if UNSIGNED_NUM_BITS(L) > R'length then 
           0 reconvergence      1984       return not(UNSIGNED_EQUAL(TO_UNSIGNED(L, R01'length), R01));
                                1985     end function "/="
           0 if                 1994         assert NO_WARNING
                                1995           report "NUMERIC_STD.""/="": null argument detected, returning TRUE"
                                1996           severity warning;
                                1997         return true;
                                1998       end if;
                                1999       
           0 implicit_else      1993       if (R'length < 1) then
                                1994         
           0 reconvergence      1999       R01 := TO_01(XR, 'X');
                                2000       
           0 if                 2001         assert NO_WARNING
                                2002           report "NUMERIC_STD.""/="": metavalue detected, returning TRUE"
                                2003           severity warning;
                                2004         return true;
                                2005       end if;
                                2006       
           0 implicit_else      2000       if (R01(R01'left) = 'X') then
                                2001         
           0 if                 2006                                             return true;
                                2007       end if;
                                2008       
           0 implicit_else      2006       if SIGNED_NUM_BITS(L) > R'length then 
           0 reconvergence      2008       return not(SIGNED_EQUAL(TO_SIGNED(L, R01'length), R01));
                                2009     end function "/="
           0 if                 2018         assert NO_WARNING
                                2019           report "NUMERIC_STD.""/="": null argument detected, returning TRUE"
                                2020           severity warning;
                                2021         return true;
                                2022       end if;
                                2023       
           0 implicit_else      2017       if (L'length < 1) then
                                2018         
           0 reconvergence      2023       L01 := TO_01(XL, 'X');
                                2024       
           0 if                 2025         assert NO_WARNING
                                2026           report "NUMERIC_STD.""/="": metavalue detected, returning TRUE"
                                2027           severity warning;
                                2028         return true;
                                2029       end if;
                                2030       
           0 implicit_else      2024       if (L01(L01'left) = 'X') then
                                2025         
           0 if                 2030                                               return true;
                                2031       end if;
                                2032       
           0 implicit_else      2030       if UNSIGNED_NUM_BITS(R) > L'length then 
           0 reconvergence      2032       return not(UNSIGNED_EQUAL(L01, TO_UNSIGNED(R, L01'length)));
                                2033     end function "/="
           0 if                 2042         assert NO_WARNING
                                2043           report "NUMERIC_STD.""/="": null argument detected, returning TRUE"
                                2044           severity warning;
                                2045         return true;
                                2046       end if;
                                2047       
           0 implicit_else      2041       if (L'length < 1) then
                                2042         
           0 reconvergence      2047       L01 := TO_01(XL, 'X');
                                2048       
           0 if                 2049         assert NO_WARNING
                                2050           report "NUMERIC_STD.""/="": metavalue detected, returning TRUE"
                                2051           severity warning;
                                2052         return true;
                                2053       end if;
                                2054       
           0 implicit_else      2048       if (L01(L01'left) = 'X') then
                                2049         
           0 if                 2054                                             return true;
                                2055       end if;
                                2056       
           0 implicit_else      2054       if SIGNED_NUM_BITS(R) > L'length then 
           0 reconvergence      2056       return not(SIGNED_EQUAL(L01, TO_SIGNED(R, L01'length)));
                                2057     end function "/="
           0 if                 2067                                                  return NAU;
                                2068       end if;
                                2069       
           4 implicit_else      2067       if ((L'length < 1) or (R'length < 1)) then 
           4 reconvergence      2069       L01 := TO_01(RESIZE(L, SIZE), 'X');
                                2070       
           0 if                 2070                                     return L01;
                                2071       end if;
                                2072       
           4 implicit_else      2070       if (L01(L01'left) = 'X') then 
           4 reconvergence      2072       R01 := TO_01(RESIZE(R, SIZE), 'X');
                                2073       
           0 if                 2073                                     return R01;
                                2074       end if;
                                2075       
           4 implicit_else      2073       if (R01(R01'left) = 'X') then 
           4 reconvergence      2075       if UNSIGNED_LESS(L01, R01) then
                                2076         
           2 if                 2076         return L01;
                                2077       else
                                2078         
           2 else               2078         return R01;
                                2079       end if;
                                2080     end function MINIMUM
           0 if                 2088                                                  return NAS;
                                2089       end if;
                                2090       
           4 implicit_else      2088       if ((L'length < 1) or (R'length < 1)) then 
           4 reconvergence      2090       L01 := TO_01(RESIZE(L, SIZE), 'X');
                                2091       
           0 if                 2091                                     return L01;
                                2092       end if;
                                2093       
           4 implicit_else      2091       if (L01(L01'left) = 'X') then 
           4 reconvergence      2093       R01 := TO_01(RESIZE(R, SIZE), 'X');
                                2094       
           0 if                 2094                                     return R01;
                                2095       end if;
                                2096       
           4 implicit_else      2094       if (R01(R01'left) = 'X') then 
           4 reconvergence      2096       if SIGNED_LESS(L01, R01) then
                                2097         
           2 if                 2097         return L01;
                                2098       else
                                2099         
           2 else               2099         return R01;
                                2100       end if;
                                2101     end function MINIMUM
           0 sequence           2107       return MINIMUM(TO_UNSIGNED(L, R'length), R);
                                2108     end function MINIMUM
           0 sequence           2114       return MINIMUM(TO_SIGNED(L, R'length), R);
                                2115     end function MINIMUM
           0 sequence           2121       return MINIMUM(L, TO_UNSIGNED(R, L'length));
                                2122     end function MINIMUM
           0 sequence           2128       return MINIMUM(L, TO_SIGNED(R, L'length));
                                2129     end function MINIMUM
           0 if                 2139                                                  return NAU;
                                2140       end if;
                                2141       
           4 implicit_else      2139       if ((L'length < 1) or (R'length < 1)) then 
           4 reconvergence      2141       L01 := TO_01(RESIZE(L, SIZE), 'X');
                                2142       
           0 if                 2142                                     return L01;
                                2143       end if;
                                2144       
           4 implicit_else      2142       if (L01(L01'left) = 'X') then 
           4 reconvergence      2144       R01 := TO_01(RESIZE(R, SIZE), 'X');
                                2145       
           0 if                 2145                                     return R01;
                                2146       end if;
                                2147       
           4 implicit_else      2145       if (R01(R01'left) = 'X') then 
           4 reconvergence      2147       if UNSIGNED_LESS(L01, R01) then
                                2148         
           2 if                 2148         return R01;
                                2149       else
                                2150         
           2 else               2150         return L01;
                                2151       end if;
                                2152     end function MAXIMUM
           0 if                 2160                                                  return NAS;
                                2161       end if;
                                2162       
           4 implicit_else      2160       if ((L'length < 1) or (R'length < 1)) then 
           4 reconvergence      2162       L01 := TO_01(RESIZE(L, SIZE), 'X');
                                2163       
           0 if                 2163                                     return L01;
                                2164       end if;
                                2165       
           4 implicit_else      2163       if (L01(L01'left) = 'X') then 
           4 reconvergence      2165       R01 := TO_01(RESIZE(R, SIZE), 'X');
                                2166       
           0 if                 2166                                     return R01;
                                2167       end if;
                                2168       
           4 implicit_else      2166       if (R01(R01'left) = 'X') then 
           4 reconvergence      2168       if SIGNED_LESS(L01, R01) then
                                2169         
           2 if                 2169         return R01;
                                2170       else
                                2171         
           2 else               2171         return L01;
                                2172       end if;
                                2173     end function MAXIMUM
           0 sequence           2179       return MAXIMUM(TO_UNSIGNED(L, R'length), R);
                                2180     end function MAXIMUM
           0 sequence           2186       return MAXIMUM(TO_SIGNED(L, R'length), R);
                                2187     end function MAXIMUM
           0 sequence           2193       return MAXIMUM(L, TO_UNSIGNED(R, L'length));
                                2194     end function MAXIMUM
           0 sequence           2200       return MAXIMUM(L, TO_SIGNED(R, L'length));
                                2201     end function MAXIMUM
          12 sequence           2208       if ((L'length < 1) or (R'length < 1)) then
                                2209         
           0 if                 2209         assert NO_WARNING
                                2210           report "NUMERIC_STD.""?>"": null detected, returning X"
                                2211           severity warning;
                                2212         return 'X';
                                2213       else
                                2214         
          12 else               2214         for i in L'range loop
                                2215           
          11 reconvergence      2221         for i in R'range loop
                                2222           
           1 if                 2216             report "NUMERIC_STD.""?>"": '-' found in compare string"
                                2217               severity error;
                                2218             return 'X';
                                2219           end if;
                                2220         end loop;
                                2221         
          90 else               2215           if L(i) = '-' then
                                2216             
           0 if                 2223             report "NUMERIC_STD.""?>"": '-' found in compare string"
                                2224               severity error;
                                2225             return 'X';
                                2226           end if;
                                2227         end loop;
                                2228         
          88 implicit_else      2222           if R(i) = '-' then
                                2223             
          11 reconvergence      2228         if IS_X(L) or IS_X(R) then
                                2229           
           4 if                 2229           return 'X';
                                2230         elsif L 
           7 sequence           2230                 > R then
                                2231           
           3 elsif              2231           return '1';
                                2232         else
                                2233           
           4 else               2233           return '0';
                                2234         end if;
                                2235       end if;
                                2236     end function "?>"
          14 sequence           2241       if ((L'length < 1) or (R'length < 1)) then
                                2242         
           0 if                 2242         assert NO_WARNING
                                2243           report "NUMERIC_STD.""?>"": null detected, returning X"
                                2244           severity warning;
                                2245         return 'X';
                                2246       else
                                2247         
          14 else               2247         for i in L'range loop
                                2248           
          13 reconvergence      2254         for i in R'range loop
                                2255           
           1 if                 2249             report "NUMERIC_STD.""?>"": '-' found in compare string"
                                2250               severity error;
                                2251             return 'X';
                                2252           end if;
                                2253         end loop;
                                2254         
         104 else               2248           if L(i) = '-' then
                                2249             
           0 if                 2256             report "NUMERIC_STD.""?>"": '-' found in compare string"
                                2257               severity error;
                                2258             return 'X';
                                2259           end if;
                                2260         end loop;
                                2261         
         104 implicit_else      2255           if R(i) = '-' then
                                2256             
          13 reconvergence      2261         if IS_X(L) or IS_X(R) then
                                2262           
           4 if                 2262           return 'X';
                                2263         elsif L 
           9 sequence           2263                 > R then
                                2264           
           5 elsif              2264           return '1';
                                2265         else
                                2266           
           4 else               2266           return '0';
                                2267         end if;
                                2268       end if;
                                2269     end function "?>"
           0 sequence           2274       return TO_UNSIGNED(L, R'length) ?> R;
                                2275     end function "?>"
           0 sequence           2280       return TO_SIGNED(L, R'length) ?> R;
                                2281     end function "?>"
           0 sequence           2286       return L ?> TO_UNSIGNED(R, L'length);
                                2287     end function "?>"
           0 sequence           2292       return L ?> TO_SIGNED(R, L'length);
                                2293     end function "?>"
          12 sequence           2300       if ((L'length < 1) or (R'length < 1)) then
                                2301         
           0 if                 2301         assert NO_WARNING
                                2302           report "NUMERIC_STD.""?<"": null detected, returning X"
                                2303           severity warning;
                                2304         return 'X';
                                2305       else
                                2306         
          12 else               2306         for i in L'range loop
                                2307           
          11 reconvergence      2313         for i in R'range loop
                                2314           
           1 if                 2308             report "NUMERIC_STD.""?<"": '-' found in compare string"
                                2309               severity error;
                                2310             return 'X';
                                2311           end if;
                                2312         end loop;
                                2313         
          90 else               2307           if L(i) = '-' then
                                2308             
           0 if                 2315             report "NUMERIC_STD.""?<"": '-' found in compare string"
                                2316               severity error;
                                2317             return 'X';
                                2318           end if;
                                2319         end loop;
                                2320         
          88 implicit_else      2314           if R(i) = '-' then
                                2315             
          11 reconvergence      2320         if IS_X(L) or IS_X(R) then
                                2321           
           4 if                 2321           return 'X';
                                2322         elsif L 
           7 sequence           2322                 < R then
                                2323           
           2 elsif              2323           return '1';
                                2324         else
                                2325           
           5 else               2325           return '0';
                                2326         end if;
                                2327       end if;
                                2328     end function "?<"
          14 sequence           2333       if ((L'length < 1) or (R'length < 1)) then
                                2334         
           0 if                 2334         assert NO_WARNING
                                2335           report "NUMERIC_STD.""?<"": null detected, returning X"
                                2336           severity warning;
                                2337         return 'X';
                                2338       else
                                2339         
          14 else               2339         for i in L'range loop
                                2340           
          13 reconvergence      2346         for i in R'range loop
                                2347           
           1 if                 2341             report "NUMERIC_STD.""?<"": '-' found in compare string"
                                2342               severity error;
                                2343             return 'X';
                                2344           end if;
                                2345         end loop;
                                2346         
         104 else               2340           if L(i) = '-' then
                                2341             
           0 if                 2348             report "NUMERIC_STD.""?<"": '-' found in compare string"
                                2349               severity error;
                                2350             return 'X';
                                2351           end if;
                                2352         end loop;
                                2353         
         104 implicit_else      2347           if R(i) = '-' then
                                2348             
          13 reconvergence      2353         if IS_X(L) or IS_X(R) then
                                2354           
           4 if                 2354           return 'X';
                                2355         elsif L 
           9 sequence           2355                 < R then
                                2356           
           4 elsif              2356           return '1';
                                2357         else
                                2358           
           5 else               2358           return '0';
                                2359         end if;
                                2360       end if;
                                2361     end function "?<"
           0 sequence           2366       return TO_UNSIGNED(L, R'length) ?< R;
                                2367     end function "?<"
           0 sequence           2372       return TO_SIGNED(L, R'length) ?< R;
                                2373     end function "?<"
           0 sequence           2378       return L ?< TO_UNSIGNED(R, L'length);
                                2379     end function "?<"
           0 sequence           2384       return L ?< TO_SIGNED(R, L'length);
                                2385     end function "?<"
          12 sequence           2392       if ((L'length < 1) or (R'length < 1)) then
                                2393         
           0 if                 2393         assert NO_WARNING
                                2394           report "NUMERIC_STD.""?<="": null detected, returning X"
                                2395           severity warning;
                                2396         return 'X';
                                2397       else
                                2398         
          12 else               2398         for i in L'range loop
                                2399           
          11 reconvergence      2405         for i in R'range loop
                                2406           
           1 if                 2400             report "NUMERIC_STD.""?<="": '-' found in compare string"
                                2401               severity error;
                                2402             return 'X';
                                2403           end if;
                                2404         end loop;
                                2405         
          90 else               2399           if L(i) = '-' then
                                2400             
           0 if                 2407             report "NUMERIC_STD.""?<="": '-' found in compare string"
                                2408               severity error;
                                2409             return 'X';
                                2410           end if;
                                2411         end loop;
                                2412         
          88 implicit_else      2406           if R(i) = '-' then
                                2407             
          11 reconvergence      2412         if IS_X(L) or IS_X(R) then
                                2413           
           4 if                 2413           return 'X';
                                2414         elsif L 
           7 sequence           2414                 <= R then
                                2415           
           5 elsif              2415           return '1';
                                2416         else
                                2417           
           2 else               2417           return '0';
                                2418         end if;
                                2419       end if;
                                2420     end function "?<="
          15 sequence           2425       if ((L'length < 1) or (R'length < 1)) then
                                2426         
           0 if                 2426         assert NO_WARNING
                                2427           report "NUMERIC_STD.""?<="": null detected, returning X"
                                2428           severity warning;
                                2429         return 'X';
                                2430       else
                                2431         
          15 else               2431         for i in L'range loop
                                2432           
          14 reconvergence      2438         for i in R'range loop
                                2439           
           1 if                 2433             report "NUMERIC_STD.""?<="": '-' found in compare string"
                                2434               severity error;
                                2435             return 'X';
                                2436           end if;
                                2437         end loop;
                                2438         
         111 else               2432           if L(i) = '-' then
                                2433             
           0 if                 2440             report "NUMERIC_STD.""?<="": '-' found in compare string"
                                2441               severity error;
                                2442             return 'X';
                                2443           end if;
                                2444         end loop;
                                2445         
         112 implicit_else      2439           if R(i) = '-' then
                                2440             
          14 reconvergence      2445         if IS_X(L) or IS_X(R) then
                                2446           
           4 if                 2446           return 'X';
                                2447         elsif L 
          10 sequence           2447                 <= R then
                                2448           
           8 elsif              2448           return '1';
                                2449         else
                                2450           
           2 else               2450           return '0';
                                2451         end if;
                                2452       end if;
                                2453     end function "?<="
           0 sequence           2458       return TO_UNSIGNED(L, R'length) ?<= R;
                                2459     end function "?<="
           0 sequence           2464       return TO_SIGNED(L, R'length) ?<= R;
                                2465     end function "?<="
           0 sequence           2470       return L ?<= TO_UNSIGNED(R, L'length);
                                2471     end function "?<="
           0 sequence           2476       return L ?<= TO_SIGNED(R, L'length);
                                2477     end function "?<="
          13 sequence           2484       if ((L'length < 1) or (R'length < 1)) then
                                2485         
           0 if                 2485         assert NO_WARNING
                                2486           report "NUMERIC_STD.""?>="": null detected, returning X"
                                2487           severity warning;
                                2488         return 'X';
                                2489       else
                                2490         
          13 else               2490         for i in L'range loop
                                2491           
          12 reconvergence      2497         for i in R'range loop
                                2498           
           1 if                 2492             report "NUMERIC_STD.""?>="": '-' found in compare string"
                                2493               severity error;
                                2494             return 'X';
                                2495           end if;
                                2496         end loop;
                                2497         
          98 else               2491           if L(i) = '-' then
                                2492             
           0 if                 2499             report "NUMERIC_STD.""?>="": '-' found in compare string"
                                2500               severity error;
                                2501             return 'X';
                                2502           end if;
                                2503         end loop;
                                2504         
          96 implicit_else      2498           if R(i) = '-' then
                                2499             
          12 reconvergence      2504         if IS_X(L) or IS_X(R) then
                                2505           
           4 if                 2505           return 'X';
                                2506         elsif L 
           8 sequence           2506                 >= R then
                                2507           
           7 elsif              2507           return '1';
                                2508         else
                                2509           
           1 else               2509           return '0';
                                2510         end if;
                                2511       end if;
                                2512     end function "?>="
          16 sequence           2517       if ((L'length < 1) or (R'length < 1)) then
                                2518         
           0 if                 2518         assert NO_WARNING
                                2519           report "NUMERIC_STD.""?>="": null detected, returning X"
                                2520           severity warning;
                                2521         return 'X';
                                2522       else
                                2523         
          16 else               2523         for i in L'range loop
                                2524           
          15 reconvergence      2530         for i in R'range loop
                                2531           
           1 if                 2525             report "NUMERIC_STD.""?>="": '-' found in compare string"
                                2526               severity error;
                                2527             return 'X';
                                2528           end if;
                                2529         end loop;
                                2530         
         119 else               2524           if L(i) = '-' then
                                2525             
           0 if                 2532             report "NUMERIC_STD.""?>="": '-' found in compare string"
                                2533               severity error;
                                2534             return 'X';
                                2535           end if;
                                2536         end loop;
                                2537         
         120 implicit_else      2531           if R(i) = '-' then
                                2532             
          15 reconvergence      2537         if IS_X(L) or IS_X(R) then
                                2538           
           4 if                 2538           return 'X';
                                2539         elsif L 
          11 sequence           2539                 >= R then
                                2540           
           8 elsif              2540           return '1';
                                2541         else
                                2542           
           3 else               2542           return '0';
                                2543         end if;
                                2544       end if;
                                2545     end function "?>="
           0 sequence           2550       return TO_UNSIGNED(L, R'length) ?>= R;
                                2551     end function "?>="
           0 sequence           2556       return TO_SIGNED(L, R'length) ?>= R;
                                2557     end function "?>="
           0 sequence           2562       return L ?>= TO_UNSIGNED(R, L'length);
                                2563     end function "?>="
           0 sequence           2568       return L ?>= TO_SIGNED(R, L'length);
                                2569     end function "?>="
          17 sequence           2585       if ((L'length < 1) or (R'length < 1)) then
                                2586         
           0 if                 2586         assert NO_WARNING
                                2587           report "NUMERIC_STD.""?="": null detected, returning X"
                                2588           severity warning;
                                2589         return 'X';
                                2590       else
                                2591         
          17 else               2591         LX     := RESIZE(XL, SIZE);
                                2592         RX     := RESIZE(XR, SIZE);
                                2593         result := '1';
                                2594         for i in LX'low to LX'high loop
                                2595           
         136 loop_body          2595           result1 := LX(i) ?= RX(i);
                                2596           if result1 = 'U' then
                                2597             
          16 reconvergence      2604         return result;
                                2605       end if;
                                2606     end function "?="
           1 if                 2597             return 'U';
                                2598           elsif 
         135 sequence           2598                 result1 = 'X' or result = 'X' then
                                2599             
          31 elsif              2599             result := 'X';
                                2600           else
                                2601             
         104 else               2601             result := result and result1;
                                2602           end if;
                                2603         end loop;
                                2604         
          16 sequence           2619       if ((L'length < 1) or (R'length < 1)) then
                                2620         
           0 if                 2620         assert NO_WARNING
                                2621           report "NUMERIC_STD.""?="": null detected, returning X"
                                2622           severity warning;
                                2623         return 'X';
                                2624       else
                                2625         
          16 else               2625         LX     := RESIZE(XL, SIZE);
                                2626         RX     := RESIZE(XR, SIZE);
                                2627         result := '1';
                                2628         for i in LX'low to LX'high loop
                                2629           
         128 loop_body          2629           result1 := LX(i) ?= RX(i);
                                2630           if result1 = 'U' then
                                2631             
          15 reconvergence      2638         return result;
                                2639       end if;
                                2640     end function "?="
           1 if                 2631             return 'U';
                                2632           elsif 
         127 sequence           2632                 result1 = 'X' or result = 'X' then
                                2633             
          31 elsif              2633             result := 'X';
                                2634           else
                                2635             
          96 else               2635             result := result and result1;
                                2636           end if;
                                2637         end loop;
                                2638         
           0 sequence           2645       return TO_UNSIGNED(L, R'length) ?= R;
                                2646     end function "?="
           0 sequence           2651       return TO_SIGNED(L, R'length) ?= R;
                                2652     end function "?="
           0 sequence           2657       return L ?= TO_UNSIGNED(R, L'length);
                                2658     end function "?="
           0 sequence           2663       return L ?= TO_SIGNED(R, L'length);
                                2664     end function "?="
          16 sequence           2679       if ((L'length < 1) or (R'length < 1)) then
                                2680         
           0 if                 2680         assert NO_WARNING
                                2681           report "NUMERIC_STD.""?/="": null detected, returning X"
                                2682           severity warning;
                                2683         return 'X';
                                2684       else
                                2685         
          16 else               2685         LX     := RESIZE(XL, SIZE);
                                2686         RX     := RESIZE(XR, SIZE);
                                2687         result := '0';
                                2688         for i in LX'low to LX'high loop
                                2689           
         128 loop_body          2689           result1 := LX(i) ?/= RX(i);
                                2690           if result1 = 'U' then
                                2691             
          15 reconvergence      2698         return result;
                                2699       end if;
                                2700     end function "?/="
           1 if                 2691             return 'U';
                                2692           elsif 
         127 sequence           2692                 result1 = 'X' or result = 'X' then
                                2693             
          31 elsif              2693             result := 'X';
                                2694           else
                                2695             
          96 else               2695             result := result or result1;
                                2696           end if;
                                2697         end loop;
                                2698         
          16 sequence           2713       if ((L'length < 1) or (R'length < 1)) then
                                2714         
           0 if                 2714         assert NO_WARNING
                                2715           report "NUMERIC_STD.""?/="": null detected, returning X"
                                2716           severity warning;
                                2717         return 'X';
                                2718       else
                                2719         
          16 else               2719         LX     := RESIZE(XL, SIZE);
                                2720         RX     := RESIZE(XR, SIZE);
                                2721         result := '0';
                                2722         for i in LX'low to LX'high loop
                                2723           
         128 loop_body          2723           result1 := LX(i) ?/= RX(i);
                                2724           if result1 = 'U' then
                                2725             
          15 reconvergence      2732         return result;
                                2733       end if;
                                2734     end function "?/="
           1 if                 2725             return 'U';
                                2726           elsif 
         127 sequence           2726                 result1 = 'X' or result = 'X' then
                                2727             
          31 elsif              2727             result := 'X';
                                2728           else
                                2729             
          96 else               2729             result := result or result1;
                                2730           end if;
                                2731         end loop;
                                2732         
           0 sequence           2739       return TO_UNSIGNED(L, R'length) ?/= R;
                                2740     end function "?/="
           0 sequence           2745       return TO_SIGNED(L, R'length) ?/= R;
                                2746     end function "?/="
           0 sequence           2751       return L ?/= TO_UNSIGNED(R, L'length);
                                2752     end function "?/="
           0 sequence           2757       return L ?/= TO_SIGNED(R, L'length);
                                2758     end function "?/="
           0 if                 2766                                return NAU;
                                2767       end if;
                                2768       
          12 implicit_else      2766       if (ARG'length < 1) then 
          12 reconvergence      2768       return UNRESOLVED_UNSIGNED(XSLL(STD_ULOGIC_VECTOR(ARG), COUNT));
                                2769     end function SHIFT_LEFT
           0 if                 2775                                return NAU;
                                2776       end if;
                                2777       
          16 implicit_else      2775       if (ARG'length < 1) then 
          16 reconvergence      2777       return UNRESOLVED_UNSIGNED(XSRL(STD_ULOGIC_VECTOR(ARG), COUNT));
                                2778     end function SHIFT_RIGHT
           0 if                 2784                                return NAS;
                                2785       end if;
                                2786       
          12 implicit_else      2784       if (ARG'length < 1) then 
          12 reconvergence      2786       return UNRESOLVED_SIGNED(XSLL(STD_ULOGIC_VECTOR(ARG), COUNT));
                                2787     end function SHIFT_LEFT
           0 if                 2793                                return NAS;
                                2794       end if;
                                2795       
           8 implicit_else      2793       if (ARG'length < 1) then 
           8 reconvergence      2795       return UNRESOLVED_SIGNED(XSRA(STD_ULOGIC_VECTOR(ARG), COUNT));
                                2796     end function SHIFT_RIGHT
           0 if                 2804                                return NAU;
                                2805       end if;
                                2806       
           4 implicit_else      2804       if (ARG'length < 1) then 
           4 reconvergence      2806       return UNRESOLVED_UNSIGNED(XROL(STD_ULOGIC_VECTOR(ARG), COUNT));
                                2807     end function ROTATE_LEFT
           0 if                 2813                                return NAU;
                                2814       end if;
                                2815       
           4 implicit_else      2813       if (ARG'length < 1) then 
           4 reconvergence      2815       return UNRESOLVED_UNSIGNED(XROR(STD_ULOGIC_VECTOR(ARG), COUNT));
                                2816     end function ROTATE_RIGHT
           0 if                 2823                                return NAS;
                                2824       end if;
                                2825       
           4 implicit_else      2823       if (ARG'length < 1) then 
           4 reconvergence      2825       return UNRESOLVED_SIGNED(XROL(STD_ULOGIC_VECTOR(ARG), COUNT));
                                2826     end function ROTATE_LEFT
           0 if                 2832                                return NAS;
                                2833       end if;
                                2834       
           4 implicit_else      2832       if (ARG'length < 1) then 
           4 reconvergence      2834       return UNRESOLVED_SIGNED(XROR(STD_ULOGIC_VECTOR(ARG), COUNT));
                                2835     end function ROTATE_RIGHT
           4 sequence           2847       if (COUNT >= 0) then
                                2848         
           2 if                 2848         return SHIFT_LEFT(ARG, COUNT);
                                2849       else
                                2850         
           2 else               2850         return SHIFT_RIGHT(ARG, -COUNT);
                                2851       end if;
                                2852     end function "sll"
           4 sequence           2862       if (COUNT >= 0) then
                                2863         
           2 if                 2863         return SHIFT_LEFT(ARG, COUNT);
                                2864       else
                                2865         
           2 else               2865         return UNRESOLVED_SIGNED(SHIFT_RIGHT(UNRESOLVED_UNSIGNED(ARG), -COUNT));
                                2866       end if;
                                2867     end function "sll"
           4 sequence           2877       if (COUNT >= 0) then
                                2878         
           2 if                 2878         return SHIFT_RIGHT(ARG, COUNT);
                                2879       else
                                2880         
           2 else               2880         return SHIFT_LEFT(ARG, -COUNT);
                                2881       end if;
                                2882     end function "srl"
           4 sequence           2892       if (COUNT >= 0) then
                                2893         
           2 if                 2893         return UNRESOLVED_SIGNED(SHIFT_RIGHT(UNRESOLVED_UNSIGNED(ARG), COUNT));
                                2894       else
                                2895         
           2 else               2895         return SHIFT_LEFT(ARG, -COUNT);
                                2896       end if;
                                2897     end function "srl"
           4 sequence           2907       if (COUNT >= 0) then
                                2908         
           2 if                 2908         return ROTATE_LEFT(ARG, COUNT);
                                2909       else
                                2910         
           2 else               2910         return ROTATE_RIGHT(ARG, -COUNT);
                                2911       end if;
                                2912     end function "rol"
           4 sequence           2922       if (COUNT >= 0) then
                                2923         
           2 if                 2923         return ROTATE_LEFT(ARG, COUNT);
                                2924       else
                                2925         
           2 else               2925         return ROTATE_RIGHT(ARG, -COUNT);
                                2926       end if;
                                2927     end function "rol"
           4 sequence           2937       if (COUNT >= 0) then
                                2938         
           2 if                 2938         return ROTATE_RIGHT(ARG, COUNT);
                                2939       else
                                2940         
           2 else               2940         return ROTATE_LEFT(ARG, -COUNT);
                                2941       end if;
                                2942     end function "ror"
           4 sequence           2952       if (COUNT >= 0) then
                                2953         
           2 if                 2953         return ROTATE_RIGHT(ARG, COUNT);
                                2954       else
                                2955         
           2 else               2955         return ROTATE_LEFT(ARG, -COUNT);
                                2956       end if;
                                2957     end function "ror"
           8 sequence           2967       if (COUNT >= 0) then
                                2968         
           4 if                 2968         return SHIFT_LEFT(ARG, COUNT);
                                2969       else
                                2970         
           4 else               2970         return SHIFT_RIGHT(ARG, -COUNT);
                                2971       end if;
                                2972     end function "sla"
           8 sequence           2982       if (COUNT >= 0) then
                                2983         
           4 if                 2983         return SHIFT_LEFT(ARG, COUNT);
                                2984       else
                                2985         
           4 else               2985         return SHIFT_RIGHT(ARG, -COUNT);
                                2986       end if;
                                2987     end function "sla"
           8 sequence           2997       if (COUNT >= 0) then
                                2998         
           4 if                 2998         return SHIFT_RIGHT(ARG, COUNT);
                                2999       else
                                3000         
           4 else               3000         return SHIFT_LEFT(ARG, -COUNT);
                                3001       end if;
                                3002     end function "sra"
           8 sequence           3012       if (COUNT >= 0) then
                                3013         
           4 if                 3013         return SHIFT_RIGHT(ARG, COUNT);
                                3014       else
                                3015         
           4 else               3015         return SHIFT_LEFT(ARG, -COUNT);
                                3016       end if;
                                3017     end function "sra"
           0 if                 3149                              return NAS;
                                3150       end if;
                                3151       
         282 implicit_else      3149       if (NEW_SIZE < 1) then 
           0 if                 3151                                return RESULT;
                                3152       end if;
                                3153       
         282 implicit_else      3151       if (ARG'length = 0) then 
         282 reconvergence      3153       RESULT := (others => ARG(ARG'left));
                                3154       
         282 if                 3155         RESULT(BOUND downto 0) := INVEC(BOUND downto 0);
                                3156       end if;
                                3157       
           0 implicit_else      3154       if BOUND >= 0 then
                                3155         
         282 reconvergence      3157       return RESULT;
                                3158     end function RESIZE
           0 if                 3169                              return NAU;
                                3170       end if;
                                3171       
         276 implicit_else      3169       if (NEW_SIZE < 1) then 
           0 if                 3171                               return RESULT;
                                3172       end if;
                                3173       
         276 implicit_else      3171       if XARG'length = 0 then 
         276 reconvergence      3173       if (RESULT'length < ARG'length) then
                                3174         
           0 if                 3174         RESULT(RESULT'left downto 0) := XARG(RESULT'left downto 0);
                                3175       else
                                3176         
         276 else               3176         RESULT(RESULT'left downto XARG'left+1) := (others => '0');
                                3177         RESULT(XARG'left downto 0)             := XARG;
                                3178       end if;
                                3179       
         276 reconvergence      3179       return RESULT;
                                3180     end function RESIZE
           0 sequence           3185       return RESIZE (ARG      => ARG,
                                3186                      NEW_SIZE => SIZE_RES'length);
                                3187     end function RESIZE
           0 sequence           3192       return RESIZE (ARG      => ARG,
                                3193                      NEW_SIZE => SIZE_RES'length);
                                3194     end function RESIZE
           0 if                 3029         assert NO_WARNING
                                3030           report "NUMERIC_STD.TO_INTEGER: null detected, returning 0"
                                3031           severity warning;
                                3032         return 0;
                                3033       end if;
                                3034       
           0 implicit_else      3028       if (ARG'length < 1) then
                                3029         
           0 reconvergence      3034       XARG := TO_01(XXARG, 'X');
                                3035       
           0 if                 3036         assert NO_WARNING
                                3037           report "NUMERIC_STD.TO_INTEGER: metavalue detected, returning 0"
                                3038           severity warning;
                                3039         return 0;
                                3040       end if;
                                3041       
           0 implicit_else      3035       if (XARG(XARG'left) = 'X') then
                                3036         
           0 reconvergence      3041       for I in XARG'range loop
                                3042         
           0 loop_body          3042         RESULT := RESULT+RESULT;
                                3043         
           0 reconvergence      3047       return RESULT;
                                3048     end function TO_INTEGER
           0 if                 3044           RESULT := RESULT + 1;
                                3045         end if;
                                3046       end loop;
                                3047       
           0 else               3043         if XARG(I) = '1' then
                                3044           
           0 if                 3055         assert NO_WARNING
                                3056           report "NUMERIC_STD.TO_INTEGER: null detected, returning 0"
                                3057           severity warning;
                                3058         return 0;
                                3059       end if;
                                3060       
           0 implicit_else      3054       if (ARG'length < 1) then
                                3055         
           0 reconvergence      3060       XARG := TO_01(ARG, 'X');
                                3061       
           0 if                 3062         assert NO_WARNING
                                3063           report "NUMERIC_STD.TO_INTEGER: metavalue detected, returning 0"
                                3064           severity warning;
                                3065         return 0;
                                3066       end if;
                                3067       
           0 implicit_else      3061       if (XARG(XARG'left) = 'X') then
                                3062         
           0 reconvergence      3067       if XARG(XARG'left) = '0' then
                                3068         
           0 if                 3068         return TO_INTEGER(UNRESOLVED_UNSIGNED(XARG));
                                3069       else
                                3070         
           0 else               3070         return (- (TO_INTEGER(UNRESOLVED_UNSIGNED(- (XARG + 1)))) -1);
                                3071       end if;
                                3072     end function TO_INTEGER
           0 if                 3079                          return NAU;
                                3080       end if;
                                3081       
          16 implicit_else      3079       if (SIZE < 1) then 
          16 reconvergence      3081       for I in 0 to RESULT'left loop
                                3082         
          64 loop_body          3082         if (I_VAL mod 2) = 0 then
                                3083           
          64 reconvergence      3086         I_VAL          := I_VAL/2;
                                3087       end loop;
                                3088       
          32 if                 3083           RESULT(I) := '0';
                                3084         else 
          32 else               3084              RESULT(I) := '1';
                                3085         end if;
                                3086         
           0 if                 3089         assert NO_WARNING
                                3090           report "NUMERIC_STD.TO_UNSIGNED: vector truncated"
                                3091           severity warning;
                                3092       end if;
                                3093       
          16 implicit_else      3088       if not(I_VAL = 0) then
                                3089         
          16 reconvergence      3093       return RESULT;
                                3094     end function TO_UNSIGNED
           0 sequence           3102       if (SIZE < 1) then 
           0 if                 3102                          return NAS;
                                3103       end if;
                                3104       
           0 if                 3105         B_VAL := '1';
                                3106         I_VAL := -(ARG+1);
                                3107       end if;
                                3108       
           0 implicit_else      3104       if (ARG < 0) then
                                3105         
           0 reconvergence      3108       for I in 0 to RESULT'left loop
                                3109         
           0 loop_body          3109         if (I_VAL mod 2) = 0 then
                                3110           
           0 reconvergence      3114         I_VAL := I_VAL/2;
                                3115       end loop;
                                3116       
           0 if                 3110           RESULT(I) := B_VAL;
                                3111         else
                                3112           
           0 else               3112           RESULT(I) := not B_VAL;
                                3113         end if;
                                3114         
           0 if                 3117         assert NO_WARNING
                                3118           report "NUMERIC_STD.TO_SIGNED: vector truncated"
                                3119           severity warning;
                                3120       end if;
                                3121       
           0 implicit_else      3116       if ((I_VAL /= 0) or (B_VAL /= RESULT(RESULT'left))) then
                                3117         
           0 reconvergence      3121       return RESULT;
                                3122     end function TO_SIGNED
           0 sequence           3127       return TO_UNSIGNED (ARG  => ARG,
                                3128                           SIZE => SIZE_RES'length);
                                3129     end function TO_UNSIGNED
           0 sequence           3134       return TO_SIGNED (ARG  => ARG,
                                3135                         SIZE => SIZE_RES'length);
                                3136     end function TO_SIGNED
           4 sequence           3202       RESULT := UNRESOLVED_UNSIGNED(not(STD_ULOGIC_VECTOR(L)));
                                3203       return RESULT;
                                3204     end function "not"
           0 sequence           3210       RESULT := UNRESOLVED_UNSIGNED(STD_ULOGIC_VECTOR(L) and
                                3211                                     STD_ULOGIC_VECTOR(R));
                                3212       return RESULT;
                                3213     end function "and"
           0 sequence           3219       RESULT := UNRESOLVED_UNSIGNED(STD_ULOGIC_VECTOR(L) or
                                3220                                     STD_ULOGIC_VECTOR(R));
                                3221       return RESULT;
                                3222     end function "or"
           0 sequence           3228       RESULT := UNRESOLVED_UNSIGNED(STD_ULOGIC_VECTOR(L) nand
                                3229                                     STD_ULOGIC_VECTOR(R));
                                3230       return RESULT;
                                3231     end function "nand"
           0 sequence           3237       RESULT := UNRESOLVED_UNSIGNED(STD_ULOGIC_VECTOR(L) nor
                                3238                                     STD_ULOGIC_VECTOR(R));
                                3239       return RESULT;
                                3240     end function "nor"
           0 sequence           3246       RESULT := UNRESOLVED_UNSIGNED(STD_ULOGIC_VECTOR(L) xor
                                3247                                     STD_ULOGIC_VECTOR(R));
                                3248       return RESULT;
                                3249     end function "xor"
           0 sequence           3259       RESULT := UNRESOLVED_UNSIGNED(STD_ULOGIC_VECTOR(L) xnor
                                3260                                     STD_ULOGIC_VECTOR(R));
                                3261       return RESULT;
                                3262     end function "xnor"
           4 sequence           3268       RESULT := UNRESOLVED_SIGNED(not(STD_ULOGIC_VECTOR(L)));
                                3269       return RESULT;
                                3270     end function "not"
           0 sequence           3276       RESULT := UNRESOLVED_SIGNED(STD_ULOGIC_VECTOR(L) and STD_ULOGIC_VECTOR(R));
                                3277       return RESULT;
                                3278     end function "and"
           0 sequence           3284       RESULT := UNRESOLVED_SIGNED(STD_ULOGIC_VECTOR(L) or STD_ULOGIC_VECTOR(R));
                                3285       return RESULT;
                                3286     end function "or"
           0 sequence           3292       RESULT := UNRESOLVED_SIGNED(STD_ULOGIC_VECTOR(L) nand
                                3293                                   STD_ULOGIC_VECTOR(R));
                                3294       return RESULT;
                                3295     end function "nand"
           0 sequence           3301       RESULT := UNRESOLVED_SIGNED(STD_ULOGIC_VECTOR(L) nor STD_ULOGIC_VECTOR(R));
                                3302       return RESULT;
                                3303     end function "nor"
           0 sequence           3309       RESULT := UNRESOLVED_SIGNED(STD_ULOGIC_VECTOR(L) xor STD_ULOGIC_VECTOR(R));
                                3310       return RESULT;
                                3311     end function "xor"
           0 sequence           3321       RESULT := UNRESOLVED_SIGNED(STD_ULOGIC_VECTOR(L) xnor
                                3322                                   STD_ULOGIC_VECTOR(R));
                                3323       return RESULT;
                                3324     end function "xnor"
         144 sequence           3330       return UNRESOLVED_UNSIGNED (L and STD_ULOGIC_VECTOR(R));
                                3331     end function "and"
         144 sequence           3337       return UNRESOLVED_UNSIGNED (STD_ULOGIC_VECTOR(L) and R);
                                3338     end function "and"
         144 sequence           3344       return UNRESOLVED_UNSIGNED (L or STD_ULOGIC_VECTOR(R));
                                3345     end function "or"
         144 sequence           3351       return UNRESOLVED_UNSIGNED (STD_ULOGIC_VECTOR(L) or R);
                                3352     end function "or"
         144 sequence           3358       return UNRESOLVED_UNSIGNED (L nand STD_ULOGIC_VECTOR(R));
                                3359     end function "nand"
         144 sequence           3365       return UNRESOLVED_UNSIGNED (STD_ULOGIC_VECTOR(L) nand R);
                                3366     end function "nand"
         144 sequence           3372       return UNRESOLVED_UNSIGNED (L nor STD_ULOGIC_VECTOR(R));
                                3373     end function "nor"
         144 sequence           3379       return UNRESOLVED_UNSIGNED (STD_ULOGIC_VECTOR(L) nor R);
                                3380     end function "nor"
         144 sequence           3386       return UNRESOLVED_UNSIGNED (L xor STD_ULOGIC_VECTOR(R));
                                3387     end function "xor"
         144 sequence           3393       return UNRESOLVED_UNSIGNED (STD_ULOGIC_VECTOR(L) xor R);
                                3394     end function "xor"
         144 sequence           3404       return UNRESOLVED_UNSIGNED (L xnor STD_ULOGIC_VECTOR(R));
                                3405     end function "xnor"
         144 sequence           3415       return UNRESOLVED_UNSIGNED (STD_ULOGIC_VECTOR(L) xnor R);
                                3416     end function "xnor"
         144 sequence           3422       return UNRESOLVED_SIGNED (L and STD_ULOGIC_VECTOR(R));
                                3423     end function "and"
         144 sequence           3429       return UNRESOLVED_SIGNED (STD_ULOGIC_VECTOR(L) and R);
                                3430     end function "and"
         144 sequence           3436       return UNRESOLVED_SIGNED (L or STD_ULOGIC_VECTOR(R));
                                3437     end function "or"
         144 sequence           3443       return UNRESOLVED_SIGNED (STD_ULOGIC_VECTOR(L) or R);
                                3444     end function "or"
         144 sequence           3450       return UNRESOLVED_SIGNED (L nand STD_ULOGIC_VECTOR(R));
                                3451     end function "nand"
         144 sequence           3457       return UNRESOLVED_SIGNED (STD_ULOGIC_VECTOR(L) nand R);
                                3458     end function "nand"
         144 sequence           3464       return UNRESOLVED_SIGNED (L nor STD_ULOGIC_VECTOR(R));
                                3465     end function "nor"
         144 sequence           3471       return UNRESOLVED_SIGNED (STD_ULOGIC_VECTOR(L) nor R);
                                3472     end function "nor"
         144 sequence           3478       return UNRESOLVED_SIGNED (L xor STD_ULOGIC_VECTOR(R));
                                3479     end function "xor"
         144 sequence           3485       return UNRESOLVED_SIGNED (STD_ULOGIC_VECTOR(L) xor R);
                                3486     end function "xor"
         144 sequence           3496       return UNRESOLVED_SIGNED (L xnor STD_ULOGIC_VECTOR(R));
                                3497     end function "xnor"
         144 sequence           3507       return UNRESOLVED_SIGNED (STD_ULOGIC_VECTOR(L) xnor R);
                                3508     end function "xnor"
           0 sequence           3518       return and (STD_ULOGIC_VECTOR (L));
                                3519     end function "and"
           0 sequence           3540       return nand (STD_ULOGIC_VECTOR (L));
                                3541     end function "nand"
           0 sequence           3562       return or (STD_ULOGIC_VECTOR (L));
                                3563     end function "or"
           0 sequence           3584       return nor (STD_ULOGIC_VECTOR (L));
                                3585     end function "nor"
           0 sequence           3606       return xor (STD_ULOGIC_VECTOR (L));
                                3607     end function "xor"
           0 sequence           3628       return xnor (STD_ULOGIC_VECTOR (L));
                                3629     end function "xnor"
           0 sequence           3529       return and (STD_ULOGIC_VECTOR (L));
                                3530     end function "and"
           0 sequence           3551       return nand (STD_ULOGIC_VECTOR (L));
                                3552     end function "nand"
           0 sequence           3573       return or (STD_ULOGIC_VECTOR (L));
                                3574     end function "or"
           0 sequence           3595       return nor (STD_ULOGIC_VECTOR (L));
                                3596     end function "nor"
           0 sequence           3617       return xor (STD_ULOGIC_VECTOR (L));
                                3618     end function "xor"
           0 sequence           3639       return xnor (STD_ULOGIC_VECTOR (L));
                                3640     end function "xnor"
         162 sequence           3666       return MATCH_TABLE(L, R);
                                3667     end function STD_MATCH
           0 if                 3675         assert NO_WARNING
                                3676           report "NUMERIC_STD.STD_MATCH: null detected, returning FALSE"
                                3677           severity warning;
                                3678         return false;
                                3679       end if;
                                3680       
          16 implicit_else      3674       if ((L'length < 1) or (R'length < 1)) then
                                3675         
          16 reconvergence      3680       if LV'length /= RV'length then
                                3681         
           2 if                 3681         assert NO_WARNING
                                3682           report "NUMERIC_STD.STD_MATCH: L'LENGTH /= R'LENGTH, returning FALSE"
                                3683           severity warning;
                                3684         return false;
                                3685       else
                                3686         
          14 else               3686         for I in LV'low to LV'high loop
                                3687           
           7 reconvergence      3691         return true;
                                3692       end if;
                                3693     end function STD_MATCH
           7 if                 3688             return false;
                                3689           end if;
                                3690         end loop;
                                3691         
          91 else               3687           if not (MATCH_TABLE(LV(I), RV(I))) then
                                3688             
           0 if                 3701         assert NO_WARNING
                                3702           report "NUMERIC_STD.STD_MATCH: null detected, returning FALSE"
                                3703           severity warning;
                                3704         return false;
                                3705       end if;
                                3706       
          16 implicit_else      3700       if ((L'length < 1) or (R'length < 1)) then
                                3701         
          16 reconvergence      3706       if LV'length /= RV'length then
                                3707         
           2 if                 3707         assert NO_WARNING
                                3708           report "NUMERIC_STD.STD_MATCH: L'LENGTH /= R'LENGTH, returning FALSE"
                                3709           severity warning;
                                3710         return false;
                                3711       else
                                3712         
          14 else               3712         for I in LV'low to LV'high loop
                                3713           
           7 reconvergence      3717         return true;
                                3718       end if;
                                3719     end function STD_MATCH
           7 if                 3714             return false;
                                3715           end if;
                                3716         end loop;
                                3717         
          91 else               3713           if not (MATCH_TABLE(LV(I), RV(I))) then
                                3714             
           0 if                 3727         assert NO_WARNING
                                3728           report "NUMERIC_STD.STD_MATCH: null detected, returning FALSE"
                                3729           severity warning;
                                3730         return false;
                                3731       end if;
                                3732       
          28 implicit_else      3726       if ((L'length < 1) or (R'length < 1)) then
                                3727         
          28 reconvergence      3732       if LV'length /= RV'length then
                                3733         
           0 if                 3733         assert NO_WARNING
                                3734           report "NUMERIC_STD.STD_MATCH: L'LENGTH /= R'LENGTH, returning FALSE"
                                3735           severity warning;
                                3736         return false;
                                3737       else
                                3738         
          28 else               3738         for I in LV'low to LV'high loop
                                3739           
          14 reconvergence      3743         return true;
                                3744       end if;
                                3745     end function STD_MATCH
          14 if                 3740             return false;
                                3741           end if;
                                3742         end loop;
                                3743         
         182 else               3739           if not (MATCH_TABLE(LV(I), RV(I))) then
                                3740             
           0 if                 3759         assert NO_WARNING
                                3760           report "NUMERIC_STD.TO_01: null detected, returning NAU"
                                3761           severity warning;
                                3762         return NAU;
                                3763       end if;
                                3764       
         206 implicit_else      3758       if (S'length < 1) then
                                3759         
         206 reconvergence      3764       return UNRESOLVED_UNSIGNED(TO_01(STD_ULOGIC_VECTOR(S), XMAP));
                                3765     end function TO_01
           0 if                 3772         assert NO_WARNING
                                3773           report "NUMERIC_STD.TO_01: null detected, returning NAS"
                                3774           severity warning;
                                3775         return NAS;
                                3776       end if;
                                3777       
         219 implicit_else      3771       if (S'length < 1) then
                                3772         
         219 reconvergence      3777       return UNRESOLVED_SIGNED(TO_01(STD_ULOGIC_VECTOR(S), XMAP));
                                3778     end function TO_01
           1 sequence           3783       return UNRESOLVED_UNSIGNED(TO_X01(STD_ULOGIC_VECTOR(S)));
                                3784     end function TO_X01
           1 sequence           3789       return UNRESOLVED_SIGNED(TO_X01(STD_ULOGIC_VECTOR(S)));
                                3790     end function TO_X01
           1 sequence           3795       return UNRESOLVED_UNSIGNED(TO_X01Z(STD_ULOGIC_VECTOR(S)));
                                3796     end function TO_X01Z
           1 sequence           3801       return UNRESOLVED_SIGNED(TO_X01Z(STD_ULOGIC_VECTOR(S)));
                                3802     end function TO_X01Z
           1 sequence           3807       return UNRESOLVED_UNSIGNED(TO_UX01(STD_ULOGIC_VECTOR(S)));
                                3808     end function TO_UX01
           1 sequence           3813       return UNRESOLVED_SIGNED(TO_UX01(STD_ULOGIC_VECTOR(S)));
                                3814     end function TO_UX01
          85 sequence           3819       return IS_X(STD_ULOGIC_VECTOR(S));
                                3820     end function IS_X
         105 sequence           3825       return IS_X(STD_ULOGIC_VECTOR(S));
                                3826     end function IS_X
           0 sequence           3833       return TO_OSTRING(STD_ULOGIC_VECTOR (value));
                                3834     end function TO_OSTRING
           0 sequence           3842       return TO_OSTRING(pad & STD_ULOGIC_VECTOR (value));
                                3843     end function TO_OSTRING
           0 sequence           3847       return to_hstring(STD_ULOGIC_VECTOR (value));
                                3848     end function to_hstring
           0 sequence           3856       return to_hstring(pad & STD_ULOGIC_VECTOR (value));
                                3857     end function to_hstring
           0 sequence           3863       READ (L     => L,
                                3864             VALUE => ivalue,
                                3865             GOOD  => GOOD);
                                3866       VALUE := UNSIGNED(ivalue);
                                3867     end procedure READ
           0 sequence           3872       READ (L      => L,
                                3873              VALUE => ivalue);
                                3874       VALUE := UNSIGNED (ivalue);
                                3875     end procedure READ
           0 sequence           3881       READ (L     => L,
                                3882             VALUE => ivalue,
                                3883             GOOD  => GOOD);
                                3884       VALUE := SIGNED(ivalue);
                                3885     end procedure READ
           0 sequence           3890       READ (L      => L,
                                3891              VALUE => ivalue);
                                3892       VALUE := SIGNED (ivalue);
                                3893     end procedure READ
           0 sequence           3899       ivalue := STD_ULOGIC_VECTOR (VALUE);
                                3900       WRITE (L          => L,
                                3901               VALUE     => ivalue,
                                3902               JUSTIFIED => JUSTIFIED,
                                3903               FIELD     => FIELD);
                                3904     end procedure WRITE
           0 sequence           3910       ivalue := STD_ULOGIC_VECTOR (VALUE);
                                3911       WRITE (L          => L,
                                3912               VALUE     => ivalue,
                                3913               JUSTIFIED => JUSTIFIED,
                                3914               FIELD     => FIELD);
                                3915     end procedure WRITE
           0 sequence           3921       OREAD (L     => L,
                                3922              VALUE => ivalue,
                                3923              GOOD  => GOOD);
                                3924       VALUE := UNSIGNED(ivalue);
                                3925     end procedure OREAD
           0 sequence           3935       OREAD (L      => L,
                                3936               VALUE => ivalue,            -- Read padded STRING
                                3937               GOOD  => ok);
                                3938       -- Bail out if there was a bad read
                                3939       
           0 if                 3940         GOOD := false;
                                3941         return;
                                3942       end if;
                                3943       
           0 implicit_else      3939       if not ok then
                                3940         
           0 reconvergence      3943       expected_padding := (others => ivalue(pad));
                                3944       if ivalue(0 to pad-1) /= expected_padding then
                                3945         
           0 if                 3945         GOOD := false;
                                3946       else
                                3947         
           0 else               3947         GOOD  := true;
                                3948         VALUE := UNRESOLVED_SIGNED (ivalue (pad to ivalue'high));
                                3949       end if;
                                3950     end procedure OREAD
           0 sequence           3955       OREAD (L     => L,
                                3956              VALUE => ivalue);
                                3957       VALUE := UNSIGNED (ivalue);
                                3958     end procedure OREAD
           0 sequence           3966       OREAD (L      => L,
                                3967               VALUE => ivalue);           -- Read padded string
                                3968       expected_padding := (others => ivalue(pad));
                                3969       if ivalue(0 to pad-1) /= expected_padding then
                                3970         
           0 if                 3970         assert false
                                3971           report "NUMERIC_STD.OREAD Error: Signed vector truncated"
                                3972           severity error;
                                3973       else
                                3974         
           0 else               3974         VALUE := UNRESOLVED_SIGNED (ivalue (pad to ivalue'high));
                                3975       end if;
                                3976     end procedure OREAD
           0 sequence           3982       HREAD (L     => L,
                                3983              VALUE => ivalue,
                                3984              GOOD  => GOOD);
                                3985       VALUE := UNSIGNED(ivalue);
                                3986     end procedure HREAD
           0 sequence           3996       HREAD (L      => L,
                                3997               VALUE => ivalue,            -- Read padded STRING
                                3998               GOOD  => ok);
                                3999       
           0 if                 4000         GOOD := false;
                                4001         return;
                                4002       end if;
                                4003       
           0 implicit_else      3999       if not ok then
                                4000         
           0 reconvergence      4003       expected_padding := (others => ivalue(pad));
                                4004       if ivalue(0 to pad-1) /= expected_padding then
                                4005         
           0 if                 4005         GOOD := false;
                                4006       else
                                4007         
           0 else               4007         GOOD  := true;
                                4008         VALUE := UNRESOLVED_SIGNED (ivalue (pad to ivalue'high));
                                4009       end if;
                                4010     end procedure HREAD
           0 sequence           4015       HREAD (L     => L,
                                4016              VALUE => ivalue);
                                4017       VALUE := UNSIGNED (ivalue);
                                4018     end procedure HREAD
           0 sequence           4026       HREAD (L      => L,
                                4027               VALUE => ivalue);           -- Read padded string
                                4028       expected_padding := (others => ivalue(pad));
                                4029       if ivalue(0 to pad-1) /= expected_padding then
                                4030         
           0 if                 4030         assert false
                                4031           report "NUMERIC_STD.HREAD Error: Signed vector truncated"
                                4032           severity error;
                                4033       else
                                4034         
           0 else               4034         VALUE := UNRESOLVED_SIGNED (ivalue (pad to ivalue'high));
                                4035       end if;
                                4036     end procedure HREAD
           0 sequence           4042       ivalue := STD_ULOGIC_VECTOR (VALUE);
                                4043       OWRITE (L         => L,
                                4044               VALUE     => ivalue,
                                4045               JUSTIFIED => JUSTIFIED,
                                4046               FIELD     => FIELD);
                                4047     end procedure OWRITE
           0 sequence           4056       ivalue := STD_ULOGIC_VECTOR (VALUE);
                                4057       OWRITE (L         => L,
                                4058               VALUE     => pad & ivalue,
                                4059               JUSTIFIED => JUSTIFIED,
                                4060               FIELD     => FIELD);
                                4061     end procedure OWRITE
           0 sequence           4067       ivalue := STD_ULOGIC_VECTOR (VALUE);
                                4068       HWRITE (L         => L,
                                4069               VALUE     => ivalue,
                                4070               JUSTIFIED => JUSTIFIED,
                                4071               FIELD     => FIELD);
                                4072     end procedure HWRITE
           0 sequence           4081       ivalue := STD_ULOGIC_VECTOR (VALUE);
                                4082       HWRITE (L         => L,
                                4083               VALUE     => pad & ivalue,
                                4084               JUSTIFIED => JUSTIFIED,
                                4085               FIELD     => FIELD);
                                4086     end procedure HWRITE
           0 sequence             82       if ARG >= 0 then
                                  83         
           0 if                   83         N := ARG;
                                  84       else
                                  85         
           0 else                 85         N := -(ARG+1);
                                  86       end if;
                                  87       
           0 reconvergence        87       NBITS := 1;
                                  88       while 
           0 sequence             88             N > 0 loop
                                  89         
           0 loop_body            89         NBITS := NBITS+1;
                                  90         N := N / 2;
                                  91       end loop;
                                  92       
           0 reconvergence        92       return NBITS;
                                  93     end function SIGNED_NUM_BITS
           0 sequence             99       N := ARG;
                                 100       NBITS := 1;
                                 101       while 
           0 sequence            101             N > 1 loop
                                 102         
           0 loop_body           102         NBITS := NBITS+1;
                                 103         N := N / 2;
                                 104       end loop;
                                 105       
           0 reconvergence       105       return NBITS;
                                 106     end function UNSIGNED_NUM_BITS
          10 sequence            123       for I in 0 to L_LEFT loop
                                 124         
          80 loop_body           124         RESULT(I) := CBIT xor XL(I) xor XR(I);
                                 125         CBIT      := (CBIT and XL(I)) or (CBIT and XR(I)) or (XL(I) and XR(I));
                                 126       end loop;
                                 127       
          10 reconvergence       127       return RESULT;
                                 128     end function ADD_UNSIGNED
          10 sequence            143       for I in 0 to L_LEFT loop
                                 144         
          80 loop_body           144         RESULT(I) := CBIT xor XL(I) xor XR(I);
                                 145         CBIT      := (CBIT and XL(I)) or (CBIT and XR(I)) or (XL(I) and XR(I));
                                 146       end loop;
                                 147       
          10 reconvergence       147       return RESULT;
                                 148     end function ADD_SIGNED
           0 sequence            162       TEMP   := "0"&NUM;
                                 163       QUOT   := (others => '0');
                                 164       TOPBIT := -1;
                                 165       for J in DENOM'range loop
                                 166         
           0 if                  167           TOPBIT := J;
                                 168           exit;
                                 169         end if;
                                 170       end loop;
                                 171       
           0 blocking            171       assert TOPBIT >= 0 report "NUMERIC_STD.DIVMOD: DIV, MOD, or REM by zero"
                                 172         severity error;
                                 173   
                                 174       for J in NUM'length-(TOPBIT+1) downto 0 loop
                                 175         
           0 else                166         if DENOM(J) = '1' then
                                 167           
           0 reconvergence       180         assert TEMP(TOPBIT+J+1) = '0'
                                 181           report "NUMERIC_STD.DIVMOD: internal error in the division algorithm"
                                 182           severity error;
                                 183       end loop;
                                 184       
           0 reconvergence       184       XQUOT   := RESIZE(QUOT, XQUOT'length);
                                 185       XREMAIN := RESIZE(TEMP, XREMAIN'length);
                                 186     end procedure DIVMOD
           0 if                  176           TEMP(TOPBIT+J+1 downto J) := (TEMP(TOPBIT+J+1 downto J))
                                 177                                        -("0"&DENOM(TOPBIT downto 0));
                                 178           QUOT(J) := '1';
                                 179         end if;
                                 180         
           0 else                175         if TEMP(TOPBIT+J+1 downto J) >= "0"&DENOM(TOPBIT downto 0) then
                                 176           
          16 if                  198         RESULT(ARG_L downto COUNT) := XARG(ARG_L-COUNT downto 0);
                                 199       end if;
                                 200       
           8 implicit_else       197       if COUNT <= ARG_L then
                                 198         
          24 reconvergence       200       return RESULT;
                                 201     end function XSLL
          10 if                  211         RESULT(ARG_L-COUNT downto 0) := XARG(ARG_L downto COUNT);
                                 212       end if;
                                 213       
           6 implicit_else       210       if COUNT <= ARG_L then
                                 211         
          16 reconvergence       213       return RESULT;
                                 214     end function XSRL
           8 sequence            224       if ((ARG'length <= 1) or (XCOUNT = 0)) then 
           0 if                  224                                                   return ARG;
                                 225       else
                                 226         
           2 if                  226                                  XCOUNT           := ARG_L;
                                 227         end if;
                                 228         
           6 implicit_else       226         if (XCOUNT > ARG_L) then 
           8 reconvergence       228         RESULT(ARG_L-XCOUNT downto 0)             := XARG(ARG_L downto XCOUNT);
                                 229         RESULT(ARG_L downto (ARG_L - XCOUNT + 1)) := (others => XARG(ARG_L));
                                 230       end if;
                                 231       
           8 reconvergence       231       return RESULT;
                                 232     end function XSRA
           8 sequence            242       COUNTM := COUNT mod (ARG_L + 1);
                                 243       
           8 if                  244         RESULT(ARG_L downto COUNTM) := XARG(ARG_L-COUNTM downto 0);
                                 245         RESULT(COUNTM-1 downto 0)   := XARG(ARG_L downto ARG_L-COUNTM+1);
                                 246       end if;
                                 247       
           0 implicit_else       243       if COUNTM /= 0 then
                                 244         
           8 reconvergence       247       return RESULT;
                                 248     end function XROL
           8 sequence            258       COUNTM := COUNT mod (ARG_L + 1);
                                 259       
           8 if                  260         RESULT(ARG_L-COUNTM downto 0)       := XARG(ARG_L downto COUNTM);
                                 261         RESULT(ARG_L downto ARG_L-COUNTM+1) := XARG(COUNTM-1 downto 0);
                                 262       end if;
                                 263       
           0 implicit_else       259       if COUNTM /= 0 then
                                 260         
           8 reconvergence       263       return RESULT;
                                 264     end function XROR
          54 sequence            273       return STD_ULOGIC_VECTOR(L) = STD_ULOGIC_VECTOR(R);
                                 274     end function UNSIGNED_EQUAL
          50 sequence            281       return STD_ULOGIC_VECTOR(L) = STD_ULOGIC_VECTOR(R);
                                 282     end function SIGNED_EQUAL
          24 sequence            289       return STD_ULOGIC_VECTOR(L) < STD_ULOGIC_VECTOR(R);
                                 290     end function UNSIGNED_LESS
          29 sequence            299       INTERN_L    := L;
                                 300       INTERN_R    := R;
                                 301       INTERN_L(0) := not INTERN_L(0);
                                 302       INTERN_R(0) := not INTERN_R(0);
                                 303       return STD_ULOGIC_VECTOR(INTERN_L) < STD_ULOGIC_VECTOR(INTERN_R);
                                 304     end function SIGNED_LESS
          15 sequence            312       return STD_ULOGIC_VECTOR(L) <= STD_ULOGIC_VECTOR(R);
                                 313     end function UNSIGNED_LESS_OR_EQUAL
          20 sequence            323       INTERN_L                           := L;
                                 324       INTERN_R                           := R;
                                 325       INTERN_L(0)                        := not INTERN_L(0);
                                 326       INTERN_R(0)                        := not INTERN_R(0);
                                 327       return STD_ULOGIC_VECTOR(INTERN_L) <= STD_ULOGIC_VECTOR(INTERN_R);
                                 328     end function SIGNED_LESS_OR_EQUAL

Line coverage for $root.$pkgs.work.not_test_pkg:

Coverage for source: not_test_pkg.vhdl

           0 sequence             30       for i in sz-1 downto 0 loop
                                  31         
           0 loop_body            31         if(bv(i) = '1') then
                                  32           
           0 reconvergence        39       return rtn;
                                  40     end function
           0 if                   32           rtn(i) := '1';
                                  33         elsif(
           0 sequence             33               bv(i) = '0') then
                                  34           
           0 elsif                34           rtn(i) := '0';
                                  35         else
                                  36           
           0 else                 36           rtn(i) := 'U';
                                  37         end if;
                                  38       end loop;
                                  39       
           0 sequence             46       for i in sz-1 downto 0 loop
                                  47         
           0 loop_body            47         if(bv(i) = '1') then
                                  48           
           0 reconvergence        55       return rtn;
                                  56     end function
           0 if                   48           rtn(i) := '1';
                                  49         elsif(
           0 sequence             49               bv(i) = '0') then
                                  50           
           0 elsif                50           rtn(i) := '0';
                                  51         else
                                  52           
           0 else                 52           rtn(i) := 'U';
                                  53         end if;
                                  54       end loop;
                                  55       
           0 sequence             64       case len is
                                  65         when 8 =>
                                  66           
           0 case_item            66           rtn := v(6 downto 0) & ((v(7) xor v(4)) xor (v(1) xor v(2)));
                                  67         when 16 =>
                                  68           
           0 case_item            68           rtn := v(14 downto 0) & ((v(15) xor v(14)) xor (v(12) xor v(3)));
                                  69         when 32 =>
                                  70           
           0 case_item            70           rtn := v(30 downto 0) & ((v(31) xor v(6)) xor (v(5) xor v(1)));
                                  71         when others =>
                                  72           
           0 case_item            72           report "ERROR: LSFR size not implemented ..." severity failure;
                                  73       end case;
                                  74       
           0 reconvergence        74       return rtn;
                                  75     end function
           0 sequence            104       case len is
                                 105         when 8 =>
                                 106           
           0 case_item           106           rtn := v(6 downto 0) & ((v(7) xor v(4)) xor (v(1) xor v(2)));
                                 107         when 16 =>
                                 108           
           0 case_item           108           rtn := v(14 downto 0) & ((v(15) xor v(14)) xor (v(12) xor v(3)));
                                 109         when 32 =>
                                 110           
           0 case_item           110           rtn := v(30 downto 0) & ((v(31) xor v(6)) xor (v(5) xor v(1)));
                                 111         when others =>
                                 112           
           0 case_item           112           report "ERROR: LSFR size not implemented ..." severity failure;
                                 113       end case;
                                 114       --report "unsigned  LSFR exit";
                                 115       
           0 reconvergence       115       return rtn;
                                 116     end function
           0 sequence             84       case len is
                                  85         when 8 =>
                                  86           
           0 case_item            86           rtn := v(6 downto 0) & ((v(7) xor v(4)) xor (v(1) xor v(2)));
                                  87         when 16 =>
                                  88           
           0 case_item            88           rtn := v(14 downto 0) & ((v(15) xor v(14)) xor (v(12) xor v(3)));
                                  89         when 32 =>
                                  90           
           0 case_item            90           rtn := v(30 downto 0) & ((v(31) xor v(6)) xor (v(5) xor v(1)));
                                  91         when others =>
                                  92           
           0 case_item            92           report "ERROR: LSFR size not implemented ..." severity failure;
                                  93       end case;
                                  94       
           0 reconvergence        94       return rtn;
                                  95     end function

Line coverage for $root.c37to48:

Coverage for source: test.vhdl

           0 if                   28         report errmes & " " & to_string (actual) & " /= " & to_string (expected)
                                  29           severity error;
                                  30       end if;
                                  31       
          36 implicit_else        27       if actual /= expected then
                                  28         
          36 reconvergence        31       return;
                                  32     end procedure report_error
           0 if                   39         report errmes & " " & to_string (actual) & " /= " & to_string (expected)
                                  40           severity error;
                                  41       end if;
                                  42       
          32 implicit_else        38       if actual /= expected then
                                  39         
          32 reconvergence        42       return;
                                  43     end procedure report_error
           1 sequence             80       as     := "10000001";
                                  81       bs     := "00000010";
                                  82       cs     := maximum (as, bs);
                                  83       assert (cs = "00000010") report "Max miscompare 02x" severity error;
                                  84       cs     := maximum (bs, cs);
                                  85       assert (cs = "00000010") report "Max miscompare 02xr" severity error;
                                  86       cs     := minimum (as, bs);
                                  87       assert (cs = "10000001") report "Min miscompare 81x" severity error;
                                  88       cs     := minimum (bs, as);
                                  89       assert (cs = "10000001") report "Min miscompare 81xr" severity error;
                                  90       au     := "10000010";
                                  91       bu     := "00000100";
                                  92       cu     := maximum (au, bu);
                                  93       assert (cu = "10000010") report "Max miscompare 82x" severity error;
                                  94       cu     := maximum (bu, cu);
                                  95       assert (cu = "10000010") report "Max miscompare 82xr" severity error;
                                  96       cu     := minimum (au, bu);
                                  97       assert (cu = "00000100") report "Min miscompare 04x" severity error;
                                  98       cu     := minimum (bu, au);
                                  99       assert (cu = "00000100") report "Min miscompare 04xr" severity error;
                                 100       -- checking the overloads for minimum and maximum
                                 101       check5 := "00110";
                                 102       check6 := "000111";
                                 103       assert (check6 > check5) report to_string(check6) & " > " & to_string(check5)
                                 104         & " miscompare" severity error;
                                 105       assert (check5 < check6) report to_string(check5) & " < " & to_string(check6)
                                 106         & " miscompare" severity error;
                                 107       check6t := maximum (check6, check5);
                                 108       assert (check6t = check6) report "max (" & to_string(check6) & ", "
                                 109         & to_string(check5) & ") = " & to_string (check6t) severity error;
                                 110       check6t := maximum (check5, check6);
                                 111       assert (check6t = check6) report "max (" & to_string(check5) & ", "
                                 112         & to_string(check6) & ") = " & to_string (check6t) severity error;
                                 113       check6t := minimum (check6, check5);
                                 114       assert (check6t = check5) report "min (" & to_string(check6) & ", "
                                 115         & to_string(check5) & ") = " & to_string (check6t) severity error;
                                 116       check6t := minimum (check5, check6);
                                 117       assert (check6t = check5) report "min (" & to_string(check5) & ", "
                                 118         & to_string(check6) & ") = " & to_string (check6t) severity error;
                                 119       checks5 := "01110";
                                 120       checks6 := "001111";
                                 121       assert (checks6 > checks5) report to_string(checks6) & " > " & to_string(checks5)
                                 122         & " miscompare" severity error;
                                 123       assert (checks5 < checks6) report to_string(checks5) & " < " & to_string(checks6)
                                 124         & " miscompare" severity error;
                                 125       checks6t := maximum (checks6, checks5);
                                 126       assert (checks6t = checks6) report "max (" & to_string(checks6) & ", "
                                 127         & to_string(checks5) & ") = " & to_string (checks6t) severity error;
                                 128       checks6t := maximum (checks5, checks6);
                                 129       assert (checks6t = checks6) report "max (" & to_string(checks5) & ", "
                                 130         & to_string(checks6) & ") = " & to_string (checks6t) severity error;
                                 131       checks6t := minimum (checks6, checks5);
                                 132       assert (checks6t = checks5) report "min (" & to_string(checks6) & ", "
                                 133         & to_string(checks5) & ") = " & to_string (checks6t) severity error;
                                 134       checks6t := minimum (checks5, checks6);
                                 135       assert (checks6t = checks5) report "min (" & to_string(checks5) & ", "
                                 136         & to_string(checks6) & ") = " & to_string (checks6t) severity error;
                                 137   
                                 138       -- find_rightmost find_leftmost test
                                 139       au   := "00100001";
                                 140       x    := find_rightmost (au, '1');
                                 141       assert (x = 0) report "find_rightmost error 0" severity error;
                                 142       x    := find_rightmost (au, '0');
                                 143       assert (x = 1) report "find_rightmost error 1" severity error;
                                 144       x    := find_rightmost (au, 'Z');
                                 145       assert (x = -1) report "find_rightmost error -1" severity error;
                                 146       x    := find_leftmost (au, '1');
                                 147       assert (x = 5) report "find_leftmost error 1" severity error;
                                 148       x    := find_leftmost (au, '0');
                                 149       assert (x = 7) report "find_leftmost error 7" severity error;
                                 150       x    := find_leftmost (au, 'Z');
                                 151       assert (x = -1) report "find_leftmost error -1" severity error;
                                 152       as   := "00100001";
                                 153       x    := find_rightmost (as, '1');
                                 154       assert (x = 0) report "find_rightmost error 0" severity error;
                                 155       x    := find_rightmost (as, '0');
                                 156       assert (x = 1) report "find_rightmost error 1" severity error;
                                 157       x    := find_rightmost (as, 'Z');
                                 158       assert (x = -1) report "find_rightmost error -1" severity error;
                                 159       x    := find_leftmost (as, '1');
                                 160       assert (x = 5) report "find_leftmost error 1" severity error;
                                 161       x    := find_leftmost (as, '0');
                                 162       assert (x = 7) report "find_leftmost error 7" severity error;
                                 163       x    := find_leftmost (as, 'Z');
                                 164       assert (x = -1) report "find_leftmost error -1" severity error;
                                 165       ---------------------------------------------------------------------------
                                 166       -- Additional test
                                 167       ---------------------------------------------------------------------------
                                 168       -- Test some meta values
                                 169       as   := "001XX100";
                                 170       bs   := - as;
                                 171       aslv := (others => 'X');
                                 172       assert (STD_LOGIC_VECTOR(bs) = aslv) report "- metavalue " & to_string (as)
                                 173         & " /= " & to_string (aslv) severity error;
                                 174       ---------------------------------------------------------------------------
                                 175       -- + '1' test
                                 176       ---------------------------------------------------------------------------
                                 177       s  := '1';
                                 178       au := "00000000";
                                 179       bu := au + s;
                                 180       cu := "00000001";
                                 181       assert (bu = cu) report to_string(au) & " + " & STD_ULOGIC'image(s) & LF
                                 182         & to_string (bu) & " /= " & LF & to_string (cu)
                                 183         severity error;
                                 184       s  := '0';
                                 185       au := "00000000";
                                 186       bu := au + s;
                                 187       cu := "00000000";
                                 188       assert (bu = cu) report to_string(au) & " + " & STD_ULOGIC'image(s) & LF
                                 189         & to_string (bu) & " /= " & LF & to_string (cu)
                                 190         severity error;
                                 191       s  := '1';
                                 192       au := "11111111";
                                 193       bu := au + s;
                                 194       cu := "00000000";
                                 195       assert (bu = cu) report to_string(au) & " + " & STD_ULOGIC'image(s) & LF
                                 196         & to_string (bu) & " /= " & LF & to_string (cu)
                                 197         severity error;
                                 198       s  := '1';
                                 199       au := "00000000";
                                 200       bu := s + au;
                                 201       cu := "00000001";
                                 202       assert (bu = cu) report STD_ULOGIC'image(s) & " + " & to_string(au) & LF
                                 203         & to_string (bu) & " /= " & LF & to_string (cu)
                                 204         severity error;
                                 205       s  := '0';
                                 206       au := "00000000";
                                 207       bu := s + au;
                                 208       cu := "00000000";
                                 209       assert (bu = cu) report STD_ULOGIC'image(s) & " + " & to_string(au) & LF
                                 210         & to_string (bu) & " /= " & LF & to_string (cu)
                                 211         severity error;
                                 212       s  := '1';
                                 213       au := "11111111";
                                 214       bu := s + au;
                                 215       cu := "00000000";
                                 216       assert (bu = cu) report STD_ULOGIC'image(s) & " + " & to_string(au) & LF
                                 217         & to_string (bu) & " /= " & LF & to_string (cu)
                                 218         severity error;
                                 219       s  := '1';
                                 220       au := "00000001";
                                 221       bu := au - s;
                                 222       cu := "00000000";
                                 223       assert (bu = cu) report to_string(au) & " - " & STD_ULOGIC'image(s) & LF
                                 224         & to_string (bu) & " /= " & LF & to_string (cu)
                                 225         severity error;
                                 226       s  := '1';
                                 227       au := "11111111";
                                 228       bu := au - s;
                                 229       cu := "11111110";
                                 230       assert (bu = cu) report to_string(au) & " - " & STD_ULOGIC'image(s) & LF
                                 231         & to_string (bu) & " /= " & LF & to_string (cu)
                                 232         severity error;
                                 233       s  := '1';
                                 234       au := "00000001";
                                 235       bu := s - au;
                                 236       cu := "00000000";
                                 237       assert (bu = cu) report STD_ULOGIC'image(s) & " - " & to_string(au) & LF
                                 238         & to_string (bu) & " /= " & LF & to_string (cu)
                                 239         severity error;
                                 240       s  := '0';
                                 241       au := "00000001";
                                 242       bu := s - au;
                                 243       cu := "11111111";
                                 244       assert (bu = cu) report STD_ULOGIC'image(s) & " - " & to_string(au) & LF
                                 245         & to_string (bu) & " /= " & LF & to_string (cu)
                                 246         severity error;
                                 247       -- signed
                                 248       s  := '1';
                                 249       as := "00000000";
                                 250       bs := as + s;
                                 251       cs := "00000001";
                                 252       assert (bs = cs) report to_string(as) & " + " & STD_ULOGIC'image(s) & LF
                                 253         & to_string (bs) & " /= " & LF & to_string (cs)
                                 254         severity error;
                                 255       s  := '0';
                                 256       as := "00000000";
                                 257       bs := as + s;
                                 258       cs := "00000000";
                                 259       assert (bs = cs) report to_string(as) & " + " & STD_ULOGIC'image(s) & LF
                                 260         & to_string (bs) & " /= " & LF & to_string (cs)
                                 261         severity error;
                                 262       s  := '1';
                                 263       as := "10000000";
                                 264       bs := as + s;
                                 265       cs := "10000001";
                                 266       assert (bs = cs) report to_string(as) & " + " & STD_ULOGIC'image(s) & LF
                                 267         & to_string (bs) & " /= " & LF & to_string (cs)
                                 268         severity error;
                                 269       s  := '1';
                                 270       as := "11111111";
                                 271       bs := as + s;
                                 272       cs := "00000000";
                                 273       assert (bs = cs) report to_string(as) & " + " & STD_ULOGIC'image(s) & LF
                                 274         & to_string (bs) & " /= " & LF & to_string (cs)
                                 275         severity error;
                                 276       s  := '1';
                                 277       as := "00000000";
                                 278       bs := s + as;
                                 279       cs := "00000001";
                                 280       assert (bs = cs) report STD_ULOGIC'image(s) & " + " & to_string(as) & LF
                                 281         & to_string (bs) & " /= " & LF & to_string (cs)
                                 282         severity error;
                                 283       s  := '1';
                                 284       as := "00000001";
                                 285       bs := s + as;
                                 286       cs := "00000010";
                                 287       assert (bs = cs) report STD_ULOGIC'image(s) & " + " & to_string(as) & LF
                                 288         & to_string (bs) & " /= " & LF & to_string (cs)
                                 289         severity error;
                                 290       s  := '1';
                                 291       as := "00000000";
                                 292       bs := as - s;
                                 293       cs := "11111111";
                                 294       assert (bs = cs) report to_string(as) & " - " & STD_ULOGIC'image(s) & LF
                                 295         & to_string (bs) & " /= " & LF & to_string (cs)
                                 296         severity error;
                                 297       s  := '1';
                                 298       as := "00000001";
                                 299       bs := as - s;
                                 300       cs := "00000000";
                                 301       assert (bs = cs) report to_string(as) & " - " & STD_ULOGIC'image(s) & LF
                                 302         & to_string (bs) & " /= " & LF & to_string (cs)
                                 303         severity error;
                                 304       s  := '1';
                                 305       as := "00000001";
                                 306       bs := s - as;
                                 307       cs := "00000000";
                                 308       assert (bs = cs) report STD_ULOGIC'image(s) & " - " & to_string(as) & LF
                                 309         & to_string (bs) & " /= " & LF & to_string (cs)
                                 310         severity error;
                                 311       s  := '0';
                                 312       as := "00000001";
                                 313       bs := s - as;
                                 314       cs := "11111111";
                                 315       assert (bs = cs) report STD_ULOGIC'image(s) & " - " & to_string(as) & LF
                                 316         & to_string (bs) & " /= " & LF & to_string (cs)
                                 317         severity error;
                                 318       -- to_x01 (unsigned)
                                 319       au := "1HLWXUZ-";
                                 320       bu := to_x01(au);
                                 321       cu := "110XXXXX";
                                 322       assert (to_string(bu) = to_string(cu)) report "to_x01 (" & to_string(au)
                                 323         & ") = " & to_string(bu) severity error;
                                 324       -- to_x01 (signed)
                                 325       as := "0HLWXUZ-";
                                 326       bs := to_x01(as);
                                 327       cs := "010XXXXX";
                                 328       assert (to_string(bs) = to_string(cs)) report "to_x01 (" & to_string(as)
                                 329         & ") = " & to_string(bs) severity error;
                                 330       -- to_x01z (unsigned)
                                 331       au := "1HLWXUZ-";
                                 332       bu := to_x01z(au);
                                 333       cu := "110XXXZX";
                                 334       assert (to_string(bu) = to_string(cu)) report "to_x01z (" & to_string(au)
                                 335         & ") = " & to_string(bu) severity error;
                                 336       -- to_x01z (signed)
                                 337       as := "0HLWXUZ-";
                                 338       bs := to_x01z(as);
                                 339       cs := "010XXXZX";
                                 340       assert (to_string(bs) = to_string(cs)) report "to_x01z (" & to_string(as)
                                 341         & ") = " & to_string(bs) severity error;
                                 342       -- to_ux01 (unsigned)
                                 343       au := "1HLWXUZ-";
                                 344       bu := to_ux01(au);
                                 345       cu := "110XXUXX";
                                 346       assert (to_string(bu) = to_string(cu)) report "to_ux01 (" & to_string(au)
                                 347         & ") = " & to_string(bu) severity error;
                                 348       -- to_ux01 (signed)
                                 349       as := "0HLWXUZ-";
                                 350       bs := to_ux01(as);
                                 351       cs := "010XXUXX";
                                 352       assert (to_string(bs) = to_string(cs)) report "to_ux01 (" & to_string(as)
                                 353         & ") = " & to_string(bs) severity error;
                                 354       -- Is_X (unsigned)
                                 355       au := "00001111";
                                 356       assert not (Is_X(au)) report "Is_X (" & to_string(au) & ") = true"
                                 357         severity error;
                                 358       au := "HHHHLLLL";
                                 359       assert not (Is_X(au)) report "Is_X (" & to_string(au) & ") = true"
                                 360         severity error;
                                 361       au := "HHHHLLLX";
                                 362       assert (Is_X(au)) report "Is_X (" & to_string(au) & ") = false"
                                 363         severity error;
                                 364       au := "HHHHLLLW";
                                 365       assert (Is_X(au)) report "Is_X (" & to_string(au) & ") = false"
                                 366         severity error;
                                 367       au := "HHHHLLLU";
                                 368       assert (Is_X(au)) report "Is_X (" & to_string(au) & ") = false"
                                 369         severity error;
                                 370       au := "HHHHLLLZ";
                                 371       assert (Is_X(au)) report "Is_X (" & to_string(au) & ") = false"
                                 372         severity error;
                                 373       au := "HHHHLLL-";
                                 374       assert (Is_X(au)) report "Is_X (" & to_string(au) & ") = false"
                                 375         severity error;
                                 376       -- Is_X (signed)
                                 377       as := "00001111";
                                 378       assert not (Is_X(as)) report "Is_X (" & to_string(as) & ") = true"
                                 379         severity error;
                                 380       as := "HHHHLLLL";
                                 381       assert not (Is_X(as)) report "Is_X (" & to_string(as) & ") = true"
                                 382         severity error;
                                 383       as := "HHHHLLLX";
                                 384       assert (Is_X(as)) report "Is_X (" & to_string(as) & ") = false"
                                 385         severity error;
                                 386       as := "HHHHLLLW";
                                 387       assert (Is_X(as)) report "Is_X (" & to_string(as) & ") = false"
                                 388         severity error;
                                 389       as := "HHHHLLLU";
                                 390       assert (Is_X(as)) report "Is_X (" & to_string(as) & ") = false"
                                 391         severity error;
                                 392       as := "HHHHLLLZ";
                                 393       assert (Is_X(as)) report "Is_X (" & to_string(as) & ") = false"
                                 394         severity error;
                                 395       as := "HHHHLLL-";
                                 396       assert (Is_X(as)) report "Is_X (" & to_string(as) & ") = false"
                                 397         severity error;
                                 398       -- sla (unsigned)
                                 399       -- sra (unsigned)
                                 400       check7uf1 := "0110100";             -- 6.5
                                 401       check7uf2 := check7uf1 srl 1;
                                 402       check7uf3 := "0011010";             -- 3.25
                                 403       report_error ("SRL test", check7uf2, check7uf3);
                                 404       check7uf2 := check7uf1 srl -1;
                                 405       check7uf3 := "1101000";             -- 13
                                 406       report_error ("SRL test -1", check7uf2, check7uf3);
                                 407       check7uf2 := check7uf1 srl 55;
                                 408       check7uf3 := "0000000";
                                 409       report_error ("SRL test 55", check7uf2, check7uf3);
                                 410       check7uf2 := check7uf1 srl -55;
                                 411       check7uf3 := "0000000";
                                 412       report_error ("SRL test -55", check7uf2, check7uf3);
                                 413       check7uf1 := "0110100";             -- 6.5
                                 414       check7uf2 := check7uf1 sll -1;
                                 415       check7uf3 := "0011010";             -- 3.25
                                 416       report_error ("SLL test", check7uf2, check7uf3);
                                 417       check7uf2 := check7uf1 sll 1;
                                 418       check7uf3 := "1101000";             -- 13
                                 419       report_error ("SLL test -1", check7uf2, check7uf3);
                                 420       check7uf2 := check7uf1 sll -55;
                                 421       check7uf3 := "0000000";
                                 422       report_error ("SLL test 55", check7uf2, check7uf3);
                                 423       check7uf2 := check7uf1 sll 55;
                                 424       check7uf3 := "0000000";
                                 425       report_error ("SLL test -55", check7uf2, check7uf3);
                                 426   
                                 427       check7uf1 := "0110100";             -- 6.5
                                 428       check7uf2 := check7uf1 ror 1;
                                 429       check7uf3 := "0011010";             -- 3.25
                                 430       report_error ("ror test", check7uf2, check7uf3);
                                 431       check7uf2 := check7uf1 ror -1;
                                 432       check7uf3 := "1101000";             -- 13
                                 433       report_error ("ror test -1", check7uf2, check7uf3);
                                 434       check7uf2 := check7uf1 ror 55;
                                 435       check7uf3 := "1101000";
                                 436       report_error ("ror test 55", check7uf2, check7uf3);
                                 437       check7uf2 := check7uf1 ror -55;
                                 438       check7uf3 := "0011010";
                                 439       report_error ("ror test -55", check7uf2, check7uf3);
                                 440       check7uf1 := "0110100";             -- 6.5
                                 441       check7uf2 := check7uf1 rol -1;
                                 442       check7uf3 := "0011010";             -- 3.25
                                 443       report_error ("rol test", check7uf2, check7uf3);
                                 444       check7uf2 := check7uf1 rol 1;
                                 445       check7uf3 := "1101000";             -- 13
                                 446       report_error ("rol test -1", check7uf2, check7uf3);
                                 447       check7uf2 := check7uf1 rol -53;
                                 448       check7uf3 := "0100011";
                                 449       report_error ("rol test 53", check7uf2, check7uf3);
                                 450       check7uf2 := check7uf1 rol 53;
                                 451       check7uf3 := "1000110";
                                 452       report_error ("rol test -53", check7uf2, check7uf3);
                                 453       check7uf1 := "0110100";             -- 6.5
                                 454       check7uf2 := check7uf1 sra 1;
                                 455       check7uf3 := "0011010";             -- 3.25
                                 456       report_error ("SRa test", check7uf2, check7uf3);
                                 457       check7uf2 := check7uf1 sra -1;
                                 458       check7uf3 := "1101000";             -- 13
                                 459       report_error ("SRa test -1", check7uf2, check7uf3);
                                 460       check7uf2 := check7uf1 sra 55;
                                 461       check7uf3 := "0000000";
                                 462       report_error ("SRa test 55", check7uf2, check7uf3);
                                 463       check7uf2 := check7uf1 sra -55;
                                 464       check7uf3 := "0000000";
                                 465       report_error ("SRa test -55", check7uf2, check7uf3);
                                 466       check7uf1 := "0110100";             -- 6.5
                                 467       check7uf2 := check7uf1 sla -1;
                                 468       check7uf3 := "0011010";             -- 3.25
                                 469       report_error ("SLa test", check7uf2, check7uf3);
                                 470       check7uf2 := check7uf1 sla 1;
                                 471       check7uf3 := "1101000";             -- 13
                                 472       report_error ("SLa test -1", check7uf2, check7uf3);
                                 473       check7uf2 := check7uf1 sla -55;
                                 474       check7uf3 := "0000000";
                                 475       report_error ("SLa test 55", check7uf2, check7uf3);
                                 476       check7uf2 := check7uf1 sla 55;
                                 477       check7uf3 := "0000000";
                                 478       report_error ("SLa test -55", check7uf2, check7uf3);
                                 479       check7uf1 := "1110100";             -- 14.5
                                 480       check7uf2 := check7uf1 sra 1;
                                 481       check7uf3 := "0111010";             -- 7.25
                                 482       report_error ("SRa test carry", check7uf2, check7uf3);
                                 483       check7uf1 := "1110100";             -- 14.5
                                 484       check7uf2 := check7uf1 sra -1;
                                 485       check7uf3 := "1101000";             -- 13
                                 486       report_error ("SRa test -carry", check7uf2, check7uf3);
                                 487       check7uf1 := "0110101";             -- 6.625
                                 488       check7uf2 := check7uf1 sra 1;
                                 489       check7uf3 := "0011010";
                                 490       report_error ("SRa test carry-", check7uf2, check7uf3);
                                 491       check7uf1 := "0110101";             -- 6.625
                                 492       check7uf2 := check7uf1 sra -1;
                                 493       check7uf3 := "1101010";
                                 494       report_error ("SRa test -carry-", check7uf2, check7uf3);
                                 495       check7uf1 := "1110100";             -- 14.5
                                 496       check7uf2 := check7uf1 sla -1;
                                 497       check7uf3 := "0111010";
                                 498       report_error ("Sla test -carry", check7uf2, check7uf3);
                                 499       check7uf1 := "1110100";             -- 14.5
                                 500       check7uf2 := check7uf1 sla 1;
                                 501       check7uf3 := "1101000";             -- 13
                                 502       report_error ("Sla test carry", check7uf2, check7uf3);
                                 503       check7uf1 := "0110101";             -- 6.625
                                 504       check7uf2 := check7uf1 sla -1;
                                 505       check7uf3 := "0011010";
                                 506       report_error ("Sla test -carry-", check7uf2, check7uf3);
                                 507       check7uf1 := "0110101";             -- 6.625
                                 508       check7uf2 := check7uf1 sla 1;
                                 509       check7uf3 := "1101010";
                                 510       report_error ("Sla test carry-", check7uf2, check7uf3);
                                 511       -- sla (signed)
                                 512       -- sra (signed)
                                 513       check7sf1 := "0110100";             -- 6.5
                                 514       check7sf2 := check7sf1 srl 1;
                                 515       check7sf3 := "0011010";             -- 3.25
                                 516       report_error ("SRL test", check7sf2, check7sf3);
                                 517       check7sf2 := check7sf1 srl -1;
                                 518       check7sf3 := "1101000";             -- 13
                                 519       report_error ("SRL test -1", check7sf2, check7sf3);
                                 520       check7sf2 := check7sf1 srl 55;
                                 521       check7sf3 := "0000000";
                                 522       report_error ("SRL test 55", check7sf2, check7sf3);
                                 523       check7sf2 := check7sf1 srl -55;
                                 524       check7sf3 := "0000000";
                                 525       report_error ("SRL test -55", check7sf2, check7sf3);
                                 526       check7sf1 := "0110100";             -- 6.5
                                 527       check7sf2 := check7sf1 sll -1;
                                 528       check7sf3 := "0011010";             -- 3.25
                                 529       report_error ("SLL test", check7sf2, check7sf3);
                                 530       check7sf2 := check7sf1 sll 1;
                                 531       check7sf3 := "1101000";             -- 13
                                 532       report_error ("SLL test -1", check7sf2, check7sf3);
                                 533       check7sf2 := check7sf1 sll -55;
                                 534       check7sf3 := "0000000";
                                 535       report_error ("SLL test 55", check7sf2, check7sf3);
                                 536       check7sf2 := check7sf1 sll 55;
                                 537       check7sf3 := "0000000";
                                 538       report_error ("SLL test -55", check7sf2, check7sf3);
                                 539   
                                 540       check7sf1 := "0110100";             -- 6.5
                                 541       check7sf2 := check7sf1 ror 1;
                                 542       check7sf3 := "0011010";             -- 3.25
                                 543       report_error ("ror test", check7sf2, check7sf3);
                                 544       check7sf2 := check7sf1 ror -1;
                                 545       check7sf3 := "1101000";             -- 13
                                 546       report_error ("ror test -1", check7sf2, check7sf3);
                                 547       check7sf2 := check7sf1 ror 55;
                                 548       check7sf3 := "1101000";
                                 549       report_error ("ror test 55", check7sf2, check7sf3);
                                 550       check7sf2 := check7sf1 ror -55;
                                 551       check7sf3 := "0011010";
                                 552       report_error ("ror test -55", check7sf2, check7sf3);
                                 553       check7sf1 := "0110100";             -- 6.5
                                 554       check7sf2 := check7sf1 rol -1;
                                 555       check7sf3 := "0011010";             -- 3.25
                                 556       report_error ("rol test", check7sf2, check7sf3);
                                 557       check7sf2 := check7sf1 rol 1;
                                 558       check7sf3 := "1101000";             -- 13
                                 559       report_error ("rol test -1", check7sf2, check7sf3);
                                 560       check7sf2 := check7sf1 rol -53;
                                 561       check7sf3 := "0100011";
                                 562       report_error ("rol test 53", check7sf2, check7sf3);
                                 563       check7sf2 := check7sf1 rol 53;
                                 564       check7sf3 := "1000110";
                                 565       report_error ("rol test -53", check7sf2, check7sf3);
                                 566       check7sf1 := "0110100";             -- 6.5
                                 567       check7sf2 := check7sf1 sra 1;
                                 568       check7sf3 := "0011010";             -- 3.25
                                 569       report_error ("SRa test", check7sf2, check7sf3);
                                 570       check7sf2 := check7sf1 sra -1;
                                 571       check7sf3 := "1101000";             -- 13
                                 572       report_error ("SRa test -1", check7sf2, check7sf3);
                                 573       check7sf2 := check7sf1 sra 55;
                                 574       check7sf3 := "0000000";
                                 575       report_error ("SRa test 55", check7sf2, check7sf3);
                                 576       check7sf2 := check7sf1 sra -55;
                                 577       check7sf3 := "0000000";
                                 578       report_error ("SRa test -55", check7sf2, check7sf3);
                                 579       check7sf1 := "0110100";             -- 6.5
                                 580       check7sf2 := check7sf1 sla -1;
                                 581       check7sf3 := "0011010";             -- 3.25
                                 582       report_error ("SLa test", check7sf2, check7sf3);
                                 583       check7sf2 := check7sf1 sla 1;
                                 584       check7sf3 := "1101000";             -- 13
                                 585       report_error ("SLa test -1", check7sf2, check7sf3);
                                 586       check7sf2 := check7sf1 sla -55;
                                 587       check7sf3 := "0000000";
                                 588       report_error ("SLa test 55", check7sf2, check7sf3);
                                 589       check7sf2 := check7sf1 sla 55;
                                 590       check7sf3 := "0000000";
                                 591       report_error ("SLa test -55", check7sf2, check7sf3);
                                 592       check7sf1 := "1110100";             -- 14.5
                                 593       check7sf2 := check7sf1 sra 1;
                                 594       check7sf3 := "1111010";             -- 16.25
                                 595       report_error ("SRa test carry", check7sf2, check7sf3);
                                 596       check7sf1 := "1110100";             -- 14.5
                                 597       check7sf2 := check7sf1 sra -1;
                                 598       check7sf3 := "1101000";             -- 13
                                 599       report_error ("SRa test -carry", check7sf2, check7sf3);
                                 600       check7sf1 := "0110101";             -- 6.625
                                 601       check7sf2 := check7sf1 sra 1;
                                 602       check7sf3 := "0011010";
                                 603       report_error ("SRa test carry-", check7sf2, check7sf3);
                                 604       check7sf1 := "0110101";             -- 6.625
                                 605       check7sf2 := check7sf1 sra -1;
                                 606       check7sf3 := "1101010";
                                 607       report_error ("SRa test -carry-", check7sf2, check7sf3);
                                 608       check7sf1 := "1110100";             -- 14.5
                                 609       check7sf2 := check7sf1 sla -1;
                                 610       check7sf3 := "1111010";
                                 611       report_error ("Sla test -carry", check7sf2, check7sf3);
                                 612       check7sf1 := "1110100";             -- 14.5
                                 613       check7sf2 := check7sf1 sla 1;
                                 614       check7sf3 := "1101000";             -- 13
                                 615       report_error ("Sla test carry", check7sf2, check7sf3);
                                 616       check7sf1 := "0110101";             -- 6.625
                                 617       check7sf2 := check7sf1 sla -1;
                                 618       check7sf3 := "0011010";
                                 619       report_error ("Sla test -carry-", check7sf2, check7sf3);
                                 620       check7sf1 := "0110101";             -- 6.625
                                 621       check7sf2 := check7sf1 sla 1;
                                 622       check7sf3 := "1101010";
                                 623       report_error ("Sla test carry-", check7sf2, check7sf3);
                                 624       -- boolean "std_ulogic and unsigned" (get from 1164 test)
                                 625   
                                 626       -- test of new conversion functions
                                 627   --    check7sf1 := "0000001";
                                 628   --    check7uf1 := remove_sign (check7sf1);
                                 629   --    assert (check7uf1 = UNSIGNED(check7sf1))
                                 630   --      report "remove_sign (""" & to_string(check7sf1) & """ /= """
                                 631   --      & to_string(check7uf1) & """)"
                                 632   --      severity error;
                                 633   --    check7sf1 := "1111111";
                                 634   --    check7uf1 := remove_sign (check7sf1);
                                 635   --    assert (check7uf1 = 1)
                                 636   --      report "remove_sign (""" & to_string(check7sf1) & """ /= """
                                 637   --      & to_string(check7uf1) & """)"
                                 638   --      severity error;
                                 639   --    check7sf1 := "1000000";             -- max negative #
                                 640   --    check7uf1 := remove_sign (check7sf1);
                                 641   --    assert (check7uf1 = 64)
                                 642   --      report "remove_sign (""" & to_string(check7sf1) & """ /= """
                                 643   --      & to_string(check7uf1) & """)"
                                 644   --      severity error;
                                 645   --    check7uf1 := "0000001";
                                 646   --    as        := add_sign (check7uf1);
                                 647   --    assert (as = SIGNED ("0" & check7uf1))
                                 648   --      report "add_sign (""" & to_string (check7uf1) & """ /= """
                                 649   --      & to_string (as) & """)"
                                 650   --      severity error;
                                 651   --    check7uf1 := "1111111";
                                 652   --    as        := add_sign (check7uf1);
                                 653   --    assert (as = SIGNED ("0" & check7uf1))
                                 654   --      report "add_sign (""" & to_string (check7uf1) & """ /= """
                                 655   --      & to_string (as) & """)"
                                 656   --      severity error;
                                 657       check7uf1 := "0111110";
                                 658       check7uf2 := resize (check7uf1, check7uf2'length);
                                 659       report_error ("resize to same size", check7uf1, check7uf2);
                                 660       check7uf1 := "1011101";
                                 661       check7uf2 := resize (check7uf1, check7uf2'length);
                                 662       report_error ("resize to same size", check7uf1, check7uf2);
                                 663       check7uf1 := "1100011";
                                 664       check7uf2 := resize (check7uf1, check7uf2'length);
                                 665       report_error ("resize to same size", check7uf1, check7uf2);
                                 666       check7uf1 := "1111111";
                                 667       check7uf2 := resize (check7uf1, check7uf2'length);
                                 668       report_error ("resize to same size", check7uf1, check7uf2);
                                 669   
                                 670       start_booleantest <= true;
                                 671       wait until booleantest_done;
                                 672       
           1 blocking            672       start_matchtest   <= true;
                                 673       wait until matchtest_done;
                                 674       
           1 blocking            674       start_sizerestest <= true;
                                 675       wait until sizerestest_done;
                                 676       
           1 blocking            676       assert (false) report "numeric_std test_minmax complete" severity note;
                                 677       wait;
                                 678     end process testblock
           1 sequence            688       wait until start_booleantest;
                                 689       
           1 blocking            689       for a_val in 0 to 15 loop
                                 690         
          16 loop_body           690         a_bv  := STD_LOGIC_VECTOR(to_unsigned(a_val, 4));
                                 691         a_suv := UNSIGNED(a_bv);
                                 692         a_slv := SIGNED(a_bv);
                                 693         for b in STD_ULOGIC loop
                                 694           
         144 loop_body           694           b_su := b;
                                 695           b_bv := bv4'(others => b);
                                 696   
                                 697           assert STD_LOGIC_VECTOR(a_suv and b_su) = STD_LOGIC_VECTOR'(a_bv and b_bv)
                                 698             report "error in a_suv and b_su";
                                 699           assert STD_LOGIC_VECTOR(a_slv and b_su) = STD_LOGIC_VECTOR'(a_bv and b_bv)
                                 700             report "error in a_slv and b_su";
                                 701           assert STD_LOGIC_VECTOR(b_su and a_suv) = STD_LOGIC_VECTOR'(b_bv and a_bv)
                                 702             report "error in b_su and a_suv";
                                 703           assert STD_LOGIC_VECTOR(b_su and a_slv) = STD_LOGIC_VECTOR'(b_bv and a_bv)
                                 704             report "error in b_su and a_slv";
                                 705   
                                 706           assert STD_LOGIC_VECTOR(a_suv nand b_su) = STD_LOGIC_VECTOR'(a_bv nand b_bv)
                                 707             report "error in a_suv nand b_su";
                                 708           assert STD_LOGIC_VECTOR(a_slv nand b_su) = STD_LOGIC_VECTOR'(a_bv nand b_bv)
                                 709             report "error in a_slv nand b_su";
                                 710           assert STD_LOGIC_VECTOR(b_su nand a_suv) = STD_LOGIC_VECTOR'(b_bv nand a_bv)
                                 711             report "error in b_su nand a_suv";
                                 712           assert STD_LOGIC_VECTOR(b_su nand a_slv) = STD_LOGIC_VECTOR'(b_bv nand a_bv)
                                 713             report "error in b_su nand a_slv";
                                 714   
                                 715           assert STD_LOGIC_VECTOR(a_suv or b_su) = STD_LOGIC_VECTOR'(a_bv or b_bv)
                                 716             report "error in a_suv or b_su";
                                 717           assert STD_LOGIC_VECTOR(a_slv or b_su) = STD_LOGIC_VECTOR'(a_bv or b_bv)
                                 718             report "error in a_slv or b_su";
                                 719           assert STD_LOGIC_VECTOR(b_su or a_suv) = STD_LOGIC_VECTOR'(b_bv or a_bv)
                                 720             report "error in b_su or a_suv";
                                 721           assert STD_LOGIC_VECTOR(b_su or a_slv) = STD_LOGIC_VECTOR'(b_bv or a_bv)
                                 722             report "error in b_su or a_slv";
                                 723   
                                 724           assert STD_LOGIC_VECTOR(a_suv nor b_su) = STD_LOGIC_VECTOR'(a_bv nor b_bv)
                                 725             report "error in a_suv nor b_su";
                                 726           assert STD_LOGIC_VECTOR(a_slv nor b_su) = STD_LOGIC_VECTOR'(a_bv nor b_bv)
                                 727             report "error in a_slv nor b_su";
                                 728           assert STD_LOGIC_VECTOR(b_su nor a_suv) = STD_LOGIC_VECTOR'(b_bv nor a_bv)
                                 729             report "error in b_su nor a_suv";
                                 730           assert STD_LOGIC_VECTOR(b_su nor a_slv) = STD_LOGIC_VECTOR'(b_bv nor a_bv)
                                 731             report "error in b_su nor a_slv";
                                 732   
                                 733           assert STD_LOGIC_VECTOR(a_suv xor b_su) = STD_LOGIC_VECTOR'(a_bv xor b_bv)
                                 734             report "error in a_suv xor b_su";
                                 735           assert STD_LOGIC_VECTOR(a_slv xor b_su) = STD_LOGIC_VECTOR'(a_bv xor b_bv)
                                 736             report "error in a_slv xor b_su";
                                 737           assert STD_LOGIC_VECTOR(b_su xor a_suv) = STD_LOGIC_VECTOR'(b_bv xor a_bv)
                                 738             report "error in b_su xor a_suv";
                                 739           assert STD_LOGIC_VECTOR(b_su xor a_slv) = STD_LOGIC_VECTOR'(b_bv xor a_bv)
                                 740             report "error in b_su xor a_slv";
                                 741   
                                 742           assert STD_LOGIC_VECTOR(a_suv xnor b_su) = STD_LOGIC_VECTOR'(a_bv xnor b_bv)
                                 743             report "error in a_suv xnor b_su";
                                 744           assert STD_LOGIC_VECTOR(a_slv xnor b_su) = STD_LOGIC_VECTOR'(a_bv xnor b_bv)
                                 745             report "error in a_slv xnor b_su";
                                 746           assert STD_LOGIC_VECTOR(b_su xnor a_suv) = STD_LOGIC_VECTOR'(b_bv xnor a_bv)
                                 747             report "error in b_su xnor a_suv";
                                 748           assert STD_LOGIC_VECTOR(b_su xnor a_slv) = STD_LOGIC_VECTOR'(b_bv xnor a_bv)
                                 749             report "error in b_su xnor a_slv";
                                 750   
                                 751           wait for 1 ns;
                                 752         end loop;
                                 753       end loop;
                                 754       
           1 blocking            754       assert (quiet) report "boolean test completed" severity note;
                                 755       booleantest_done <= true;
                                 756       wait;
                                 757     end process verify
           1 sequence            773       wait until start_matchtest;
                                 774       -- First make sure that "std_match" still works
                                 775       -- Test std_match(std_ulogic) exhaustively
                                 776       
           1 blocking            776       for s in STD_ULOGIC loop
                                 777         
           9 loop_body           777         for s1 in STD_ULOGIC loop
                                 778           
          56 else                787             assert not (b)
                                 788               report "std_match (" & to_string(s) & ", " & to_string(s1)
                                 789               & ") returned true" severity error;
                                 790           end if;
                                 791         end loop;
                                 792       end loop;
                                 793       -- std_logic_vector
                                 794       
           1 reconvergence       794       aslv := "00000010";
                                 795       bslv := "00000010";
                                 796       assert (std_match (aslv, bslv))
                                 797         report "std_match (" & to_string(aslv) & " , " & to_string(bslv)
                                 798         & ") returned false"
                                 799         severity error;
                                 800       aslv := "00000010";
                                 801       bslv := "00000011";
                                 802       assert not (std_match (aslv, bslv))
                                 803         report "std_match (" & to_string(aslv) & " , " & to_string(bslv)
                                 804         & ") returned true"
                                 805         severity error;
                                 806       aslv := "00000010";
                                 807       bslv := "0000001H";
                                 808       assert not (std_match (aslv, bslv))
                                 809         report "std_match (" & to_string(aslv) & " , " & to_string(bslv)
                                 810         & ") returned true"
                                 811         severity error;
                                 812       aslv := "00000010";
                                 813       bslv := "0000001L";
                                 814       assert (std_match (aslv, bslv))
                                 815         report "std_match (" & to_string(aslv) & " , " & to_string(bslv)
                                 816         & ") returned false"
                                 817         severity error;
                                 818       aslv := "00000010";
                                 819       bslv := "0000001X";
                                 820       assert not (std_match (aslv, bslv))
                                 821         report "std_match (" & to_string(aslv) & " , " & to_string(bslv)
                                 822         & ") returned true"
                                 823         severity error;
                                 824       aslv := "0000001X";
                                 825       bslv := "00000010";
                                 826       assert not (std_match (aslv, bslv))
                                 827         report "std_match (" & to_string(aslv) & " , " & to_string(bslv)
                                 828         & ") returned true"
                                 829         severity error;
                                 830       aslv := "00000000";
                                 831       bslv := "LLLLLLLL";
                                 832       assert (std_match (aslv, bslv))
                                 833         report "std_match (" & to_string(aslv) & " , " & to_string(bslv)
                                 834         & ") returned false"
                                 835         severity error;
                                 836       aslv := "11111111";
                                 837       bslv := "HHHHHHHH";
                                 838       assert (std_match (aslv, bslv))
                                 839         report "std_match (" & to_string(aslv) & " , " & to_string(bslv)
                                 840         & ") returned false"
                                 841         severity error;
                                 842       aslv := "XXXXXXXX";
                                 843       bslv := "XXXXXXXX";
                                 844       assert not (std_match (aslv, bslv))
                                 845         report "std_match (" & to_string(aslv) & " , " & to_string(bslv)
                                 846         & ") returned true"
                                 847         severity error;
                                 848       aslv := "UZ-WHL01";
                                 849       bslv := "XXXXXXXX";
                                 850       assert not (std_match (aslv, bslv))
                                 851         report "std_match (" & to_string(aslv) & " , " & to_string(bslv)
                                 852         & ") returned true"
                                 853         severity error;
                                 854       aslv := "--------";
                                 855       bslv := "XXXXXXXX";
                                 856       assert (std_match (aslv, bslv))
                                 857         report "std_match (" & to_string(aslv) & " , " & to_string(bslv)
                                 858         & ") returned false"
                                 859         severity error;
                                 860       aslv := "10101010";
                                 861       bslv := "-0-0-0-0";
                                 862       assert (std_match (aslv, bslv))
                                 863         report "std_match (" & to_string(aslv) & " , " & to_string(bslv)
                                 864         & ") returned false"
                                 865         severity error;
                                 866       aslv := "10101010";
                                 867       bslv := "-0-0-0-1";
                                 868       assert not (std_match (aslv, bslv))
                                 869         report "std_match (" & to_string(aslv) & " , " & to_string(bslv)
                                 870         & ") returned true"
                                 871         severity error;
                                 872       aslv := "Z0U0W0X0";
                                 873       bslv := "-0-0-0-0";
                                 874       assert (std_match (aslv, bslv))
                                 875         report "std_match (" & to_string(aslv) & " , " & to_string(bslv)
                                 876         & ") returned false"
                                 877         severity error;
                                 878       -- std_ulogic_vector
                                 879       asulv := "00000010";
                                 880       bsulv := "00000010";
                                 881       assert (std_match (asulv, bsulv))
                                 882         report "std_match sulv (" & to_string(asulv) & " , " & to_string(bsulv)
                                 883         & ") returned false"
                                 884         severity error;
                                 885       asulv := "00000010";
                                 886       bsulv := "00000011";
                                 887       assert not (std_match (asulv, bsulv))
                                 888         report "std_match sulv (" & to_string(asulv) & " , " & to_string(bsulv)
                                 889         & ") returned true"
                                 890         severity error;
                                 891       asulv := "00000010";
                                 892       bsulv := "0000001H";
                                 893       assert not (std_match (asulv, bsulv))
                                 894         report "std_match sulv (" & to_string(asulv) & " , " & to_string(bsulv)
                                 895         & ") returned true"
                                 896         severity error;
                                 897       asulv := "00000010";
                                 898       bsulv := "0000001L";
                                 899       assert (std_match (asulv, bsulv))
                                 900         report "std_match sulv (" & to_string(asulv) & " , " & to_string(bsulv)
                                 901         & ") returned false"
                                 902         severity error;
                                 903       asulv := "00000010";
                                 904       bsulv := "0000001X";
                                 905       assert not (std_match (asulv, bsulv))
                                 906         report "std_match sulv (" & to_string(asulv) & " , " & to_string(bsulv)
                                 907         & ") returned true"
                                 908         severity error;
                                 909       asulv := "0000001X";
                                 910       bsulv := "00000010";
                                 911       assert not (std_match (asulv, bsulv))
                                 912         report "std_match sulv (" & to_string(asulv) & " , " & to_string(bsulv)
                                 913         & ") returned true"
                                 914         severity error;
                                 915       asulv := "00000000";
                                 916       bsulv := "LLLLLLLL";
                                 917       assert (std_match (asulv, bsulv))
                                 918         report "std_match sulv (" & to_string(asulv) & " , " & to_string(bsulv)
                                 919         & ") returned false"
                                 920         severity error;
                                 921       asulv := "11111111";
                                 922       bsulv := "HHHHHHHH";
                                 923       assert (std_match (asulv, bsulv))
                                 924         report "std_match sulv (" & to_string(asulv) & " , " & to_string(bsulv)
                                 925         & ") returned false"
                                 926         severity error;
                                 927       asulv := "XXXXXXXX";
                                 928       bsulv := "XXXXXXXX";
                                 929       assert not (std_match (asulv, bsulv))
                                 930         report "std_match sulv (" & to_string(asulv) & " , " & to_string(bsulv)
                                 931         & ") returned true"
                                 932         severity error;
                                 933       asulv := "UZ-WHL01";
                                 934       bsulv := "XXXXXXXX";
                                 935       assert not (std_match (asulv, bsulv))
                                 936         report "std_match sulv (" & to_string(asulv) & " , " & to_string(bsulv)
                                 937         & ") returned true"
                                 938         severity error;
                                 939       asulv := "--------";
                                 940       bsulv := "XXXXXXXX";
                                 941       assert (std_match (asulv, bsulv))
                                 942         report "std_match sulv (" & to_string(asulv) & " , " & to_string(bsulv)
                                 943         & ") returned false"
                                 944         severity error;
                                 945       asulv := "10101010";
                                 946       bsulv := "-0-0-0-0";
                                 947       assert (std_match (asulv, bsulv))
                                 948         report "std_match sulv (" & to_string(asulv) & " , " & to_string(bsulv)
                                 949         & ") returned false"
                                 950         severity error;
                                 951       asulv := "10101010";
                                 952       bsulv := "-0-0-0-1";
                                 953       assert not (std_match (asulv, bsulv))
                                 954         report "std_match sulv (" & to_string(asulv) & " , " & to_string(bsulv)
                                 955         & ") returned true"
                                 956         severity error;
                                 957       asulv := "Z0U0W0X0";
                                 958       bsulv := "-0-0-0-0";
                                 959       assert (std_match (asulv, bsulv))
                                 960         report "std_match sulv (" & to_string(asulv) & " , " & to_string(bsulv)
                                 961         & ") returned false"
                                 962         severity error;
                                 963       -- unsigned
                                 964       auns := "00000010";
                                 965       buns := "00000010";
                                 966       assert (std_match (auns, buns))
                                 967         report "std_match uns (" & to_string(auns) & " , " & to_string(buns)
                                 968         & ") returned false"
                                 969         severity error;
                                 970       auns := "00000010";
                                 971       buns := "00000011";
                                 972       assert not (std_match (auns, buns))
                                 973         report "std_match uns (" & to_string(auns) & " , " & to_string(buns)
                                 974         & ") returned true"
                                 975         severity error;
                                 976       auns := "00000010";
                                 977       buns := "0000001H";
                                 978       assert not (std_match (auns, buns))
                                 979         report "std_match uns (" & to_string(auns) & " , " & to_string(buns)
                                 980         & ") returned true"
                                 981         severity error;
                                 982       auns := "00000010";
                                 983       buns := "0000001L";
                                 984       assert (std_match (auns, buns))
                                 985         report "std_match uns (" & to_string(auns) & " , " & to_string(buns)
                                 986         & ") returned false"
                                 987         severity error;
                                 988       auns := "00000010";
                                 989       buns := "0000001X";
                                 990       assert not (std_match (auns, buns))
                                 991         report "std_match uns (" & to_string(auns) & " , " & to_string(buns)
                                 992         & ") returned true"
                                 993         severity error;
                                 994       auns := "0000001X";
                                 995       buns := "00000010";
                                 996       assert not (std_match (auns, buns))
                                 997         report "std_match uns (" & to_string(auns) & " , " & to_string(buns)
                                 998         & ") returned true"
                                 999         severity error;
                                1000       auns := "00000000";
                                1001       buns := "LLLLLLLL";
                                1002       assert (std_match (auns, buns))
                                1003         report "std_match uns (" & to_string(auns) & " , " & to_string(buns)
                                1004         & ") returned false"
                                1005         severity error;
                                1006       auns := "11111111";
                                1007       buns := "HHHHHHHH";
                                1008       assert (std_match (auns, buns))
                                1009         report "std_match uns (" & to_string(auns) & " , " & to_string(buns)
                                1010         & ") returned false"
                                1011         severity error;
                                1012       auns := "XXXXXXXX";
                                1013       buns := "XXXXXXXX";
                                1014       assert not (std_match (auns, buns))
                                1015         report "std_match uns (" & to_string(auns) & " , " & to_string(buns)
                                1016         & ") returned true"
                                1017         severity error;
                                1018       auns := "UZ-WHL01";
                                1019       buns := "XXXXXXXX";
                                1020       assert not (std_match (auns, buns))
                                1021         report "std_match uns (" & to_string(auns) & " , " & to_string(buns)
                                1022         & ") returned true"
                                1023         severity error;
                                1024       auns := "--------";
                                1025       buns := "XXXXXXXX";
                                1026       assert (std_match (auns, buns))
                                1027         report "std_match uns (" & to_string(auns) & " , " & to_string(buns)
                                1028         & ") returned false"
                                1029         severity error;
                                1030       auns := "10101010";
                                1031       buns := "-0-0-0-0";
                                1032       assert (std_match (auns, buns))
                                1033         report "std_match uns (" & to_string(auns) & " , " & to_string(buns)
                                1034         & ") returned false"
                                1035         severity error;
                                1036       auns := "10101010";
                                1037       buns := "-0-0-0-1";
                                1038       assert not (std_match (auns, buns))
                                1039         report "std_match uns (" & to_string(auns) & " , " & to_string(buns)
                                1040         & ") returned true"
                                1041         severity error;
                                1042       auns := "Z0U0W0X0";
                                1043       buns := "-0-0-0-0";
                                1044       assert (std_match (auns, buns))
                                1045         report "std_match uns (" & to_string(auns) & " , " & to_string(buns)
                                1046         & ") returned false"
                                1047         severity error;
                                1048       -- signed
                                1049       as := "00000010";
                                1050       bs := "00000010";
                                1051       assert (std_match (as, bs))
                                1052         report "std_match s (" & to_string(as) & " , " & to_string(bs)
                                1053         & ") returned false"
                                1054         severity error;
                                1055       as := "00000010";
                                1056       bs := "00000011";
                                1057       assert not (std_match (as, bs))
                                1058         report "std_match s (" & to_string(as) & " , " & to_string(bs)
                                1059         & ") returned true"
                                1060         severity error;
                                1061       as := "00000010";
                                1062       bs := "0000001H";
                                1063       assert not (std_match (as, bs))
                                1064         report "std_match s (" & to_string(as) & " , " & to_string(bs)
                                1065         & ") returned true"
                                1066         severity error;
                                1067       as := "00000010";
                                1068       bs := "0000001L";
                                1069       assert (std_match (as, bs))
                                1070         report "std_match s (" & to_string(as) & " , " & to_string(bs)
                                1071         & ") returned false"
                                1072         severity error;
                                1073       as := "00000010";
                                1074       bs := "0000001X";
                                1075       assert not (std_match (as, bs))
                                1076         report "std_match s (" & to_string(as) & " , " & to_string(bs)
                                1077         & ") returned true"
                                1078         severity error;
                                1079       as := "0000001X";
                                1080       bs := "00000010";
                                1081       assert not (std_match (as, bs))
                                1082         report "std_match s (" & to_string(as) & " , " & to_string(bs)
                                1083         & ") returned true"
                                1084         severity error;
                                1085       as := "00000000";
                                1086       bs := "LLLLLLLL";
                                1087       assert (std_match (as, bs))
                                1088         report "std_match s (" & to_string(as) & " , " & to_string(bs)
                                1089         & ") returned false"
                                1090         severity error;
                                1091       as := "11111111";
                                1092       bs := "HHHHHHHH";
                                1093       assert (std_match (as, bs))
                                1094         report "std_match s (" & to_string(as) & " , " & to_string(bs)
                                1095         & ") returned false"
                                1096         severity error;
                                1097       as := "XXXXXXXX";
                                1098       bs := "XXXXXXXX";
                                1099       assert not (std_match (as, bs))
                                1100         report "std_match s (" & to_string(as) & " , " & to_string(bs)
                                1101         & ") returned true"
                                1102         severity error;
                                1103       as := "UZ-WHL01";
                                1104       bs := "XXXXXXXX";
                                1105       assert not (std_match (as, bs))
                                1106         report "std_match s (" & to_string(as) & " , " & to_string(bs)
                                1107         & ") returned true"
                                1108         severity error;
                                1109       as := "--------";
                                1110       bs := "XXXXXXXX";
                                1111       assert (std_match (as, bs))
                                1112         report "std_match s (" & to_string(as) & " , " & to_string(bs)
                                1113         & ") returned false"
                                1114         severity error;
                                1115       as := "10101010";
                                1116       bs := "-0-0-0-0";
                                1117       assert (std_match (as, bs))
                                1118         report "std_match s (" & to_string(as) & " , " & to_string(bs)
                                1119         & ") returned false"
                                1120         severity error;
                                1121       as := "10101010";
                                1122       bs := "-0-0-0-1";
                                1123       assert not (std_match (as, bs))
                                1124         report "std_match s (" & to_string(as) & " , " & to_string(bs)
                                1125         & ") returned true"
                                1126         severity error;
                                1127       as := "Z0U0W0X0";
                                1128       bs := "-0-0-0-0";
                                1129       assert (std_match (as, bs))
                                1130         report "std_match s (" & to_string(as) & " , " & to_string(bs)
                                1131         & ") returned false"
                                1132         severity error;
                                1133       
          81 loop_body           778           b := std_match (s, s1);
                                 779           if ((s = s1 and (s /= 'U' and s /= 'X' and s /= 'W' and s /= 'Z'))
                                 780               or s = '-' or s1 = '-'
                                 781               or (s = '0' and s1 = 'L') or (s = 'L' and s1 = '0')
                                 782               or (s = '1' and s1 = 'H') or (s = 'H' and s1 = '1')) then
                                 783             
          25 if                  783             assert (b)
                                 784               report "std_match (" & to_string(s) & ", " & to_string(s1)
                                 785               & ") returned false" severity error;
                                 786           else
                                 787             
           1 if                 1134         auns   := "00000111";
                                1135         check6 := "0000111";              -- length mismatch
                                1136         assert not (std_match(auns, check6))
                                1137           report "std_match (" & to_string(auns) & " , " & to_string(check6)
                                1138           & ") returned true"
                                1139           severity error;
                                1140         assert not (std_match(check6, auns))
                                1141           report "std_match (" & to_string(check6) & " , " & to_string(auns)
                                1142           & ") returned true"
                                1143           severity error;
                                1144         as      := "00000111";
                                1145         checks6 := "0000111";             -- length mismatch
                                1146         assert not (std_match(as, checks6))
                                1147           report "std_match s (" & to_string(as) & " , " & to_string(checks6)
                                1148           & ") returned true"
                                1149           severity error;
                                1150         assert not (std_match(checks6, as))
                                1151           report "std_match s (" & to_string(checks6) & " , " & to_string(as)
                                1152           & ") returned true"
                                1153           severity error;
                                1154       end if;
                                1155       -- Test std_match(std_ulogic) exhaustively
                                1156       
           0 implicit_else      1133       if (not quiet) then
                                1134         
           1 reconvergence      1156       for s in STD_ULOGIC loop
                                1157         
           9 loop_body          1157         for s1 in STD_ULOGIC loop
                                1158           
           1 reconvergence      1174       auns := "00000010";
                                1175       buns := "00000010";
                                1176       s    := auns ?= buns;
                                1177       assert s = '1'
                                1178         report "uns " & to_string(auns) & " ?= " & to_string(buns)
                                1179         & " = " & to_string (s)
                                1180         severity error;
                                1181       auns := "00000010";
                                1182       buns := "00000011";
                                1183       s    := auns ?= buns;
                                1184       assert s = '0'
                                1185         report "uns " & to_string(auns) & " ?= " & to_string(buns)
                                1186         & " = " & to_string (s)
                                1187         severity error;
                                1188       auns := "00000010";
                                1189       buns := "0000001H";
                                1190       s    := auns ?= buns;
                                1191       assert s = '0'
                                1192         report "uns " & to_string(auns) & " ?= " & to_string(buns)
                                1193         & " = " & to_string (s)
                                1194         severity error;
                                1195       auns := "00000010";
                                1196       buns := "0000001L";
                                1197       s    := auns ?= buns;
                                1198       assert s = '1'
                                1199         report "uns " & to_string(auns) & " ?= " & to_string(buns)
                                1200         & " = " & to_string (s)
                                1201         severity error;
                                1202       auns := "00000010";
                                1203       buns := "0000001X";
                                1204       s    := auns ?= buns;
                                1205       assert s = 'X'
                                1206         report "uns " & to_string(auns) & " ?= " & to_string(buns)
                                1207         & " = " & to_string (s)
                                1208         severity error;
                                1209       auns := "0000001X";
                                1210       buns := "00000010";
                                1211       s    := auns ?= buns;
                                1212       assert s = 'X'
                                1213         report "uns " & to_string(auns) & " ?= " & to_string(buns)
                                1214         & " = " & to_string (s)
                                1215         severity error;
                                1216       auns := "00000000";
                                1217       buns := "LLLLLLLL";
                                1218       s    := auns ?= buns;
                                1219       assert s = '1'
                                1220         report "uns " & to_string(auns) & " ?= " & to_string(buns)
                                1221         & " = " & to_string (s)
                                1222         severity error;
                                1223       auns := "11111111";
                                1224       buns := "HHHHHHHH";
                                1225       s    := auns ?= buns;
                                1226       assert s = '1'
                                1227         report "uns " & to_string(auns) & " ?= " & to_string(buns)
                                1228         & " = " & to_string (s)
                                1229         severity error;
                                1230       auns := "XXXXXXXX";
                                1231       buns := "XXXXXXXX";
                                1232       s    := auns ?= buns;
                                1233       assert s = 'X'
                                1234         report "uns " & to_string(auns) & " ?= " & to_string(buns)
                                1235         & " = " & to_string (s)
                                1236         severity error;
                                1237       auns := "UZ-WHL01";
                                1238       buns := "XXXXXXXX";
                                1239       s    := auns ?= buns;
                                1240       assert s = 'U'
                                1241         report "uns " & to_string(auns) & " ?= " & to_string(buns)
                                1242         & " = " & to_string (s)
                                1243         severity error;
                                1244       auns := "--------";
                                1245       buns := "XXXXXXXX";
                                1246       s    := auns ?= buns;
                                1247       assert s = '1'
                                1248         report "uns " & to_string(auns) & " ?= " & to_string(buns)
                                1249         & " = " & to_string (s)
                                1250         severity error;
                                1251       auns := "10101010";
                                1252       buns := "-0-0-0-0";
                                1253       s    := auns ?= buns;
                                1254       assert s = '1'
                                1255         report "uns " & to_string(auns) & " ?= " & to_string(buns)
                                1256         & " = " & to_string (s)
                                1257         severity error;
                                1258       auns := "10101010";
                                1259       buns := "-0-0-0-1";
                                1260       s    := auns ?= buns;
                                1261       assert s = '0'
                                1262         report "uns " & to_string(auns) & " ?= " & to_string(buns)
                                1263         & " = " & to_string (s)
                                1264         severity error;
                                1265       auns := "Z0U0W0X0";
                                1266       buns := "-0-0-0-0";
                                1267       s    := auns ?= buns;
                                1268       assert s = '1'
                                1269         report "uns " & to_string(auns) & " ?= " & to_string(buns)
                                1270         & " = " & to_string (s)
                                1271         severity error;
                                1272       -- signed
                                1273       as := "00000010";
                                1274       bs := "00000010";
                                1275       s  := as ?= bs;
                                1276       assert s = '1'
                                1277         report "s " & to_string(as) & " ?= " & to_string(bs)
                                1278         & " = " & to_string (s)
                                1279         severity error;
                                1280       as := "00000010";
                                1281       bs := "00000011";
                                1282       s  := as ?= bs;
                                1283       assert s = '0'
                                1284         report "s " & to_string(as) & " ?= " & to_string(bs)
                                1285         & " = " & to_string (s)
                                1286         severity error;
                                1287       as := "00000010";
                                1288       bs := "0000001H";
                                1289       s  := as ?= bs;
                                1290       assert s = '0'
                                1291         report "s " & to_string(as) & " ?= " & to_string(bs)
                                1292         & " = " & to_string (s)
                                1293         severity error;
                                1294       as := "00000010";
                                1295       bs := "0000001L";
                                1296       s  := as ?= bs;
                                1297       assert s = '1'
                                1298         report "s " & to_string(as) & " ?= " & to_string(bs)
                                1299         & " = " & to_string (s)
                                1300         severity error;
                                1301       as := "00000010";
                                1302       bs := "0000001X";
                                1303       s  := as ?= bs;
                                1304       assert s = 'X'
                                1305         report "s " & to_string(as) & " ?= " & to_string(bs)
                                1306         & " = " & to_string (s)
                                1307         severity error;
                                1308       as := "0000001X";
                                1309       bs := "00000010";
                                1310       s  := as ?= bs;
                                1311       assert s = 'X'
                                1312         report "s " & to_string(as) & " ?= " & to_string(bs)
                                1313         & " = " & to_string (s)
                                1314         severity error;
                                1315       as := "00000000";
                                1316       bs := "LLLLLLLL";
                                1317       s  := as ?= bs;
                                1318       assert s = '1'
                                1319         report "s " & to_string(as) & " ?= " & to_string(bs)
                                1320         & " = " & to_string (s)
                                1321         severity error;
                                1322       as := "11111111";
                                1323       bs := "HHHHHHHH";
                                1324       s  := as ?= bs;
                                1325       assert s = '1'
                                1326         report "s " & to_string(as) & " ?= " & to_string(bs)
                                1327         & " = " & to_string (s)
                                1328         severity error;
                                1329       checks6 := "H000010";
                                1330       bs      := "HH00001L";
                                1331       s       := checks6 ?= bs;
                                1332       assert s = '1'
                                1333         report "s " & to_string(checks6) & " ?= " & to_string(bs)
                                1334         & " = " & to_string (s)
                                1335         severity error;
                                1336       checks6 := "H00001H";
                                1337       bs      := "1100001L";
                                1338       s       := checks6 ?= bs;
                                1339       assert s = '0'
                                1340         report "s " & to_string(checks6) & " ?= " & to_string(bs)
                                1341         & " = " & to_string (s)
                                1342         severity error;
                                1343       as := "XXXXXXXX";
                                1344       bs := "XXXXXXXX";
                                1345       s  := as ?= bs;
                                1346       assert s = 'X'
                                1347         report "s " & to_string(as) & " ?= " & to_string(bs)
                                1348         & " = " & to_string (s)
                                1349         severity error;
                                1350       as := "UZ-WHL01";
                                1351       bs := "XXXXXXXX";
                                1352       s  := as ?= bs;
                                1353       assert s = 'U'
                                1354         report "s " & to_string(as) & " ?= " & to_string(bs)
                                1355         & " = " & to_string (s)
                                1356         severity error;
                                1357       as := "--------";
                                1358       bs := "XXXXXXXX";
                                1359       s  := as ?= bs;
                                1360       assert s = '1'
                                1361         report "s " & to_string(as) & " ?= " & to_string(bs)
                                1362         & " = " & to_string (s)
                                1363         severity error;
                                1364       as := "10101010";
                                1365       bs := "-0-0-0-0";
                                1366       s  := as ?= bs;
                                1367       assert s = '1'
                                1368         report "s " & to_string(as) & " ?= " & to_string(bs)
                                1369         & " = " & to_string (s)
                                1370         severity error;
                                1371       as := "10101010";
                                1372       bs := "-0-0-0-1";
                                1373       s  := as ?= bs;
                                1374       assert s = '0'
                                1375         report "s " & to_string(as) & " ?= " & to_string(bs)
                                1376         & " = " & to_string (s)
                                1377         severity error;
                                1378       as := "Z0U0W0X0";
                                1379       bs := "-0-0-0-0";
                                1380       s  := as ?= bs;
                                1381       assert s = '1'
                                1382         report "s " & to_string(as) & " ?= " & to_string(bs)
                                1383         & " = " & to_string (s)
                                1384         severity error;
                                1385   
                                1386       -- unsigned
                                1387       auns := "00000010";
                                1388       buns := "00000010";
                                1389       s    := auns ?/= buns;
                                1390       assert s = '0'
                                1391         report "uns " & to_string(auns) & " ?/= " & to_string(buns)
                                1392         & " = " & to_string (s)
                                1393         severity error;
                                1394       auns := "00000010";
                                1395       buns := "00000011";
                                1396       s    := auns ?/= buns;
                                1397       assert s = '1'
                                1398         report "uns " & to_string(auns) & " ?/= " & to_string(buns)
                                1399         & " = " & to_string (s)
                                1400         severity error;
                                1401       auns := "00000010";
                                1402       buns := "0000001H";
                                1403       s    := auns ?/= buns;
                                1404       assert s = '1'
                                1405         report "uns " & to_string(auns) & " ?/= " & to_string(buns)
                                1406         & " = " & to_string (s)
                                1407         severity error;
                                1408       auns := "00000010";
                                1409       buns := "0000001L";
                                1410       s    := auns ?/= buns;
                                1411       assert s = '0'
                                1412         report "uns " & to_string(auns) & " ?/= " & to_string(buns)
                                1413         & " = " & to_string (s)
                                1414         severity error;
                                1415       auns := "00000010";
                                1416       buns := "0000001X";
                                1417       s    := auns ?/= buns;
                                1418       assert s = 'X'
                                1419         report "uns " & to_string(auns) & " ?/= " & to_string(buns)
                                1420         & " = " & to_string (s)
                                1421         severity error;
                                1422       auns := "0000001X";
                                1423       buns := "00000010";
                                1424       s    := auns ?/= buns;
                                1425       assert s = 'X'
                                1426         report "uns " & to_string(auns) & " ?/= " & to_string(buns)
                                1427         & " = " & to_string (s)
                                1428         severity error;
                                1429       auns := "00000000";
                                1430       buns := "LLLLLLLL";
                                1431       s    := auns ?/= buns;
                                1432       assert s = '0'
                                1433         report "uns " & to_string(auns) & " ?/= " & to_string(buns)
                                1434         & " = " & to_string (s)
                                1435         severity error;
                                1436       check6 := "H000010";
                                1437       buns   := "HH00001L";
                                1438       s      := check6 ?/= buns;
                                1439       assert s = '1'
                                1440         report "s " & to_string(check6) & " ?/= " & to_string(buns)
                                1441         & " = " & to_string (s)
                                1442         severity error;
                                1443       check6 := "L000010";
                                1444       buns   := "LL00001L";
                                1445       s      := check6 ?/= buns;
                                1446       assert s = '0'
                                1447         report "s " & to_string(check6) & " ?/= " & to_string(buns)
                                1448         & " = " & to_string (s)
                                1449         severity error;
                                1450       auns := "11111111";
                                1451       buns := "HHHHHHHH";
                                1452       s    := auns ?/= buns;
                                1453       assert s = '0'
                                1454         report "uns " & to_string(auns) & " ?/= " & to_string(buns)
                                1455         & " = " & to_string (s)
                                1456         severity error;
                                1457       auns := "XXXXXXXX";
                                1458       buns := "XXXXXXXX";
                                1459       s    := auns ?/= buns;
                                1460       assert s = 'X'
                                1461         report "uns " & to_string(auns) & " ?/= " & to_string(buns)
                                1462         & " = " & to_string (s)
                                1463         severity error;
                                1464       auns := "UZ-WHL01";
                                1465       buns := "XXXXXXXX";
                                1466       s    := auns ?/= buns;
                                1467       assert s = 'U'
                                1468         report "uns " & to_string(auns) & " ?/= " & to_string(buns)
                                1469         & " = " & to_string (s)
                                1470         severity error;
                                1471       auns := "--------";
                                1472       buns := "XXXXXXXX";
                                1473       s    := auns ?/= buns;
                                1474       assert s = '0'
                                1475         report "uns " & to_string(auns) & " ?/= " & to_string(buns)
                                1476         & " = " & to_string (s)
                                1477         severity error;
                                1478       auns := "10101010";
                                1479       buns := "-0-0-0-0";
                                1480       s    := auns ?/= buns;
                                1481       assert s = '0'
                                1482         report "uns " & to_string(auns) & " ?/= " & to_string(buns)
                                1483         & " = " & to_string (s)
                                1484         severity error;
                                1485       auns := "10101010";
                                1486       buns := "-0-0-0-1";
                                1487       s    := auns ?/= buns;
                                1488       assert s = '1'
                                1489         report "uns " & to_string(auns) & " ?/= " & to_string(buns)
                                1490         & " = " & to_string (s)
                                1491         severity error;
                                1492       auns := "Z0U0W0X0";
                                1493       buns := "-0-0-0-0";
                                1494       s    := auns ?/= buns;
                                1495       assert s = '0'
                                1496         report "uns " & to_string(auns) & " ?/= " & to_string(buns)
                                1497         & " = " & to_string (s)
                                1498         severity error;
                                1499       -- ?<
                                1500       auns := "00000010";
                                1501       buns := "00000010";
                                1502       s    := auns ?< buns;
                                1503       assert s = '0'
                                1504         report "uns " & to_string(auns) & " ?< " & to_string(buns)
                                1505         & " = " & to_string (s)
                                1506         severity error;
                                1507       auns := "00000010";
                                1508       buns := "00000011";
                                1509       s    := auns ?< buns;
                                1510       assert s = '1'
                                1511         report "uns " & to_string(auns) & " ?< " & to_string(buns)
                                1512         & " = " & to_string (s)
                                1513         severity error;
                                1514       auns := "00000010";
                                1515       buns := "0000001H";
                                1516       s    := auns ?< buns;
                                1517       assert s = '1'
                                1518         report "uns " & to_string(auns) & " ?< " & to_string(buns)
                                1519         & " = " & to_string (s)
                                1520         severity error;
                                1521       auns := "00000010";
                                1522       buns := "0000001L";
                                1523       s    := auns ?< buns;
                                1524       assert s = '0'
                                1525         report "uns " & to_string(auns) & " ?< " & to_string(buns)
                                1526         & " = " & to_string (s)
                                1527         severity error;
                                1528       auns := "H0000010";
                                1529       buns := "0000001L";
                                1530       s    := auns ?< buns;
                                1531       assert s = '0'
                                1532         report "uns " & to_string(auns) & " ?< " & to_string(buns)
                                1533         & " = " & to_string (s)
                                1534         severity error;
                                1535       auns := "00000010";
                                1536       buns := "0000001X";
                                1537       s    := auns ?< buns;
                                1538       assert s = 'X'
                                1539         report "uns " & to_string(auns) & " ?< " & to_string(buns)
                                1540         & " = " & to_string (s)
                                1541         severity error;
                                1542       auns := "0000001X";
                                1543       buns := "00000010";
                                1544       s    := auns ?< buns;
                                1545       assert s = 'X'
                                1546         report "uns " & to_string(auns) & " ?< " & to_string(buns)
                                1547         & " = " & to_string (s)
                                1548         severity error;
                                1549       auns := "0000000H";
                                1550       buns := "LLLLLLLL";
                                1551       s    := auns ?< buns;
                                1552       assert s = '0'
                                1553         report "uns " & to_string(auns) & " ?< " & to_string(buns)
                                1554         & " = " & to_string (s)
                                1555         severity error;
                                1556       auns := "11111111";
                                1557       buns := "HHHHHHHH";
                                1558       s    := auns ?< buns;
                                1559       assert s = '0'
                                1560         report "uns " & to_string(auns) & " ?< " & to_string(buns)
                                1561         & " = " & to_string (s)
                                1562         severity error;
                                1563       auns := "XXXXXXXX";
                                1564       buns := "XXXXXXXX";
                                1565       s    := auns ?< buns;
                                1566       assert s = 'X'
                                1567         report "uns " & to_string(auns) & " ?< " & to_string(buns)
                                1568         & " = " & to_string (s)
                                1569         severity error;
                                1570       
          56 else               1167             assert not (b)
                                1168               report "std_match (" & to_string(s) & ", " & to_string(s1)
                                1169               & ") returned true" severity error;
                                1170           end if;
                                1171         end loop;
                                1172       end loop;
                                1173       -- unsigned
                                1174       
          81 loop_body          1158           b := std_match (s, s1);
                                1159           if ((s = s1 and (s /= 'U' and s /= 'X' and s /= 'W' and s /= 'Z'))
                                1160               or s = '-' or s1 = '-'
                                1161               or (s = '0' and s1 = 'L') or (s = 'L' and s1 = '0')
                                1162               or (s = '1' and s1 = 'H') or (s = 'H' and s1 = '1')) then
                                1163             
          25 if                 1163             assert (b)
                                1164               report "std_match (" & to_string(s) & ", " & to_string(s1)
                                1165               & ") returned false" severity error;
                                1166           else
                                1167             
           1 if                 1571         report "Expect an error from a compare function here" severity note;
                                1572         auns := "UZ-WHL01";
                                1573         buns := "XXXXXXXX";
                                1574         s    := auns ?< buns;
                                1575         assert s = 'X'
                                1576           report "uns " & to_string(auns) & " ?< " & to_string(buns)
                                1577           & " = " & to_string (s)
                                1578           severity error;
                                1579       end if;
                                1580       
           0 implicit_else      1570       if not quiet then
                                1571         
           1 reconvergence      1580       auns := "UZXWHL01";
                                1581       buns := "XXXXXXXX";
                                1582       s    := auns ?< buns;
                                1583       assert s = 'X'
                                1584         report "uns " & to_string(auns) & " ?< " & to_string(buns)
                                1585         & " = " & to_string (s)
                                1586         severity error;
                                1587       -- ?<=
                                1588       auns := "00000010";
                                1589       buns := "00000010";
                                1590       s    := auns ?<= buns;
                                1591       assert s = '1'
                                1592         report "uns " & to_string(auns) & " ?<= " & to_string(buns)
                                1593         & " = " & to_string (s)
                                1594         severity error;
                                1595       auns := "00000010";
                                1596       buns := "00000011";
                                1597       s    := auns ?<= buns;
                                1598       assert s = '1'
                                1599         report "uns " & to_string(auns) & " ?<= " & to_string(buns)
                                1600         & " = " & to_string (s)
                                1601         severity error;
                                1602       auns := "00000010";
                                1603       buns := "0000001H";
                                1604       s    := auns ?<= buns;
                                1605       assert s = '1'
                                1606         report "uns " & to_string(auns) & " ?<= " & to_string(buns)
                                1607         & " = " & to_string (s)
                                1608         severity error;
                                1609       auns := "H0000L1H";
                                1610       buns := "0000001H";
                                1611       s    := auns ?<= buns;
                                1612       assert s = '0'
                                1613         report "uns " & to_string(auns) & " ?<= " & to_string(buns)
                                1614         & " = " & to_string (s)
                                1615         severity error;
                                1616       auns := "00000010";
                                1617       buns := "0000001L";
                                1618       s    := auns ?<= buns;
                                1619       assert s = '1'
                                1620         report "uns " & to_string(auns) & " ?<= " & to_string(buns)
                                1621         & " = " & to_string (s)
                                1622         severity error;
                                1623       auns := "00000010";
                                1624       buns := "0000001X";
                                1625       s    := auns ?<= buns;
                                1626       assert s = 'X'
                                1627         report "uns " & to_string(auns) & " ?<= " & to_string(buns)
                                1628         & " = " & to_string (s)
                                1629         severity error;
                                1630       auns := "0000001X";
                                1631       buns := "00000010";
                                1632       s    := auns ?<= buns;
                                1633       assert s = 'X'
                                1634         report "uns " & to_string(auns) & " ?<= " & to_string(buns)
                                1635         & " = " & to_string (s)
                                1636         severity error;
                                1637       auns := "0000000H";
                                1638       buns := "LLLLLLLL";
                                1639       s    := auns ?<= buns;
                                1640       assert s = '0'
                                1641         report "uns " & to_string(auns) & " ?<= " & to_string(buns)
                                1642         & " = " & to_string (s)
                                1643         severity error;
                                1644       auns := "11111111";
                                1645       buns := "HHHHHHHH";
                                1646       s    := auns ?<= buns;
                                1647       assert s = '1'
                                1648         report "uns " & to_string(auns) & " ?<= " & to_string(buns)
                                1649         & " = " & to_string (s)
                                1650         severity error;
                                1651       auns := "XXXXXXXX";
                                1652       buns := "XXXXXXXX";
                                1653       s    := auns ?<= buns;
                                1654       assert s = 'X'
                                1655         report "uns " & to_string(auns) & " ?<= " & to_string(buns)
                                1656         & " = " & to_string (s)
                                1657         severity error;
                                1658       
           1 if                 1659         report "Expect an error from a compare function here" severity note;
                                1660         auns := "UZ-WHL01";
                                1661         buns := "XXXXXXXX";
                                1662         s    := auns ?<= buns;
                                1663         assert s = 'X'
                                1664           report "uns " & to_string(auns) & " ?<= " & to_string(buns)
                                1665           & " = " & to_string (s)
                                1666           severity error;
                                1667       end if;
                                1668       
           0 implicit_else      1658       if not quiet then
                                1659         
           1 reconvergence      1668       auns := "UZXWHL01";
                                1669       buns := "XXXXXXXX";
                                1670       s    := auns ?<= buns;
                                1671       assert s = 'X'
                                1672         report "uns " & to_string(auns) & " ?<= " & to_string(buns)
                                1673         & " = " & to_string (s)
                                1674         severity error;
                                1675       -- ?>
                                1676       auns := "00000010";
                                1677       buns := "00000010";
                                1678       s    := auns ?> buns;
                                1679       assert s = '0'
                                1680         report "uns " & to_string(auns) & " ?> " & to_string(buns)
                                1681         & " = " & to_string (s)
                                1682         severity error;
                                1683       buns := "00000010";
                                1684       auns := "00000011";
                                1685       s    := auns ?> buns;
                                1686       assert s = '1'
                                1687         report "uns " & to_string(auns) & " ?> " & to_string(buns)
                                1688         & " = " & to_string (s)
                                1689         severity error;
                                1690       buns := "00000010";
                                1691       auns := "0000001H";
                                1692       s    := auns ?> buns;
                                1693       assert s = '1'
                                1694         report "uns " & to_string(auns) & " ?> " & to_string(buns)
                                1695         & " = " & to_string (s)
                                1696         severity error;
                                1697       buns := "H0000010";
                                1698       auns := "0000001H";
                                1699       s    := auns ?> buns;
                                1700       assert s = '0'
                                1701         report "uns " & to_string(auns) & " ?> " & to_string(buns)
                                1702         & " = " & to_string (s)
                                1703         severity error;
                                1704       auns := "00000010";
                                1705       buns := "0000001L";
                                1706       s    := auns ?> buns;
                                1707       assert s = '0'
                                1708         report "uns " & to_string(auns) & " ?> " & to_string(buns)
                                1709         & " = " & to_string (s)
                                1710         severity error;
                                1711       auns := "00000010";
                                1712       buns := "0000001X";
                                1713       s    := auns ?> buns;
                                1714       assert s = 'X'
                                1715         report "uns " & to_string(auns) & " ?> " & to_string(buns)
                                1716         & " = " & to_string (s)
                                1717         severity error;
                                1718       auns := "0000001Z";
                                1719       buns := "00000010";
                                1720       s    := auns ?> buns;
                                1721       assert s = 'X'
                                1722         report "uns " & to_string(auns) & " ?> " & to_string(buns)
                                1723         & " = " & to_string (s)
                                1724         severity error;
                                1725       auns := "0000000H";
                                1726       buns := "LLLLLLLL";
                                1727       s    := auns ?> buns;
                                1728       assert s = '1'
                                1729         report "uns " & to_string(auns) & " ?> " & to_string(buns)
                                1730         & " = " & to_string (s)
                                1731         severity error;
                                1732       auns := "11111111";
                                1733       buns := "HHHHHHHH";
                                1734       s    := auns ?> buns;
                                1735       assert s = '0'
                                1736         report "uns " & to_string(auns) & " ?> " & to_string(buns)
                                1737         & " = " & to_string (s)
                                1738         severity error;
                                1739       auns := "XXXXXXXX";
                                1740       buns := "XXXXXXXX";
                                1741       s    := auns ?> buns;
                                1742       assert s = 'X'
                                1743         report "uns " & to_string(auns) & " ?> " & to_string(buns)
                                1744         & " = " & to_string (s)
                                1745         severity error;
                                1746       
           1 if                 1747         report "Expect an error from a compare function here" severity note;
                                1748         auns := "UZ-WHL01";
                                1749         buns := "XXXXXXXX";
                                1750         s    := auns ?> buns;
                                1751         assert s = 'X'
                                1752           report "uns " & to_string(auns) & " ?> " & to_string(buns)
                                1753           & " = " & to_string (s)
                                1754           severity error;
                                1755       end if;
                                1756       
           0 implicit_else      1746       if not quiet then
                                1747         
           1 reconvergence      1756       auns := "UZXWHL01";
                                1757       buns := "XXXXXXXX";
                                1758       s    := auns ?> buns;
                                1759       assert s = 'X'
                                1760         report "uns " & to_string(auns) & " ?> " & to_string(buns)
                                1761         & " = " & to_string (s)
                                1762         severity error;
                                1763       -- ?>=
                                1764       auns := "00000010";
                                1765       buns := "00000010";
                                1766       s    := auns ?>= buns;
                                1767       assert s = '1'
                                1768         report "uns " & to_string(auns) & " ?>= " & to_string(buns)
                                1769         & " = " & to_string (s)
                                1770         severity error;
                                1771       buns := "00000010";
                                1772       auns := "00000011";
                                1773       s    := auns ?>= buns;
                                1774       assert s = '1'
                                1775         report "uns " & to_string(auns) & " ?>= " & to_string(buns)
                                1776         & " = " & to_string (s)
                                1777         severity error;
                                1778       buns := "00000010";
                                1779       auns := "0000001H";
                                1780       s    := auns ?>= buns;
                                1781       assert s = '1'
                                1782         report "uns " & to_string(auns) & " ?>= " & to_string(buns)
                                1783         & " = " & to_string (s)
                                1784         severity error;
                                1785       auns := "00000010";
                                1786       buns := "0000001H";
                                1787       s    := auns ?>= buns;
                                1788       assert s = '0'
                                1789         report "uns " & to_string(auns) & " ?>= " & to_string(buns)
                                1790         & " = " & to_string (s)
                                1791         severity error;
                                1792       auns := "H0000010";
                                1793       buns := "0000001H";
                                1794       s    := auns ?>= buns;
                                1795       assert s = '1'
                                1796         report "uns " & to_string(auns) & " ?>= " & to_string(buns)
                                1797         & " = " & to_string (s)
                                1798         severity error;
                                1799       auns := "00000010";
                                1800       buns := "0000001L";
                                1801       s    := auns ?>= buns;
                                1802       assert s = '1'
                                1803         report "uns " & to_string(auns) & " ?>= " & to_string(buns)
                                1804         & " = " & to_string (s)
                                1805         severity error;
                                1806       auns := "00000010";
                                1807       buns := "0000001X";
                                1808       s    := auns ?>= buns;
                                1809       assert s = 'X'
                                1810         report "uns " & to_string(auns) & " ?>= " & to_string(buns)
                                1811         & " = " & to_string (s)
                                1812         severity error;
                                1813       auns := "0000001Z";
                                1814       buns := "00000010";
                                1815       s    := auns ?>= buns;
                                1816       assert s = 'X'
                                1817         report "uns " & to_string(auns) & " ?>= " & to_string(buns)
                                1818         & " = " & to_string (s)
                                1819         severity error;
                                1820       auns := "0000000H";
                                1821       buns := "LLLLLLLL";
                                1822       s    := auns ?>= buns;
                                1823       assert s = '1'
                                1824         report "uns " & to_string(auns) & " ?>= " & to_string(buns)
                                1825         & " = " & to_string (s)
                                1826         severity error;
                                1827       auns := "11111111";
                                1828       buns := "HHHHHHHH";
                                1829       s    := auns ?>= buns;
                                1830       assert s = '1'
                                1831         report "uns " & to_string(auns) & " ?>= " & to_string(buns)
                                1832         & " = " & to_string (s)
                                1833         severity error;
                                1834       check6 := "H000010";
                                1835       buns   := "LH00001L";
                                1836       s      := check6 ?= buns;
                                1837       assert s = '1'
                                1838         report "s " & to_string(check6) & " ?= " & to_string(buns)
                                1839         & " = " & to_string (s)
                                1840         severity error;
                                1841       check6 := "H000010";
                                1842       buns   := "HH00001L";
                                1843       s      := check6 ?= buns;
                                1844       assert s = '0'
                                1845         report "s " & to_string(check6) & " ?= " & to_string(buns)
                                1846         & " = " & to_string (s)
                                1847         severity error;
                                1848       check6 := "L000010";
                                1849       buns   := "LL00001L";
                                1850       s      := check6 ?= buns;
                                1851       assert s = '1'
                                1852         report "s " & to_string(check6) & " ?= " & to_string(buns)
                                1853         & " = " & to_string (s)
                                1854         severity error;
                                1855       auns := "XXXXXXXX";
                                1856       buns := "XXXXXXXX";
                                1857       s    := auns ?>= buns;
                                1858       assert s = 'X'
                                1859         report "uns " & to_string(auns) & " ?>= " & to_string(buns)
                                1860         & " = " & to_string (s)
                                1861         severity error;
                                1862       
           1 if                 1863         report "Expect an error from a compare function here" severity note;
                                1864         auns := "UZ-WHL01";
                                1865         buns := "XXXXXXXX";
                                1866         s    := auns ?>= buns;
                                1867         assert s = 'X'
                                1868           report "uns " & to_string(auns) & " ?>= " & to_string(buns)
                                1869           & " = " & to_string (s)
                                1870           severity error;
                                1871       end if;
                                1872       
           0 implicit_else      1862       if not quiet then
                                1863         
           1 reconvergence      1872       auns := "UZXWHL01";
                                1873       buns := "XXXXXXXX";
                                1874       s    := auns ?>= buns;
                                1875       assert s = 'X'
                                1876         report "uns " & to_string(auns) & " ?>= " & to_string(buns)
                                1877         & " = " & to_string (s)
                                1878         severity error;
                                1879       -- signed
                                1880       as := "00000010";
                                1881       bs := "00000010";
                                1882       s  := as ?/= bs;
                                1883       assert s = '0'
                                1884         report "s " & to_string(as) & " ?/= " & to_string(bs)
                                1885         & " = " & to_string (s)
                                1886         severity error;
                                1887       as := "00000010";
                                1888       bs := "00000011";
                                1889       s  := as ?/= bs;
                                1890       assert s = '1'
                                1891         report "s " & to_string(as) & " ?/= " & to_string(bs)
                                1892         & " = " & to_string (s)
                                1893         severity error;
                                1894       as := "00000010";
                                1895       bs := "0000001H";
                                1896       s  := as ?/= bs;
                                1897       assert s = '1'
                                1898         report "s " & to_string(as) & " ?/= " & to_string(bs)
                                1899         & " = " & to_string (s)
                                1900         severity error;
                                1901       as := "00000010";
                                1902       bs := "0000001L";
                                1903       s  := as ?/= bs;
                                1904       assert s = '0'
                                1905         report "s " & to_string(as) & " ?/= " & to_string(bs)
                                1906         & " = " & to_string (s)
                                1907         severity error;
                                1908       checks6 := "H000010";
                                1909       bs      := "HH00001L";
                                1910       s       := checks6 ?/= bs;
                                1911       assert s = '0'
                                1912         report "s " & to_string(checks6) & " ?/= " & to_string(bs)
                                1913         & " = " & to_string (s)
                                1914         severity error;
                                1915       checks6 := "H00001H";
                                1916       bs      := "HH00001L";
                                1917       s       := checks6 ?/= bs;
                                1918       assert s = '1'
                                1919         report "s " & to_string(checks6) & " ?/= " & to_string(bs)
                                1920         & " = " & to_string (s)
                                1921         severity error;
                                1922       as := "00000010";
                                1923       bs := "0000001X";
                                1924       s  := as ?/= bs;
                                1925       assert s = 'X'
                                1926         report "s " & to_string(as) & " ?/= " & to_string(bs)
                                1927         & " = " & to_string (s)
                                1928         severity error;
                                1929       as := "0000001X";
                                1930       bs := "00000010";
                                1931       s  := as ?/= bs;
                                1932       assert s = 'X'
                                1933         report "s " & to_string(as) & " ?/= " & to_string(bs)
                                1934         & " = " & to_string (s)
                                1935         severity error;
                                1936       as := "00000000";
                                1937       bs := "LLLLLLLL";
                                1938       s  := as ?/= bs;
                                1939       assert s = '0'
                                1940         report "s " & to_string(as) & " ?/= " & to_string(bs)
                                1941         & " = " & to_string (s)
                                1942         severity error;
                                1943       as := "11111111";
                                1944       bs := "HHHHHHHH";
                                1945       s  := as ?/= bs;
                                1946       assert s = '0'
                                1947         report "s " & to_string(as) & " ?/= " & to_string(bs)
                                1948         & " = " & to_string (s)
                                1949         severity error;
                                1950       as := "XXXXXXXX";
                                1951       bs := "XXXXXXXX";
                                1952       s  := as ?/= bs;
                                1953       assert s = 'X'
                                1954         report "s " & to_string(as) & " ?/= " & to_string(bs)
                                1955         & " = " & to_string (s)
                                1956         severity error;
                                1957       as := "UZ-WHL01";
                                1958       bs := "XXXXXXXX";
                                1959       s  := as ?/= bs;
                                1960       assert s = 'U'
                                1961         report "s " & to_string(as) & " ?/= " & to_string(bs)
                                1962         & " = " & to_string (s)
                                1963         severity error;
                                1964       as := "--------";
                                1965       bs := "XXXXXXXX";
                                1966       s  := as ?/= bs;
                                1967       assert s = '0'
                                1968         report "s " & to_string(as) & " ?/= " & to_string(bs)
                                1969         & " = " & to_string (s)
                                1970         severity error;
                                1971       as := "10101010";
                                1972       bs := "-0-0-0-0";
                                1973       s  := as ?/= bs;
                                1974       assert s = '0'
                                1975         report "s " & to_string(as) & " ?/= " & to_string(bs)
                                1976         & " = " & to_string (s)
                                1977         severity error;
                                1978       as := "10101010";
                                1979       bs := "-0-0-0-1";
                                1980       s  := as ?/= bs;
                                1981       assert s = '1'
                                1982         report "s " & to_string(as) & " ?/= " & to_string(bs)
                                1983         & " = " & to_string (s)
                                1984         severity error;
                                1985       as := "Z0U0W0X0";
                                1986       bs := "-0-0-0-0";
                                1987       s  := as ?/= bs;
                                1988       assert s = '0'
                                1989         report "s " & to_string(as) & " ?/= " & to_string(bs)
                                1990         & " = " & to_string (s)
                                1991         severity error;
                                1992       -- ?<
                                1993       as := "00000010";
                                1994       bs := "00000010";
                                1995       s  := as ?< bs;
                                1996       assert s = '0'
                                1997         report "s " & to_string(as) & " ?< " & to_string(bs)
                                1998         & " = " & to_string (s)
                                1999         severity error;
                                2000       as := "00000010";
                                2001       bs := "00000011";
                                2002       s  := as ?< bs;
                                2003       assert s = '1'
                                2004         report "s " & to_string(as) & " ?< " & to_string(bs)
                                2005         & " = " & to_string (s)
                                2006         severity error;
                                2007       as := "00000010";
                                2008       bs := "0000001H";
                                2009       s  := as ?< bs;
                                2010       assert s = '1'
                                2011         report "s " & to_string(as) & " ?< " & to_string(bs)
                                2012         & " = " & to_string (s)
                                2013         severity error;
                                2014       as := "00000010";
                                2015       bs := "0000001L";
                                2016       s  := as ?< bs;
                                2017       assert s = '0'
                                2018         report "s " & to_string(as) & " ?< " & to_string(bs)
                                2019         & " = " & to_string (s)
                                2020         severity error;
                                2021       as := "H0000010";
                                2022       bs := "0000001L";
                                2023       s  := as ?< bs;
                                2024       assert s = '1'
                                2025         report "s " & to_string(as) & " ?< " & to_string(bs)
                                2026         & " = " & to_string (s)
                                2027         severity error;
                                2028       checks6 := "H00001L";
                                2029       bs      := "HH00001H";
                                2030       s       := checks6 ?< bs;
                                2031       assert s = '1'
                                2032         report "s " & to_string(checks6) & " ?< " & to_string(bs)
                                2033         & " = " & to_string (s)
                                2034         severity error;
                                2035       checks6 := "H00001H";
                                2036       bs      := "HH00001L";
                                2037       s       := checks6 ?< bs;
                                2038       assert s = '0'
                                2039         report "s " & to_string(checks6) & " ?< " & to_string(bs)
                                2040         & " = " & to_string (s)
                                2041         severity error;
                                2042       as := "00000010";
                                2043       bs := "0000001X";
                                2044       s  := as ?< bs;
                                2045       assert s = 'X'
                                2046         report "s " & to_string(as) & " ?< " & to_string(bs)
                                2047         & " = " & to_string (s)
                                2048         severity error;
                                2049       as := "0000001X";
                                2050       bs := "00000010";
                                2051       s  := as ?< bs;
                                2052       assert s = 'X'
                                2053         report "s " & to_string(as) & " ?< " & to_string(bs)
                                2054         & " = " & to_string (s)
                                2055         severity error;
                                2056       as := "0000000H";
                                2057       bs := "LLLLLLLL";
                                2058       s  := as ?< bs;
                                2059       assert s = '0'
                                2060         report "s " & to_string(as) & " ?< " & to_string(bs)
                                2061         & " = " & to_string (s)
                                2062         severity error;
                                2063       as := "11111111";
                                2064       bs := "HHHHHHHH";
                                2065       s  := as ?< bs;
                                2066       assert s = '0'
                                2067         report "s " & to_string(as) & " ?< " & to_string(bs)
                                2068         & " = " & to_string (s)
                                2069         severity error;
                                2070       as := "XXXXXXXX";
                                2071       bs := "XXXXXXXX";
                                2072       s  := as ?< bs;
                                2073       assert s = 'X'
                                2074         report "s " & to_string(as) & " ?< " & to_string(bs)
                                2075         & " = " & to_string (s)
                                2076         severity error;
                                2077       
           1 if                 2078         report "Expect an error from a compare function here" severity note;
                                2079         as := "UZ-WHL01";
                                2080         bs := "XXXXXXXX";
                                2081         s  := as ?< bs;
                                2082         assert s = 'X'
                                2083           report "s " & to_string(as) & " ?< " & to_string(bs)
                                2084           & " = " & to_string (s)
                                2085           severity error;
                                2086       end if;
                                2087       
           0 implicit_else      2077       if not quiet then
                                2078         
           1 reconvergence      2087       as := "UZXWHL01";
                                2088       bs := "XXXXXXXX";
                                2089       s  := as ?< bs;
                                2090       assert s = 'X'
                                2091         report "s " & to_string(as) & " ?< " & to_string(bs)
                                2092         & " = " & to_string (s)
                                2093         severity error;
                                2094       -- ?<=
                                2095       as := "00000010";
                                2096       bs := "00000010";
                                2097       s  := as ?<= bs;
                                2098       assert s = '1'
                                2099         report "s " & to_string(as) & " ?<= " & to_string(bs)
                                2100         & " = " & to_string (s)
                                2101         severity error;
                                2102       as := "00000010";
                                2103       bs := "00000011";
                                2104       s  := as ?<= bs;
                                2105       assert s = '1'
                                2106         report "s " & to_string(as) & " ?<= " & to_string(bs)
                                2107         & " = " & to_string (s)
                                2108         severity error;
                                2109       as := "00000010";
                                2110       bs := "0000001H";
                                2111       s  := as ?<= bs;
                                2112       assert s = '1'
                                2113         report "s " & to_string(as) & " ?<= " & to_string(bs)
                                2114         & " = " & to_string (s)
                                2115         severity error;
                                2116       as := "H0000L1H";
                                2117       bs := "0000001H";
                                2118       s  := as ?<= bs;
                                2119       assert s = '1'
                                2120         report "s " & to_string(as) & " ?<= " & to_string(bs)
                                2121         & " = " & to_string (s)
                                2122         severity error;
                                2123       checks6 := "H00001L";
                                2124       bs      := "HH00001H";
                                2125       s       := checks6 ?<= bs;
                                2126       assert s = '1'
                                2127         report "s " & to_string(checks6) & " ?<= " & to_string(bs)
                                2128         & " = " & to_string (s)
                                2129         severity error;
                                2130       checks6 := "H00001H";
                                2131       bs      := "HH00001L";
                                2132       s       := checks6 ?<= bs;
                                2133       assert s = '0'
                                2134         report "s " & to_string(checks6) & " ?<= " & to_string(bs)
                                2135         & " = " & to_string (s)
                                2136         severity error;
                                2137       checks6 := "H00001H";
                                2138       bs      := "HH00001H";
                                2139       s       := checks6 ?<= bs;
                                2140       assert s = '1'
                                2141         report "s " & to_string(checks6) & " ?<= " & to_string(bs)
                                2142         & " = " & to_string (s)
                                2143         severity error;
                                2144       as := "00000010";
                                2145       bs := "0000001L";
                                2146       s  := as ?<= bs;
                                2147       assert s = '1'
                                2148         report "s " & to_string(as) & " ?<= " & to_string(bs)
                                2149         & " = " & to_string (s)
                                2150         severity error;
                                2151       as := "00000010";
                                2152       bs := "0000001X";
                                2153       s  := as ?<= bs;
                                2154       assert s = 'X'
                                2155         report "s " & to_string(as) & " ?<= " & to_string(bs)
                                2156         & " = " & to_string (s)
                                2157         severity error;
                                2158       as := "0000001X";
                                2159       bs := "00000010";
                                2160       s  := as ?<= bs;
                                2161       assert s = 'X'
                                2162         report "s " & to_string(as) & " ?<= " & to_string(bs)
                                2163         & " = " & to_string (s)
                                2164         severity error;
                                2165       as := "0000000H";
                                2166       bs := "LLLLLLLL";
                                2167       s  := as ?<= bs;
                                2168       assert s = '0'
                                2169         report "s " & to_string(as) & " ?<= " & to_string(bs)
                                2170         & " = " & to_string (s)
                                2171         severity error;
                                2172       as := "11111111";
                                2173       bs := "HHHHHHHH";
                                2174       s  := as ?<= bs;
                                2175       assert s = '1'
                                2176         report "s " & to_string(as) & " ?<= " & to_string(bs)
                                2177         & " = " & to_string (s)
                                2178         severity error;
                                2179       as := "XXXXXXXX";
                                2180       bs := "XXXXXXXX";
                                2181       s  := as ?<= bs;
                                2182       assert s = 'X'
                                2183         report "s " & to_string(as) & " ?<= " & to_string(bs)
                                2184         & " = " & to_string (s)
                                2185         severity error;
                                2186       
           1 if                 2187         report "Expect an error from a compare function here" severity note;
                                2188         as := "UZ-WHL01";
                                2189         bs := "XXXXXXXX";
                                2190         s  := as ?<= bs;
                                2191         assert s = 'X'
                                2192           report "s " & to_string(as) & " ?<= " & to_string(bs)
                                2193           & " = " & to_string (s)
                                2194           severity error;
                                2195       end if;
                                2196       
           0 implicit_else      2186       if not quiet then
                                2187         
           1 reconvergence      2196       as := "UZXWHL01";
                                2197       bs := "XXXXXXXX";
                                2198       s  := as ?<= bs;
                                2199       assert s = 'X'
                                2200         report "s " & to_string(as) & " ?<= " & to_string(bs)
                                2201         & " = " & to_string (s)
                                2202         severity error;
                                2203       -- ?>
                                2204       as := "00000010";
                                2205       bs := "00000010";
                                2206       s  := as ?> bs;
                                2207       assert s = '0'
                                2208         report "s " & to_string(as) & " ?> " & to_string(bs)
                                2209         & " = " & to_string (s)
                                2210         severity error;
                                2211       bs := "00000010";
                                2212       as := "00000011";
                                2213       s  := as ?> bs;
                                2214       assert s = '1'
                                2215         report "s " & to_string(as) & " ?> " & to_string(bs)
                                2216         & " = " & to_string (s)
                                2217         severity error;
                                2218       bs := "00000010";
                                2219       as := "0000001H";
                                2220       s  := as ?> bs;
                                2221       assert s = '1'
                                2222         report "s " & to_string(as) & " ?> " & to_string(bs)
                                2223         & " = " & to_string (s)
                                2224         severity error;
                                2225       bs := "H0000010";
                                2226       as := "0000001H";
                                2227       s  := as ?> bs;
                                2228       assert s = '1'
                                2229         report "s " & to_string(as) & " ?> " & to_string(bs)
                                2230         & " = " & to_string (s)
                                2231         severity error;
                                2232       checks6 := "H00001H";
                                2233       bs      := "HH00001L";
                                2234       s       := checks6 ?> bs;
                                2235       assert s = '1'
                                2236         report "s " & to_string(checks6) & " ?> " & to_string(bs)
                                2237         & " = " & to_string (s)
                                2238         severity error;
                                2239       checks6 := "H00001L";
                                2240       bs      := "HH00001H";
                                2241       s       := checks6 ?> bs;
                                2242       assert s = '0'
                                2243         report "s " & to_string(checks6) & " ?> " & to_string(bs)
                                2244         & " = " & to_string (s)
                                2245         severity error;
                                2246       as := "00000010";
                                2247       bs := "0000001L";
                                2248       s  := as ?> bs;
                                2249       assert s = '0'
                                2250         report "s " & to_string(as) & " ?> " & to_string(bs)
                                2251         & " = " & to_string (s)
                                2252         severity error;
                                2253       as := "00000010";
                                2254       bs := "0000001X";
                                2255       s  := as ?> bs;
                                2256       assert s = 'X'
                                2257         report "s " & to_string(as) & " ?> " & to_string(bs)
                                2258         & " = " & to_string (s)
                                2259         severity error;
                                2260       as := "0000001Z";
                                2261       bs := "00000010";
                                2262       s  := as ?> bs;
                                2263       assert s = 'X'
                                2264         report "s " & to_string(as) & " ?> " & to_string(bs)
                                2265         & " = " & to_string (s)
                                2266         severity error;
                                2267       as := "0000000H";
                                2268       bs := "LLLLLLLL";
                                2269       s  := as ?> bs;
                                2270       assert s = '1'
                                2271         report "s " & to_string(as) & " ?> " & to_string(bs)
                                2272         & " = " & to_string (s)
                                2273         severity error;
                                2274       as := "11111111";
                                2275       bs := "HHHHHHHH";
                                2276       s  := as ?> bs;
                                2277       assert s = '0'
                                2278         report "s " & to_string(as) & " ?> " & to_string(bs)
                                2279         & " = " & to_string (s)
                                2280         severity error;
                                2281       as := "XXXXXXXX";
                                2282       bs := "XXXXXXXX";
                                2283       s  := as ?> bs;
                                2284       assert s = 'X'
                                2285         report "s " & to_string(as) & " ?> " & to_string(bs)
                                2286         & " = " & to_string (s)
                                2287         severity error;
                                2288       
           1 if                 2289         report "Expect an error from a compare function here" severity note;
                                2290         as := "UZ-WHL01";
                                2291         bs := "XXXXXXXX";
                                2292         s  := as ?> bs;
                                2293         assert s = 'X'
                                2294           report "s " & to_string(as) & " ?> " & to_string(bs)
                                2295           & " = " & to_string (s)
                                2296           severity error;
                                2297       end if;
                                2298       
           0 implicit_else      2288       if not quiet then
                                2289         
           1 reconvergence      2298       as := "UZXWHL01";
                                2299       bs := "XXXXXXXX";
                                2300       s  := as ?> bs;
                                2301       assert s = 'X'
                                2302         report "s " & to_string(as) & " ?> " & to_string(bs)
                                2303         & " = " & to_string (s)
                                2304         severity error;
                                2305       -- ?>=
                                2306       as := "00000010";
                                2307       bs := "00000010";
                                2308       s  := as ?>= bs;
                                2309       assert s = '1'
                                2310         report "s " & to_string(as) & " ?>= " & to_string(bs)
                                2311         & " = " & to_string (s)
                                2312         severity error;
                                2313       bs := "00000010";
                                2314       as := "00000011";
                                2315       s  := as ?>= bs;
                                2316       assert s = '1'
                                2317         report "s " & to_string(as) & " ?>= " & to_string(bs)
                                2318         & " = " & to_string (s)
                                2319         severity error;
                                2320       bs := "00000010";
                                2321       as := "0000001H";
                                2322       s  := as ?>= bs;
                                2323       assert s = '1'
                                2324         report "s " & to_string(as) & " ?>= " & to_string(bs)
                                2325         & " = " & to_string (s)
                                2326         severity error;
                                2327       as := "00000010";
                                2328       bs := "0000001H";
                                2329       s  := as ?>= bs;
                                2330       assert s = '0'
                                2331         report "s " & to_string(as) & " ?>= " & to_string(bs)
                                2332         & " = " & to_string (s)
                                2333         severity error;
                                2334       as := "H0000010";
                                2335       bs := "0000001H";
                                2336       s  := as ?>= bs;
                                2337       assert s = '0'
                                2338         report "s " & to_string(as) & " ?>= " & to_string(bs)
                                2339         & " = " & to_string (s)
                                2340         severity error;
                                2341       checks6 := "H000010";
                                2342       bs      := "HH00001L";
                                2343       s       := checks6 ?>= bs;
                                2344       assert s = '1'
                                2345         report "s " & to_string(checks6) & " ?>= " & to_string(bs)
                                2346         & " = " & to_string (s)
                                2347         severity error;
                                2348       checks6 := "H11101H";               -- -5
                                2349       bs      := "HH11101L";              -- -6
                                2350       s       := checks6 ?>= bs;
                                2351       assert s = '1'
                                2352         report "s " & to_string(checks6) & " ?>= " & to_string(bs)
                                2353         & " = " & to_string (s)
                                2354         severity error;
                                2355       checks6 := "H000010";
                                2356       bs      := "HH00001H";
                                2357       s       := checks6 ?>= bs;
                                2358       assert s = '0'
                                2359         report "s " & to_string(checks6) & " ?>= " & to_string(bs)
                                2360         & " = " & to_string (s)
                                2361         severity error;
                                2362       as := "00000010";
                                2363       bs := "0000001L";
                                2364       s  := as ?>= bs;
                                2365       assert s = '1'
                                2366         report "s " & to_string(as) & " ?>= " & to_string(bs)
                                2367         & " = " & to_string (s)
                                2368         severity error;
                                2369       as := "00000010";
                                2370       bs := "0000001X";
                                2371       s  := as ?>= bs;
                                2372       assert s = 'X'
                                2373         report "s " & to_string(as) & " ?>= " & to_string(bs)
                                2374         & " = " & to_string (s)
                                2375         severity error;
                                2376       as := "0000001Z";
                                2377       bs := "00000010";
                                2378       s  := as ?>= bs;
                                2379       assert s = 'X'
                                2380         report "s " & to_string(as) & " ?>= " & to_string(bs)
                                2381         & " = " & to_string (s)
                                2382         severity error;
                                2383       as := "0000000H";
                                2384       bs := "LLLLLLLL";
                                2385       s  := as ?>= bs;
                                2386       assert s = '1'
                                2387         report "s " & to_string(as) & " ?>= " & to_string(bs)
                                2388         & " = " & to_string (s)
                                2389         severity error;
                                2390       as := "11111111";
                                2391       bs := "HHHHHHHH";
                                2392       s  := as ?>= bs;
                                2393       assert s = '1'
                                2394         report "s " & to_string(as) & " ?>= " & to_string(bs)
                                2395         & " = " & to_string (s)
                                2396         severity error;
                                2397       as := "XXXXXXXX";
                                2398       bs := "XXXXXXXX";
                                2399       s  := as ?>= bs;
                                2400       assert s = 'X'
                                2401         report "s " & to_string(as) & " ?>= " & to_string(bs)
                                2402         & " = " & to_string (s)
                                2403         severity error;
                                2404       
           1 if                 2405         report "Expect an error from a compare function here" severity note;
                                2406         as := "UZ-WHL01";
                                2407         bs := "XXXXXXXX";
                                2408         s  := as ?>= bs;
                                2409         assert s = 'X'
                                2410           report "s " & to_string(as) & " ?>= " & to_string(bs)
                                2411           & " = " & to_string (s)
                                2412           severity error;
                                2413       end if;
                                2414       
           0 implicit_else      2404       if not quiet then
                                2405         
           1 reconvergence      2414       as := "UZXWHL01";
                                2415       bs := "XXXXXXXX";
                                2416       s  := as ?>= bs;
                                2417       assert s = 'X'
                                2418         report "s " & to_string(as) & " ?>= " & to_string(bs)
                                2419         & " = " & to_string (s)
                                2420         severity error;
                                2421   
                                2422   
                                2423       
                                2424       assert (quiet) report "match test completed" severity note;
                                2425       matchtest_done <= true;
                                2426       wait;
                                2427     end process matchtest
           1 sequence           2439       wait until start_sizerestest;
                                2440   --    check6           := "000111";                        -- 7
                                2441   --    check5           := resize (check6, check5);
                                2442   --    check5t          := "00111";                         -- 7
                                2443   --    report_error ("resize size_res", check5, check5t);
                                2444   --    check5           := "01000";                         -- 8
                                2445   --    check6           := resize (check5, check6);
                                2446   --    check6t          := "001000";                        -- 8
                                2447   --    report_error ("resize size_res", check6, check6t);
                                2448   --    nullu            := resize (check5, nullu);
                                2449   --    check5           := resize (nullu, check5);
                                2450   --    check5t          := (others => '0');
                                2451   --    report_error ("resize (null, check5)", check5, check5t);
                                2452   --    checkint         := 4;
                                2453   --    check5           := to_unsigned(checkint, check5);
                                2454   --    check5t          := "00100";                         -- 4
                                2455   --    report_error ("to_unsigned(4, size_res)", check5, check5t);
                                2456   --    nullu            := to_unsigned (checkint, nullu);
                                2457   --    -- signed
                                2458   --    checks6          := "000111";                        -- 7
                                2459   --    checks5          := resize (checks6, checks5);
                                2460   --    checks5t         := "00111";                         -- 7
                                2461   --    report_error ("resize s size_res", checks5, checks5t);
                                2462   --    checks5          := "01000";                         -- 8
                                2463   --    checks6          := resize (checks5, checks6);
                                2464   --    checks6t         := "001000";                        -- 8
                                2465   --    report_error ("resize s size_res", checks6, checks6t);
                                2466   --    nulls            := resize (checks5, nulls);
                                2467   --    checks5          := resize (nulls, checks5);
                                2468   --    checks5t         := (others => '0');
                                2469   --    report_error ("resize (null, checks5)", checks5, checks5t);
                                2470   --    checkint         := 4;
                                2471   --    checks5          := to_signed(checkint, checks5);
                                2472   --    checks5t         := "00100";                         -- 4
                                2473   --    report_error ("to_signed(4, size_res)", checks5, checks5t);
                                2474   --    nulls            := to_signed (checkint, nulls);
                                2475       
           1 blocking           2475       assert (quiet) report "Size_RES testing completed" severity note;
                                2476       sizerestest_done <= true;
                                2477       wait;
                                2478     end process sizerestest
